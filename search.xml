<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode[501]Find Mode in Binary Search Tree Python3实现（二叉搜索树Morris遍历）</title>
      <link href="2020-leetcode-501.html"/>
      <url>2020-leetcode-501.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary search tree (BST) with duplicates, find all the mode(s) (the mo</span></span><br><span class="line"><span class="comment"># st frequently occurred element) in the given BST. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Assume a BST is defined as follows: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The left subtree of a node contains only nodes with keys less than or equal t</span></span><br><span class="line"><span class="comment"># o the node's key. </span></span><br><span class="line"><span class="comment">#  The right subtree of a node contains only nodes with keys greater than or equ</span></span><br><span class="line"><span class="comment"># al to the node's key. </span></span><br><span class="line"><span class="comment">#  Both the left and right subtrees must also be binary search trees. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  For example: </span></span><br><span class="line"><span class="comment"># Given BST [1,null,2,2], </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#    1</span></span><br><span class="line"><span class="comment">#     \</span></span><br><span class="line"><span class="comment">#      2</span></span><br><span class="line"><span class="comment">#     /</span></span><br><span class="line"><span class="comment">#    2</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  return [2]. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  <span class="doctag">Note:</span> If a tree has more than one mode, you can return them in any order. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Follow up: Could you do that without using any extra space? (Assume that the </span></span><br><span class="line"><span class="comment"># implicit stack space incurred due to recursion does not count). </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 163 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        count = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root, count)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> root): <span class="keyword">return</span></span><br><span class="line">            count[root.val] = count.get(root.val, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            dfs(root.left, count)</span><br><span class="line">            dfs(root.right, count)</span><br><span class="line">        dfs(root, count)</span><br><span class="line">        maxNum = <span class="number">0</span></span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> count.items():</span><br><span class="line">            <span class="keyword">if</span> item[<span class="number">1</span>] &gt; maxNum:</span><br><span class="line">                list.clear();</span><br><span class="line">                list.append(item[<span class="number">0</span>])</span><br><span class="line">                maxNum = item[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> item[<span class="number">1</span>] == maxNum:</span><br><span class="line">                list.append(item[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行耗时:76 ms,击败了46.02% 的Python3用户</span></span><br><span class="line"><span class="comment">#内存消耗:17.2 MB,击败了58.56% 的Python3用户</span></span><br></pre></td></tr></table></figure><p>也可以用简洁的写法生成list，但效率很低：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      maxValue = max(count.values())</span><br><span class="line">      <span class="keyword">return</span> [key <span class="keyword">for</span> key <span class="keyword">in</span> count.keys() <span class="keyword">if</span> count[key]==maxValue]</span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 执行耗时:84 ms,击败了25.66% 的Python3用户</span></span><br><span class="line"><span class="comment">#内存消耗:17.2 MB,击败了48.66% 的Python3用户</span></span><br></pre></td></tr></table></figure><p>上面是最笨的想法，直接遍历节点并计数，但没有用到二分查找树的特性，也没能做到”不用额外空间“。</p><h3 id="改进做法"><a href="#改进做法" class="headerlink" title="改进做法"></a>改进做法</h3><p>二分查找树 =&gt; 中序遍历得到递增数列</p><p>问题可转化成在递增数列中找众数，空间复杂度可降为O(1)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        cur = <span class="keyword">None</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        maxCount = <span class="number">0</span></span><br><span class="line">        list = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> cur, count, maxCount, list</span><br><span class="line">            <span class="keyword">if</span> root.left: inorder(root.left)</span><br><span class="line">            <span class="keyword">if</span> (root.val == cur):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = root.val</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; maxCount:</span><br><span class="line">                maxCount = count</span><br><span class="line">                list = [cur]</span><br><span class="line">            <span class="keyword">elif</span> count == maxCount:</span><br><span class="line">                list.append(cur)</span><br><span class="line">            <span class="keyword">if</span> root.right: inorder(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root: inorder(root)</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行耗时:80 ms,击败了33.08% 的Python3用户</span></span><br><span class="line"><span class="comment">#内存消耗:17.2 MB,击败了63.71% 的Python3用户</span></span><br></pre></td></tr></table></figure><h3 id="终极方法：Morris中序遍历"><a href="#终极方法：Morris中序遍历" class="headerlink" title="终极方法：Morris中序遍历"></a>终极方法：Morris中序遍历</h3><p>KMP算法的发明者之一Morris设计的神级遍历方法。</p><p>可将非递归遍历中的空间复杂度降为O(1)，从而实现时间复杂度为O(N)，而空间复杂度为O(1)的精妙算法。（普通递归算法要算上栈的空间，复杂度是O(n)）</p><p>morris遍历利用的是树的叶节点左右孩子为空（树的大量空闲指针），实现空间开销的极限缩减。</p><p>本题在遍历时若使用Morris算法，能将空间复杂度降到O(1)。</p><p>待学习，留个坑这周补上。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-grammar</title>
      <link href="2020-python-grammar.html"/>
      <url>2020-python-grammar.html</url>
      
        <content type="html"><![CDATA[<h2 id="列表推导式生成list"><a href="#列表推导式生成list" class="headerlink" title="列表推导式生成list"></a>列表推导式生成list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in后面跟其他可迭代对象,如字符串</span></span><br><span class="line">list_c = [<span class="number">7</span> * c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"python"</span>]</span><br><span class="line">print(list_c) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 带if条件语句的列表推导式</span></span><br><span class="line">list_d = [d <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">6</span>) <span class="keyword">if</span> d % <span class="number">2</span> != <span class="number">0</span>]</span><br><span class="line">print(list_d) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个for循环</span></span><br><span class="line">list_e = [(e, f * f) <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>)]</span><br><span class="line">print(list_e) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表推导式,多个并列条件</span></span><br><span class="line">list_g = [[x <span class="keyword">for</span> x <span class="keyword">in</span> range(g - <span class="number">3</span>, g)] <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">22</span>) <span class="keyword">if</span> g % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> g != <span class="number">0</span>]</span><br><span class="line">print(list_g)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'ppppppp'</span>, <span class="string">'yyyyyyy'</span>, <span class="string">'ttttttt'</span>, <span class="string">'hhhhhhh'</span>, <span class="string">'ooooooo'</span>, <span class="string">'nnnnnnn'</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">[(<span class="number">0</span>, <span class="number">25</span>), (<span class="number">0</span>, <span class="number">100</span>), (<span class="number">1</span>, <span class="number">25</span>), (<span class="number">1</span>, <span class="number">100</span>), (<span class="number">2</span>, <span class="number">25</span>), (<span class="number">2</span>, <span class="number">100</span>)]</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>], [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>], [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>], [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/weixin_43790276/article/details/90247423" target="_blank" rel="noopener">Python列表推导式_weixin_43790276的博客-CSDN博客</a></p><h2 id="Dict操作"><a href="#Dict操作" class="headerlink" title="Dict操作"></a>Dict操作</h2><h3 id="找出最大值"><a href="#找出最大值" class="headerlink" title="找出最大值"></a>找出最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sampleDict = &#123;<span class="string">'Ritika'</span>: <span class="number">5</span>, <span class="string">'Sam'</span>: <span class="number">27</span>, <span class="string">'John'</span>: <span class="number">12</span>, <span class="string">'Sachin'</span>: <span class="number">14</span>, <span class="string">'Mark'</span>: <span class="number">19</span>, <span class="string">'Shaun'</span> : <span class="number">27</span>&#125;</span><br><span class="line">itemMaxValue = max(sampleDict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">maxValue = max(sampleDict.values())</span><br><span class="line">print(itemMaxValue[<span class="number">0</span>], maxValue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># Sam 27</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark核心概念RDD</title>
      <link href="2020-spark-rdd.html"/>
      <url>2020-spark-rdd.html</url>
      
        <content type="html"><![CDATA[<p>RDD（Resilient Distributed Datasets）弹性分布式数据集 ，是Spark中最基本的抽象，在 RDD 源码中这样来描述 RDD：</p><ul><li><p>A list of partitions</p></li><li><p>A function for computing each split</p></li><li><p>A list of dependencies on other RDDs</p></li><li><p>Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</p></li><li><p>Optionally, a list of preferred locations to compute each split on (e.g. block locations for an HDFS file)</p></li></ul><p>个人理解，RDD可并行化数据集的抽象，对它的操作能自动分发到集群上处理。</p><p>RDD支持两种操作：转换（transformation）从现有的数据集创建一个新的数据集；而动作（actions）在数据集上运行计算后，返回一个值给驱动程序。</p><p>经典的WordCount例子，同时包含了actions和transformation，如下图：</p><p><img src="https://images2018.cnblogs.com/blog/1228818/201804/1228818-20180421133911520-1150689001.png" alt="img"></p><p>其中hello.txt如下图：</p><p><img src="https://images2018.cnblogs.com/blog/1228818/201804/1228818-20180421134031551-1670646166.png" alt="img"></p><p>下面是transformation和actions的常用算子介绍。</p><h2 id="一、Transformation"><a href="#一、Transformation" class="headerlink" title="一、Transformation"></a>一、Transformation</h2><p>spark 常用的 Transformation 算子如下表：</p><table><thead><tr><th>Transformation 算子</th><th>Meaning（含义）</th></tr></thead><tbody><tr><td><strong>map</strong>(<em>func</em>)</td><td>对原 RDD 中每个元素运用 <em>func</em> 函数，并生成新的 RDD</td></tr><tr><td><strong>filter</strong>(<em>func</em>)</td><td>对原 RDD 中每个元素使用<em>func</em> 函数进行过滤，并生成新的 RDD</td></tr><tr><td><strong>flatMap</strong>(<em>func</em>)</td><td>与 map 类似，但是每一个输入的 item 被映射成 0 个或多个输出的 items（ <em>func</em> 返回类型需要为 Seq ）。</td></tr><tr><td><strong>mapPartitions</strong>(<em>func</em>)</td><td>与 map 类似，但函数单独在 RDD 的每个分区上运行， <em>func</em>函数的类型为 Iterator<t> =&gt; Iterator<u> ，其中 T 是 RDD 的类型，即 RDD[T]</u></t></td></tr><tr><td><strong>mapPartitionsWithIndex</strong>(<em>func</em>)</td><td>与 mapPartitions 类似，但 <em>func</em> 类型为 (Int, Iterator<t>) =&gt; Iterator<u> ，其中第一个参数为分区索引</u></t></td></tr><tr><td><strong>sample</strong>(<em>withReplacement</em>, <em>fraction</em>, <em>seed</em>)</td><td>数据采样，有三个可选参数：设置是否放回（withReplacement）、采样的百分比（<em>fraction</em>）、随机数生成器的种子（seed）；</td></tr><tr><td><strong>union</strong>(<em>otherDataset</em>)</td><td>合并两个 RDD</td></tr><tr><td><strong>intersection</strong>(<em>otherDataset</em>)</td><td>求两个 RDD 的交集</td></tr><tr><td><strong>distinct</strong>([<em>numTasks</em>]))</td><td>去重</td></tr><tr><td><strong>groupByKey</strong>([<em>numTasks</em>])</td><td>按照 key 值进行分区，即在一个 (K, V) 对的 dataset 上调用时，返回一个 (K, Iterable<v>) <strong>Note:</strong> 如果分组是为了在每一个 key 上执行聚合操作（例如，sum 或 average)，此时使用 <code>reduceByKey</code> 或 <code>aggregateByKey</code> 性能会更好 <strong>Note:</strong> 默认情况下，并行度取决于父 RDD 的分区数。可以传入 <code>numTasks</code> 参数进行修改。</v></td></tr><tr><td><strong>reduceByKey</strong>(<em>func</em>, [<em>numTasks</em>])</td><td>按照 key 值进行分组，并对分组后的数据执行归约操作。</td></tr><tr><td><strong>aggregateByKey</strong>(<em>zeroValue</em>,<em>numPartitions</em>)(<em>seqOp</em>, <em>combOp</em>, [<em>numTasks</em>])</td><td>当调用（K，V）对的数据集时，返回（K，U）对的数据集，其中使用给定的组合函数和 zeroValue 聚合每个键的值。与 groupByKey 类似，reduce 任务的数量可通过第二个参数进行配置。</td></tr><tr><td><strong>sortByKey</strong>([<em>ascending</em>], [<em>numTasks</em>])</td><td>按照 key 进行排序，其中的 key 需要实现 Ordered 特质，即可比较</td></tr><tr><td><strong>join</strong>(<em>otherDataset</em>, [<em>numTasks</em>])</td><td>在一个 (K, V) 和 (K, W) 类型的 dataset 上调用时，返回一个 (K, (V, W)) pairs 的 dataset，等价于内连接操作。如果想要执行外连接，可以使用 <code>leftOuterJoin</code>, <code>rightOuterJoin</code> 和 <code>fullOuterJoin</code> 等算子。</td></tr><tr><td><strong>cogroup</strong>(<em>otherDataset</em>, [<em>numTasks</em>])</td><td>在一个 (K, V) 对的 dataset 上调用时，返回一个 (K, (Iterable<v>, Iterable<w>)) tuples 的 dataset。</w></v></td></tr><tr><td><strong>cartesian</strong>(<em>otherDataset</em>)</td><td>在一个 T 和 U 类型的 dataset 上调用时，返回一个 (T, U) 类型的 dataset（即笛卡尔积）。</td></tr><tr><td><strong>coalesce</strong>(<em>numPartitions</em>)</td><td>将 RDD 中的分区数减少为 numPartitions。</td></tr><tr><td><strong>repartition</strong>(<em>numPartitions</em>)</td><td>随机重新调整 RDD 中的数据以创建更多或更少的分区，并在它们之间进行平衡。</td></tr><tr><td><strong>repartitionAndSortWithinPartitions</strong>(<em>partitioner</em>)</td><td>根据给定的 partitioner（分区器）对 RDD 进行重新分区，并对分区中的数据按照 key 值进行排序。这比调用 <code>repartition</code> 然后再 sorting（排序）效率更高，因为它可以将排序过程推送到 shuffle 操作所在的机器。</td></tr></tbody></table><p>下面分别给出这些算子的基本使用示例：</p><h3 id="1-1-map"><a href="#1-1-map" class="headerlink" title="1.1 map"></a>1.1 map</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">sc.parallelize(list).map(_ * <span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果： 10 20 30 （这里为了节省篇幅去掉了换行,后文亦同）</span></span><br></pre></td></tr></table></figure><h3 id="1-2-filter"><a href="#1-2-filter" class="headerlink" title="1.2 filter"></a>1.2 filter</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">21</span>)</span><br><span class="line">sc.parallelize(list).filter(_ &gt;= <span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： 10 12 21</span></span><br></pre></td></tr></table></figure><h3 id="1-3-flatMap"><a href="#1-3-flatMap" class="headerlink" title="1.3 flatMap"></a>1.3 flatMap</h3><p><code>flatMap(func)</code> 与 <code>map</code> 类似，但每一个输入的 item 会被映射成 0 个或多个输出的 items（ <em>func</em> 返回类型需要为 <code>Seq</code>）。</p><p>二者的区别如图：</p><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p><img src="https://user-gold-cdn.xitu.io/2019/5/17/16ac4e2eced3f9f1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p><img src="https://user-gold-cdn.xitu.io/2019/5/17/16ac4e30a8d1f28c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val <span class="keyword">list</span> = <span class="keyword">List</span>(<span class="keyword">List</span>(1, 2), <span class="keyword">List</span>(3), <span class="keyword">List</span>(), <span class="keyword">List</span>(4, 5))</span><br><span class="line"><span class="keyword">sc</span>.parallelize(<span class="keyword">list</span>).flatMap(_.toList).map(_ * 10).<span class="keyword">foreach</span>(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果 ： 10 20 30 40 50</span></span><br></pre></td></tr></table></figure><p>flatMap 这个算子在日志分析中使用概率非常高，这里进行一下演示：拆分输入的每行数据为单个单词，并赋值为 1，代表出现一次，之后按照单词分组并统计其出现总次数，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lines = <span class="type">List</span>(<span class="string">"spark flume spark"</span>,</span><br><span class="line">                 <span class="string">"hadoop flume hive"</span>)</span><br><span class="line">sc.parallelize(lines).flatMap(line =&gt; line.split(<span class="string">" "</span>)).</span><br><span class="line">map(word=&gt;(word,<span class="number">1</span>)).reduceByKey(_+_).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hive,<span class="number">1</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(flume,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="1-4-mapPartitions"><a href="#1-4-mapPartitions" class="headerlink" title="1.4 mapPartitions"></a>1.4 mapPartitions</h3><p>与 map 类似，但函数单独在 RDD 的每个分区上运行， <em>func</em>函数的类型为 <code>Iterator&lt;T&gt; =&gt; Iterator&lt;U&gt;</code> (其中 T 是 RDD 的类型)，即输入和输出都必须是可迭代类型。</p><p>map是对rdd中的每一个元素进行操作；</p><p>mapPartitions则是对rdd中的每个分区的迭代器进行操作，优点是快，缺点是可能内存溢出（map会自动回收内存）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list, <span class="number">3</span>).mapPartitions(iterator =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">Int</span>]</span><br><span class="line">  <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">    buffer.append(iterator.next() * <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  buffer.toIterator</span><br><span class="line">&#125;).foreach(println)</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">100</span> <span class="number">200</span> <span class="number">300</span> <span class="number">400</span> <span class="number">500</span> <span class="number">600</span></span><br></pre></td></tr></table></figure><h3 id="1-5-mapPartitionsWithIndex"><a href="#1-5-mapPartitionsWithIndex" class="headerlink" title="1.5 mapPartitionsWithIndex"></a>1.5 mapPartitionsWithIndex</h3><p>与 mapPartitions 类似，但 <em>func</em> 类型为 <code>(Int, Iterator&lt;T&gt;) =&gt; Iterator&lt;U&gt;</code> ，其中第一个参数为分区索引。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list, <span class="number">3</span>).mapPartitionsWithIndex((index, iterator) =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">String</span>]</span><br><span class="line">  <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">    buffer.append(index + <span class="string">"分区:"</span> + iterator.next() * <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  buffer.toIterator</span><br><span class="line">&#125;).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整输出</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">DAGScheduler</span>: <span class="type">Submitting</span> <span class="number">3</span> missing tasks from <span class="type">ResultStage</span> <span class="number">0</span> (<span class="type">MapPartitionsRDD</span>[<span class="number">1</span>] at mapPartitionsWithIndex at <span class="type">App</span>.scala:<span class="number">15</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">TaskSchedulerImpl</span>: <span class="type">Adding</span> task set <span class="number">0.0</span> <span class="keyword">with</span> <span class="number">3</span> tasks</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Starting</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>, localhost, partition <span class="number">0</span>, <span class="type">PROCESS_LOCAL</span>, <span class="number">5321</span> bytes)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Running</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span>分区:<span class="number">100</span></span><br><span class="line"><span class="number">0</span>分区:<span class="number">200</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Finished</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>). <span class="number">843</span> bytes result sent to driver</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Starting</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>, localhost, partition <span class="number">1</span>, <span class="type">PROCESS_LOCAL</span>, <span class="number">5321</span> bytes)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Running</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Finished</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>) in <span class="number">140</span> ms on localhost (<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Finished</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>). <span class="number">756</span> bytes result sent to driver</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Starting</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>, localhost, partition <span class="number">2</span>, <span class="type">PROCESS_LOCAL</span>, <span class="number">5321</span> bytes)</span><br><span class="line"><span class="number">1</span>分区:<span class="number">300</span></span><br><span class="line"><span class="number">1</span>分区:<span class="number">400</span></span><br><span class="line"><span class="number">2</span>分区:<span class="number">500</span></span><br><span class="line"><span class="number">2</span>分区:<span class="number">600</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Running</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Finished</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>). <span class="number">756</span> bytes result sent to driver</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Finished</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>) in <span class="number">26</span> ms on localhost (<span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Finished</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>) in <span class="number">20</span> ms on localhost (<span class="number">3</span>/<span class="number">3</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">DAGScheduler</span>: <span class="type">ResultStage</span> <span class="number">0</span> (foreach at <span class="type">App</span>.scala:<span class="number">21</span>) finished in <span class="number">0.196</span> s</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSchedulerImpl</span>: <span class="type">Removed</span> <span class="type">TaskSet</span> <span class="number">0.0</span>, whose tasks have all completed, from pool </span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">DAGScheduler</span>: <span class="type">Job</span> <span class="number">0</span> finished: foreach at <span class="type">App</span>.scala:<span class="number">21</span>, took <span class="number">0.427307</span> s</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">SparkContext</span>: <span class="type">Invoking</span> stop() from shutdown hook</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">SparkUI</span>: <span class="type">Stopped</span> <span class="type">Spark</span> web <span class="type">UI</span> at http:<span class="comment">//192.168.15.16:4040</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">MapOutputTrackerMasterEndpoint</span>: <span class="type">MapOutputTrackerMasterEndpoint</span> stopped!</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">MemoryStore</span>: <span class="type">MemoryStore</span> cleared</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">BlockManager</span>: <span class="type">BlockManager</span> stopped</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">BlockManagerMaster</span>: <span class="type">BlockManagerMaster</span> stopped</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">OutputCommitCoordinator</span>$<span class="type">OutputCommitCoordinatorEndpoint</span>: <span class="type">OutputCommitCoordinator</span> stopped!</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">SparkContext</span>: <span class="type">Successfully</span> stopped <span class="type">SparkContext</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">ShutdownHookManager</span>: <span class="type">Shutdown</span> hook called</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">ShutdownHookManager</span>: <span class="type">Deleting</span> directory <span class="type">C</span>:\<span class="type">Users</span>\<span class="type">Administrator</span>\<span class="type">AppData</span>\<span class="type">Local</span>\<span class="type">Temp</span>\spark<span class="number">-651</span>a1d82-f2c2<span class="number">-4</span>d0e<span class="number">-92</span>de-e838cef3ad3c</span><br></pre></td></tr></table></figure><h3 id="1-6-sample"><a href="#1-6-sample" class="headerlink" title="1.6 sample"></a>1.6 sample</h3><p>数据采样。有三个可选参数：设置是否放回 (withReplacement)、采样的百分比 (fraction)、随机数生成器的种子 (seed) 。</p><p>其中<code>fraction</code>参数在<code>withReplacement</code>不同时的含义不同：</p><ul><li>当<code>withReplacement=false</code>时：表示每个元素被抽到的概率，分数一定是[0,1] ；</li><li>当<code>withReplacement=true</code>时：表示选择每个元素的期望次数，分数必须大于等于0。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list).sample(withReplacement = <span class="literal">false</span>, fraction = <span class="number">0.5</span>).foreach(println)</span><br><span class="line"><span class="comment">// 输出：2 4 5 6</span></span><br></pre></td></tr></table></figure><h3 id="1-7-union"><a href="#1-7-union" class="headerlink" title="1.7 union"></a>1.7 union</h3><p>合并两个 RDD：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val list1 = List(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">val list2 = List(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list1).union(sc.parallelize(list2)).foreach(println)</span><br><span class="line"><span class="comment">// 输出: 1 2 3 4 5 6</span></span><br></pre></td></tr></table></figure><h3 id="1-8-intersection"><a href="#1-8-intersection" class="headerlink" title="1.8 intersection"></a>1.8 intersection</h3><p>求两个 RDD 的交集：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val list1 = List(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">val list2 = List(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list1).intersection(sc.parallelize(list2)).foreach(println)</span><br><span class="line"><span class="comment">// 输出:  4 5</span></span><br></pre></td></tr></table></figure><h3 id="1-9-distinct"><a href="#1-9-distinct" class="headerlink" title="1.9 distinct"></a>1.9 distinct</h3><p>去重：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val <span class="type">list</span> = List(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">sc.parallelize(<span class="type">list</span>).distinct().foreach(println)</span><br><span class="line"><span class="comment">// 输出: 4 1 2</span></span><br></pre></td></tr></table></figure><h3 id="1-10-groupByKey"><a href="#1-10-groupByKey" class="headerlink" title="1.10 groupByKey"></a>1.10 groupByKey</h3><p>按照键进行分组：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">2</span>), (<span class="string">"spark"</span>, <span class="number">3</span>), (<span class="string">"spark"</span>, <span class="number">5</span>), (<span class="string">"storm"</span>, <span class="number">6</span>), (<span class="string">"hadoop"</span>, <span class="number">2</span>))</span><br><span class="line">sc.parallelize(list).groupByKey().map(x =&gt; (x._1, x._2.toList)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">(spark,<span class="type">List</span>(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">(hadoop,<span class="type">List</span>(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">(storm,<span class="type">List</span>(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>注：<code>groupByKey</code>返回类型为<code>CompactBuffer</code>（<code>ArrayBuffer</code>的替代选择，占用内存更少），直接打印结果如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sc.parallelize(list).groupByKey.foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">(spark,<span class="type">CompactBuffer</span>(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">(hadoop,<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">(storm,<span class="type">CompactBuffer</span>(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h3 id="1-11-reduceByKey"><a href="#1-11-reduceByKey" class="headerlink" title="1.11 reduceByKey"></a>1.11 reduceByKey</h3><p>按照键进行归约操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">2</span>), (<span class="string">"spark"</span>, <span class="number">3</span>), (<span class="string">"spark"</span>, <span class="number">5</span>), (<span class="string">"storm"</span>, <span class="number">6</span>), (<span class="string">"hadoop"</span>, <span class="number">2</span>))</span><br><span class="line">sc.parallelize(list).reduceByKey(_ + _).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">(spark,<span class="number">8</span>)</span><br><span class="line">(hadoop,<span class="number">4</span>)</span><br><span class="line">(storm,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>经典WordCount算子。</p><h3 id="1-12-sortBy-amp-sortByKey"><a href="#1-12-sortBy-amp-sortByKey" class="headerlink" title="1.12 sortBy &amp; sortByKey"></a>1.12 sortBy &amp; sortByKey</h3><p>按照键（100、）进行排序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>((<span class="number">100</span>, <span class="string">"hadoop"</span>), (<span class="number">90</span>, <span class="string">"spark"</span>), (<span class="number">120</span>, <span class="string">"storm"</span>))</span><br><span class="line">sc.parallelize(list01).sortByKey(ascending = <span class="literal">false</span>).foreach(println)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">(<span class="number">120</span>,storm)</span><br><span class="line">(<span class="number">100</span>,hadoop)</span><br><span class="line">(<span class="number">90</span>,spark)</span><br></pre></td></tr></table></figure><p>按照指定元素进行排序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list02 = <span class="type">List</span>((<span class="string">"hadoop"</span>,<span class="number">100</span>), (<span class="string">"spark"</span>,<span class="number">90</span>), (<span class="string">"storm"</span>,<span class="number">120</span>))</span><br><span class="line">sc.parallelize(list02).sortBy(x=&gt;x._2,ascending=<span class="literal">false</span>).foreach(println)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">(storm,<span class="number">120</span>)</span><br><span class="line">(hadoop,<span class="number">100</span>)</span><br><span class="line">(spark,<span class="number">90</span>)</span><br></pre></td></tr></table></figure><h3 id="1-13-join"><a href="#1-13-join" class="headerlink" title="1.13 join"></a>1.13 join</h3><p>在一个 (K, V) 和 (K, W) 类型的 Dataset 上调用时，返回一个 (K, (V, W)) 的 Dataset，等价于内连接操作。如果想要执行外连接，可以使用 <code>leftOuterJoin</code>, <code>rightOuterJoin</code> 和 <code>fullOuterJoin</code> 等算子。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"student01"</span>), (<span class="number">2</span>, <span class="string">"student02"</span>), (<span class="number">3</span>, <span class="string">"student03"</span>))</span><br><span class="line"><span class="keyword">val</span> list02 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"teacher01"</span>), (<span class="number">2</span>, <span class="string">"teacher02"</span>), (<span class="number">3</span>, <span class="string">"teacher03"</span>))</span><br><span class="line">sc.parallelize(list01).join(sc.parallelize(list02)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">(<span class="number">1</span>,(student01,teacher01))</span><br><span class="line">(<span class="number">3</span>,(student03,teacher03))</span><br><span class="line">(<span class="number">2</span>,(student02,teacher02))</span><br></pre></td></tr></table></figure><h3 id="1-14-cogroup"><a href="#1-14-cogroup" class="headerlink" title="1.14 cogroup"></a>1.14 cogroup</h3><p>在一个 (K, V) 对的 Dataset 上调用时，返回多个类型为 (K, (Iterable<v>, Iterable<w>)) 的元组所组成的 Dataset。</w></v></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"a"</span>),(<span class="number">1</span>, <span class="string">"a"</span>), (<span class="number">2</span>, <span class="string">"b"</span>), (<span class="number">3</span>, <span class="string">"e"</span>))</span><br><span class="line"><span class="keyword">val</span> list02 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"A"</span>), (<span class="number">2</span>, <span class="string">"B"</span>), (<span class="number">3</span>, <span class="string">"E"</span>))</span><br><span class="line"><span class="keyword">val</span> list03 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"[ab]"</span>), (<span class="number">2</span>, <span class="string">"[bB]"</span>), (<span class="number">3</span>, <span class="string">"eE"</span>),(<span class="number">3</span>, <span class="string">"eE"</span>))</span><br><span class="line">sc.parallelize(list01).cogroup(sc.parallelize(list02),sc.parallelize(list03)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： 同一个 RDD 中的元素先按照 key 进行分组，然后再对不同 RDD 中的元素按照 key 进行分组</span></span><br><span class="line">(<span class="number">1</span>,(<span class="type">CompactBuffer</span>(a, a),<span class="type">CompactBuffer</span>(<span class="type">A</span>),<span class="type">CompactBuffer</span>([ab])))</span><br><span class="line">(<span class="number">3</span>,(<span class="type">CompactBuffer</span>(e),<span class="type">CompactBuffer</span>(<span class="type">E</span>),<span class="type">CompactBuffer</span>(eE, eE)))</span><br><span class="line">(<span class="number">2</span>,(<span class="type">CompactBuffer</span>(b),<span class="type">CompactBuffer</span>(<span class="type">B</span>),<span class="type">CompactBuffer</span>([bB])))</span><br></pre></td></tr></table></figure><h3 id="1-15-cartesian"><a href="#1-15-cartesian" class="headerlink" title="1.15 cartesian"></a>1.15 cartesian</h3><p>计算笛卡尔积：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">sc.parallelize(list1).cartesian(sc.parallelize(list2)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出笛卡尔积</span></span><br><span class="line">(<span class="type">A</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="type">A</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="type">A</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="type">B</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="type">B</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="type">B</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="type">C</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="type">C</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="type">C</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="1-16-aggregateByKey"><a href="#1-16-aggregateByKey" class="headerlink" title="1.16 aggregateByKey"></a>1.16 aggregateByKey</h3><p>当调用（K，V）对的数据集时，返回（K，U）对的数据集，其中使用给定的组合函数和 zeroValue 聚合每个键的值。与 <code>groupByKey</code> 类似，reduce 任务的数量可通过第二个参数 <code>numPartitions</code> 进行配置。示例如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了清晰，以下所有参数均使用具名传参</span></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">3</span>), (<span class="string">"hadoop"</span>, <span class="number">2</span>), (<span class="string">"spark"</span>, <span class="number">4</span>), (<span class="string">"spark"</span>, <span class="number">3</span>), (<span class="string">"storm"</span>, <span class="number">6</span>), (<span class="string">"storm"</span>, <span class="number">8</span>))</span><br><span class="line">sc.parallelize(list,numSlices = <span class="number">2</span>).aggregateByKey(zeroValue = <span class="number">0</span>,numPartitions = <span class="number">3</span>)(</span><br><span class="line">      seqOp = math.max(_, _),</span><br><span class="line">      combOp = _ + _</span><br><span class="line">    ).collect.foreach(println)</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">(hadoop,<span class="number">3</span>)</span><br><span class="line">(storm,<span class="number">8</span>)</span><br><span class="line">(spark,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>这里使用了 <code>numSlices = 2</code> 指定 aggregateByKey 父操作 parallelize 的分区数量为 2，其执行流程如下：</p><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/pictures/spark-aggregateByKey.png" target="_blank" rel="noopener"><img src="https://github.com/wangzhiwubigdata/God-Of-BigData/raw/master/pictures/spark-aggregateByKey.png" alt="img"></a></p><p>基于同样的执行流程，如果 <code>numSlices = 1</code>，则意味着只有输入一个分区，则其最后一步 combOp 相当于是无效的，执行结果为：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">hadoop</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="name">storm</span>,<span class="number">8</span>)</span><br><span class="line">(<span class="name">spark</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>同样的，如果每个单词对一个分区，即 <code>numSlices = 6</code>，此时相当于求和操作，执行结果为：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">hadoop</span>,<span class="number">5</span>)</span><br><span class="line">(<span class="name">storm</span>,<span class="number">14</span>)</span><br><span class="line">(<span class="name">spark</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><code>aggregateByKey(zeroValue = 0,numPartitions = 3)</code> 的第二个参数 <code>numPartitions</code> 决定的是输出 RDD 的分区数量，想要验证这个问题，可以对上面代码进行改写，使用 <code>getNumPartitions</code> 方法获取分区数量：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc.parallelize(list,numSlices = <span class="number">6</span>).aggregateByKey(zeroValue = <span class="number">0</span>,numPartitions = <span class="number">3</span>)(</span><br><span class="line">  seqOp = math.max(_, _),</span><br><span class="line">  combOp = _ + _</span><br><span class="line">).getNumPartitions</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/pictures/spark-getpartnum.png" target="_blank" rel="noopener"><img src="https://github.com/wangzhiwubigdata/God-Of-BigData/raw/master/pictures/spark-getpartnum.png" alt="img"></a></p><h2 id="二、Action"><a href="#二、Action" class="headerlink" title="二、Action"></a>二、Action</h2><p>Spark 常用的 Action 算子如下：</p><table><thead><tr><th>Action（动作）</th><th>Meaning（含义）</th></tr></thead><tbody><tr><td><strong>reduce</strong>(<em>func</em>)</td><td>使用函数<em>func</em>执行归约操作</td></tr><tr><td><strong>collect</strong>()</td><td>以一个 array 数组的形式返回 dataset 的所有元素，适用于小结果集。</td></tr><tr><td><strong>count</strong>()</td><td>返回 dataset 中元素的个数。</td></tr><tr><td><strong>first</strong>()</td><td>返回 dataset 中的第一个元素，等价于 take(1)。</td></tr><tr><td><strong>take</strong>(<em>n</em>)</td><td>将数据集中的前 <em>n</em> 个元素作为一个 array 数组返回。</td></tr><tr><td><strong>takeSample</strong>(<em>withReplacement</em>, <em>num</em>, [<em>seed</em>])</td><td>对一个 dataset 进行随机抽样</td></tr><tr><td><strong>takeOrdered</strong>(<em>n</em>, <em>[ordering]</em>)</td><td>按自然顺序（natural order）或自定义比较器（custom comparator）排序后返回前 <em>n</em> 个元素。只适用于小结果集，因为所有数据都会被加载到驱动程序的内存中进行排序。</td></tr><tr><td><strong>saveAsTextFile</strong>(<em>path</em>)</td><td>将 dataset 中的元素以文本文件的形式写入本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。Spark 将对每个元素调用 toString 方法，将元素转换为文本文件中的一行记录。</td></tr><tr><td><strong>saveAsSequenceFile</strong>(<em>path</em>)</td><td>将 dataset 中的元素以 Hadoop SequenceFile 的形式写入到本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。该操作要求 RDD 中的元素需要实现 Hadoop 的 Writable 接口。对于 Scala 语言而言，它可以将 Spark 中的基本数据类型自动隐式转换为对应 Writable 类型。(目前仅支持 Java and Scala)</td></tr><tr><td><strong>saveAsObjectFile</strong>(<em>path</em>)</td><td>使用 Java 序列化后存储，可以使用 <code>SparkContext.objectFile()</code> 进行加载。(目前仅支持 Java and Scala)</td></tr><tr><td><strong>countByKey</strong>()</td><td>计算每个键出现的次数。</td></tr><tr><td><strong>foreach</strong>(<em>func</em>)</td><td>遍历 RDD 中每个元素，并对其执行<em>fun</em>函数</td></tr></tbody></table><h3 id="2-1-reduce"><a href="#2-1-reduce" class="headerlink" title="2.1 reduce"></a>2.1 reduce</h3><p>使用函数<em>func</em>执行归约操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">sc.parallelize(list).reduce((x, y) =&gt; x + y)</span><br><span class="line">sc.parallelize(list).reduce(_ + _)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><h3 id="2-2-takeOrdered"><a href="#2-2-takeOrdered" class="headerlink" title="2.2 takeOrdered"></a>2.2 takeOrdered</h3><p>按自然顺序（natural order）或自定义比较器（custom comparator）排序后返回前 <em>n</em> 个元素。需要注意的是 <code>takeOrdered</code> 使用隐式参数进行隐式转换，以下为其源码。所以在使用自定义排序时，需要继承 <code>Ordering[T]</code> 实现自定义比较器，然后将其作为隐式参数引入。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeOrdered</span></span>(num: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>]): <span class="type">Array</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  .........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义规则排序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承 Ordering[T],实现自定义比较器，按照 value 值的长度进行排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span>[(<span class="type">Int</span>, <span class="type">String</span>)] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(x: (<span class="type">Int</span>, <span class="type">String</span>), y: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">Int</span></span><br><span class="line">    = <span class="keyword">if</span> (x._2.length &gt; y._2.length) <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"hadoop"</span>), (<span class="number">1</span>, <span class="string">"storm"</span>), (<span class="number">1</span>, <span class="string">"azkaban"</span>), (<span class="number">1</span>, <span class="string">"hive"</span>))</span><br><span class="line"><span class="comment">//  引入隐式默认值</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> implicitOrdering = <span class="keyword">new</span> <span class="type">CustomOrdering</span></span><br><span class="line">sc.parallelize(list).takeOrdered(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： Array((1,hive), (1,storm), (1,hadoop), (1,azkaban)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-countByKey"><a href="#2-3-countByKey" class="headerlink" title="2.3 countByKey"></a>2.3 countByKey</h3><p>计算每个键出现的次数：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"azkaban"</span>, <span class="number">1</span>))</span><br><span class="line">sc.parallelize(list).countByKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： Map(hadoop -&gt; 2, storm -&gt; 2, azkaban -&gt; 1)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-saveAsTextFile"><a href="#2-4-saveAsTextFile" class="headerlink" title="2.4 saveAsTextFile"></a>2.4 saveAsTextFile</h3><p>将 dataset 中的元素以文本文件的形式写入本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。Spark 将对每个元素调用 toString 方法，将元素转换为文本文件中的一行记录。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"azkaban"</span>, <span class="number">1</span>))</span><br><span class="line">sc.parallelize(list).saveAsTextFile(<span class="string">"/usr/file/temp"</span>)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-programming-guide" target="_blank" rel="noopener">RDD Programming Guide</a></p><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/大数据框架学习/Spark_Transformation和Action算子.md" target="_blank" rel="noopener">RDD 常用算子详解</a></p><p><a href="https://www.cnblogs.com/qingyunzong/p/8899715.html" target="_blank" rel="noopener">Spark学习之路（三）Spark之RDD - 扎心了，老铁- 博客园</a></p><p><a href="https://juejin.im/post/6844903846066520071" target="_blank" rel="noopener">到处是map、flatMap，啥意思？ - 掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-617 Merge Two Binary Trees Python3实现(先序遍历递归，合并二叉树)</title>
      <link href="2020-leetcode-617.html"/>
      <url>2020-leetcode-617.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given two binary trees and imagine that when you put one of them to cover the </span></span><br><span class="line"><span class="comment"># other, some nodes of the two trees are overlapped while the others are not. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  You need to merge them into a new binary tree. The merge rule is that if two </span></span><br><span class="line"><span class="comment"># nodes overlap, then sum node values up as the new value of the merged node. Othe</span></span><br><span class="line"><span class="comment"># rwise, the NOT null node will be used as the node of new tree. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: </span></span><br><span class="line"><span class="comment"># Tree 1                     Tree 2                  </span></span><br><span class="line"><span class="comment">#           1                         2                             </span></span><br><span class="line"><span class="comment">#          / \                       / \                            </span></span><br><span class="line"><span class="comment">#         3   2                     1   3                        </span></span><br><span class="line"><span class="comment">#        /                           \   \                      </span></span><br><span class="line"><span class="comment">#       5                             4   7                  </span></span><br><span class="line"><span class="comment"># Output: </span></span><br><span class="line"><span class="comment"># Merged tree:</span></span><br><span class="line"><span class="comment">#      3</span></span><br><span class="line"><span class="comment">#     / \</span></span><br><span class="line"><span class="comment">#    4   5</span></span><br><span class="line"><span class="comment">#   / \   \ </span></span><br><span class="line"><span class="comment">#  5   4   7</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  <span class="doctag">Note:</span> The merging process must start from the root nodes of both trees. </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 486 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1: TreeNode, t2: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 如果某棵树的当前节点为空则返回另一棵树的当前节点；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> t1): <span class="keyword">return</span> t2</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> t2): <span class="keyword">return</span> t1</span><br><span class="line">        <span class="comment"># 将t2合并到t1上</span></span><br><span class="line">        t1.val += t2.val</span><br><span class="line">        <span class="comment"># 递归处理当前节点的左、右子树</span></span><br><span class="line">        t1.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">        t1.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"><span class="comment"># test case</span></span><br><span class="line">t1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">t2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">t1.left = TreeNode(<span class="number">3</span>)</span><br><span class="line">t2.right = TreeNode(<span class="number">4</span>)</span><br><span class="line">t2.right.left = TreeNode(<span class="number">5</span>)</span><br><span class="line">t2.right.right = TreeNode(<span class="number">6</span>)</span><br><span class="line">s = Solution()</span><br><span class="line">t = s.mergeTrees(t1, t2)</span><br><span class="line">print(t.val, t.left.val, t.right.val)</span><br></pre></td></tr></table></figure><p>第一反应是用两个队列同步bfs，写了一半放弃了…因为对Python3语法太不熟练了，需要补一补先。</p><p>参考官方题解，使用先序遍历（中-左-右），最终返回t1即可。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-968 Binary Tree Cameras Python3实现(动态规划，分状态递归，hard，学习官方题解)</title>
      <link href="2020-leetcode-968.html"/>
      <url>2020-leetcode-968.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary tree, we install cameras on the nodes of the tree. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Each camera at a node can monitor its parent, itself, and its immediate child</span></span><br><span class="line"><span class="comment"># ren. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Calculate the minimum number of cameras needed to monitor all nodes of the tr</span></span><br><span class="line"><span class="comment"># ee. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: [0,0,null,0,0]</span></span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line"><span class="comment"># Explanation: One camera is enough to monitor all nodes if placed as shown.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Example 2: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: [0,0,null,0,null,0,null,null,0]</span></span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line"><span class="comment"># Explanation: At least two cameras are needed to monitor all nodes of the tree.</span></span><br><span class="line"><span class="comment">#  The above image shows one of the valid configurations of camera placement.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The number of nodes in the given tree will be in the range [1, 1000]. </span></span><br><span class="line"><span class="comment">#  Every node has value 0. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 树 深度优先搜索 动态规划 </span></span><br><span class="line"><span class="comment">#  👍 171 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方题解…</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minCameraCover</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                 <span class="keyword">return</span> [float(<span class="string">"inf"</span>), <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">             la, lb, lc = dfs(root.left)</span><br><span class="line">             ra, rb, rc = dfs(root.right)</span><br><span class="line">             a = lc + rc + <span class="number">1</span></span><br><span class="line">             b = min(a, la + rb, ra + lb)</span><br><span class="line">             c = min(a, lb + rb)</span><br><span class="line">             <span class="keyword">return</span> [a, b, c]</span><br><span class="line">         a, b, c = dfs(root)</span><br><span class="line">         <span class="keyword">return</span> b</span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>dfs返回三个值：</p><p>a：root放置摄像头，覆盖整棵树需要的最少摄像头数量</p><p>b：覆盖整棵树需要的最少摄像头数量</p><p>c：覆盖左右子树需要的最少摄像头数量</p><p>根据定义可得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root放1个，那么root.left 和 root.right都不需要了，只需把root.left的左右子树和root.right的左右子树覆盖掉就ok了。</span></span><br><span class="line"><span class="comment"># 总数 = root.left的俩子树需要的数量 + root.right的俩子树需要的数量 + root上的1个</span></span><br><span class="line">a = lc + rc + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3种情况取最小</span></span><br><span class="line"><span class="comment"># a：root放1个时</span></span><br><span class="line"><span class="comment"># la + rb: root不放时，root.left放1个 + root.right所需的最小数量 </span></span><br><span class="line"><span class="comment"># ra + lb: root不放时，root.right放1个 + root.left所需的最小数量 </span></span><br><span class="line">b = min(a, la + rb, ra + lb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2种情况取最小</span></span><br><span class="line"><span class="comment"># a: root放1个时，</span></span><br><span class="line"><span class="comment"># lb + rb: root不放时，覆盖左子树需要的数量 +覆盖右子树需要的数量</span></span><br><span class="line">c = min(a, lb + rb)</span><br></pre></td></tr></table></figure><p>通过dfs递归，自下而上得出root的a、b、c，其中b即为所求。</p><hr><p>该题目还有贪心解法，待学习。</p><p><a href="https://leetcode-cn.com/problems/binary-tree-cameras/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-cameras/</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-538 把二叉搜索树转换为累加树 Python3实现（dfs）</title>
      <link href="2020-leetcode-538.html"/>
      <url>2020-leetcode-538.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节</span></span><br><span class="line"><span class="comment"># 点值之和。 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  例如： </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  输入: 原始二叉搜索树:</span></span><br><span class="line"><span class="comment">#               5</span></span><br><span class="line"><span class="comment">#             /   \</span></span><br><span class="line"><span class="comment">#            2     13</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 输出: 转换为累加树:</span></span><br><span class="line"><span class="comment">#              18</span></span><br><span class="line"><span class="comment">#             /   \</span></span><br><span class="line"><span class="comment">#           20     13</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  注意：本题和 1038: https://leetcode-cn.com/problems/binary-search-tree-to-greater-s</span></span><br><span class="line"><span class="comment"># um-tree/ 相同 </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 368 👎 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> sum;</span><br><span class="line">            <span class="keyword">if</span> node.right: dfs(node.right)</span><br><span class="line">            node.val += sum</span><br><span class="line">            sum = node.val</span><br><span class="line">            <span class="keyword">if</span> node.left: dfs(node.left)</span><br><span class="line">        <span class="keyword">if</span> root: dfs(root)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>开始刷LeetCode每日一题，这是第一道。</p><p>准备放弃C艹拥抱Python，以后就用Python3刷题，顺便学语法。</p><p>这个题目倒是不难：</p><p>按照<strong>“右-中-左”</strong>的顺序中序遍历，用<code>sum</code>记录到达当前节点时已有的累加值，加到这个节点上，更新<code>sum</code>即可。</p><p>注意下<code>nonlocal</code>的用法，它是Python3.2之后引入的一个关键字，简单来说：</p><p><code>nonlocal</code>使用在闭包中，能使内部变量操纵外层的同名变量</p><p>详见：</p><p><a href="https://www.w3schools.com/python/ref_keyword_nonlocal.asp" target="_blank" rel="noopener">Python nonlocal Keyword</a></p><p><a href="https://zhuanlan.zhihu.com/p/41030153" target="_blank" rel="noopener">Python中global和nonlocal区别</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我回来了</title>
      <link href="2020-return-to-blog.html"/>
      <url>2020-return-to-blog.html</url>
      
        <content type="html"><![CDATA[<p>距离上次发表个人博客，差不2年了。那是离开涿州的前夕，命运在那时发生了巨变。</p><p>这两年来尝到了“钱多事少离家近”的安逸，也尝到了失去一切的落差；得到了梦寐以求的自由，也体会到了自由的代价。</p><p>但无论如何，我去到了理想的城市，开始从事理想的工作，还好一切都来得及。</p><p>写博客对于学习积累至关重要，有个个人主页方能彰显程序员的逼格，于是又拾起了荒废已久的gitpage。</p><p>不出所料，遇到一堆神奇的bug，足足花了约5个小时才成功解决。下面记录一下回归历程。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>大道至简，选择了<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a>主题。直接git clone到theme文件夹，更改<code>_config</code>文件即可，本地预览效果良好。</p><p>相比CSDN、简书等博客站点的优点有：</p><ol><li>无广告</li><li>可定制</li><li>有一个search框，方便检索文章</li></ol><p>本地<code>hexo g</code>生成，<code>hexo s</code>开启本地服务查看，效果不错。</p><h2 id="部署到GitPage报错的Bug解决之路"><a href="#部署到GitPage报错的Bug解决之路" class="headerlink" title="部署到GitPage报错的Bug解决之路"></a>部署到GitPage报错的Bug解决之路</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>hexo源文件仓库名：<code>gitpage</code></p><p>gitpage主页仓库名：<code>zhang35.github.io</code></p><h3 id="部署到git的Bug"><a href="#部署到git的Bug" class="headerlink" title="部署到git的Bug"></a>部署到git的Bug</h3><p>本地网页预览的好好的，执行<code>hexo d</code>部署到git上后，发现gitpage直接刷不出来了，很快就收到了Github的邮件报错：</p><p>第一个：</p><h4 id="You-are-attempting-to-use-a-Jekyll-theme-“maupassant”-which-is-not-supported-by-GitHub-Pages"><a href="#You-are-attempting-to-use-a-Jekyll-theme-“maupassant”-which-is-not-supported-by-GitHub-Pages" class="headerlink" title="You are attempting to use a Jekyll theme, “maupassant”, which is not supported by GitHub Pages"></a>You are attempting to use a Jekyll theme, “maupassant”, which is not supported by GitHub Pages</h4><p>主题问题？</p><p>网上查到的解决方法：手动修改了<code>github.io</code>仓库里<code>_config</code>，去掉theme:maupassant`一行；</p><p>然后迎来第二个报错：</p><h4 id="The-value-‘-’-was-passed-to-a-date-related-filter-that-expects-valid-dates-in-layouts-default-html-or-one-of-its-layouts-For-more-information-see-https-docs-github-com-github-working-with-github-pages-troubleshooting-jekyll-build-errors-for-github-pages-sites-date-is-not-a-valid-datetime"><a href="#The-value-‘-’-was-passed-to-a-date-related-filter-that-expects-valid-dates-in-layouts-default-html-or-one-of-its-layouts-For-more-information-see-https-docs-github-com-github-working-with-github-pages-troubleshooting-jekyll-build-errors-for-github-pages-sites-date-is-not-a-valid-datetime" class="headerlink" title="The value ‘{}’ was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. For more information, see https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime."></a>The value ‘{}’ was passed to a date-related filter that expects valid dates in <code>/_layouts/default.html</code> or one of its layouts. For more information, see <a href="https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime" target="_blank" rel="noopener">https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime</a>.</h4><p>解决方法：</p><p>网上查到的解决方法：没有用jekyll时，在<code>github.io</code>仓库根目录建立名为<code>.nojekyll</code>的空文件，以跳过jekyll检查。</p><p>然后没有报错了，取而代之的是：</p><h4 id="404-not-found：找不到index-html"><a href="#404-not-found：找不到index-html" class="headerlink" title="404 not found：找不到index.html"></a>404 not found：找不到index.html</h4><p>查看了<code>github.io</code>仓库，发现的确没有index.html，里面存的是<code>gitpage</code>仓库的源文件，而不是生成的html页面。</p><p>找遍了网上答案，无果。</p><p>直到尝试直接把hexo生成的public文件夹的内容手工上传到github.io，发现是可以访问的！</p><p>那么问题就出在hexo的deploy了。</p><p>直接谷歌hexo deploy，在hexo官网上找到了答案：</p><p><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">hexo gitpage 部署</a></p><p>写的很清楚：</p><ol><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>.</p></li><li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:  <span class="built_in">type</span>: git  repo: http<span class="variable">s:</span>//github.<span class="keyword">com</span>/<span class="symbol">&lt;username&gt;</span>/<span class="symbol">&lt;project&gt;</span>  # example, http<span class="variable">s:</span>//github.<span class="keyword">com</span>/hexojs/hexojs.github.io  branch: gh-pages</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p></li><li><p>查看 <em>username</em>.github.io 上的网页是否部署成功。</p></li></ol><p>对比自己的<code>_config</code>文件，发现语法格式貌似不大对，以前的写法可能过时了。</p><p>于是将<code>deploy</code>标签内的<code>repository</code>改成了<code>repo</code>，<code>branch</code>另起一行，修改如下：</p><p>重新hexo g -d，成功向Github上传了生成的html文件，gitpage终于正常了！！！</p><p>经验教训是：<strong>多看官方文档，注意版本变化</strong>。</p><h2 id="Typora编辑器"><a href="#Typora编辑器" class="headerlink" title="Typora编辑器"></a>Typora编辑器</h2><p>为了更好地写博客，找到了能方便插图的Markdown编辑器——Typora，支持CTRL+V将图片粘贴为Markdown格式。</p><p>首先在设置中勾上“优先使用相对路径”：</p><p>在Hexo根目录_config.yml中启用<code>post_asset_folder: true</code>选项，以便执行<code>hexo new</code>能自动为文章创建同名文件夹，用来存放图片等：</p><p>在Typora中粘贴图片后选择“复制图片到”文章同名文件夹中，使用如下相对路径：xxx/yyy.png</p><p>再使用<a href="https://github.com/cocowool/hexo-image-link" target="_blank" rel="noopener">hexo-image-link</a>，可以在执行<code>hexo g</code>时，将Markdown语法的图片路径转换为<code>asset_img</code>的方式，使图片能够在使用typora编辑和hexo预览发布时都能正常显示。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>按上面步骤编辑好新的带有图片的Markdown文章后，执行<code>hexo g</code>生成；</p><p>执行<code>hexo s</code>打开本地服务器预览；</p><p>能看到以下提示：</p><p>以后每当新插入图片，保存编辑时，也能看到打印如上图信息，预览网站也会实时变化。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>开始重新更新个人博客，每周至少一篇，看能坚持多久。</p>]]></content>
      
      
      <categories>
          
          <category> hexo个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitpage </tag>
            
            <tag> maupassant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freecodecamp 刷题记录——前端基础算法</title>
      <link href="2018-Freecodecamp-Basic-Front-End-Algorithm.html"/>
      <url>2018-Freecodecamp-Basic-Front-End-Algorithm.html</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-Front-End-Development-Projects"><a href="#Basic-Front-End-Development-Projects" class="headerlink" title="Basic Front End Development Projects"></a><a href="https://www.freecodecamp.cn/map-aside#nested-collapseBasicFrontEndDevelopmentProjects" target="_blank" rel="noopener">Basic Front End Development Projects</a></h2><h3 id="Reverse-a-String"><a href="#Reverse-a-String" class="headerlink" title="Reverse a String"></a>Reverse a String</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span><span class="params">(str)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">array</span> = str.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">array</span>.reverse();</span><br><span class="line">  console.log(<span class="keyword">array</span>);</span><br><span class="line">  str = <span class="keyword">array</span>.join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reverseString(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><h3 id="Factorialize-a-Number"><a href="#Factorialize-a-Number" class="headerlink" title="Factorialize a Number"></a>Factorialize a Number</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function factorialize(<span class="built_in">num</span>) &#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">num</span> === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="built_in">num</span><span class="number">-1</span>; i&gt;<span class="number">1</span>; i--)&#123;</span><br><span class="line">     <span class="built_in">num</span> = <span class="built_in">num</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorialize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="Check-for-Palindromes"><a href="#Check-for-Palindromes" class="headerlink" title="Check for Palindromes"></a>Check for Palindromes</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function palindrome(<span class="built_in">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="built_in">str</span> = <span class="built_in">str</span>.toLowerCase();</span><br><span class="line">  <span class="built_in">str</span> = <span class="built_in">str</span>.replace(/[\W\s_]/g,<span class="string">''</span>);</span><br><span class="line">  </span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">str</span>);</span><br><span class="line">  </span><br><span class="line">  n = <span class="built_in">str</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n/<span class="number">2</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span>[i] != <span class="built_in">str</span>[n-i<span class="number">-1</span>])&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">palindrome(<span class="string">"eye"</span>);</span><br></pre></td></tr></table></figure><h3 id="Find-the-Longest-Word-in-a-String"><a href="#Find-the-Longest-Word-in-a-String" class="headerlink" title="Find the Longest Word in a String"></a>Find the Longest Word in a String</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span><span class="params">(str)</span> &#123;</span></span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  var array = str.split(<span class="string">' '</span>);</span><br><span class="line">  var <span class="built_in">length</span> = <span class="number">0</span>;</span><br><span class="line">  array.forEach(<span class="function"><span class="keyword">function</span><span class="params">(word)</span>&#123;</span></span><br><span class="line">    <span class="keyword">if</span>  (word.<span class="built_in">length</span>&gt;<span class="built_in">length</span>) &#123;</span><br><span class="line">      <span class="built_in">length</span> = word.<span class="built_in">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>);</span><br></pre></td></tr></table></figure><h3 id="Title-Case-a-Sentence"><a href="#Title-Case-a-Sentence" class="headerlink" title="Title Case a Sentence"></a>Title Case a Sentence</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span><span class="params">(str)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">array</span> = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">array</span>.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(word, i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">array</span>[i] = word[<span class="number">0</span>].toUpperCase() + word.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line">  &#125;);</span><br><span class="line">  str = <span class="keyword">array</span>.join(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(<span class="string">"I'm a little tea pot"</span>);</span><br></pre></td></tr></table></figure><h3 id="Return-Largest-Numbers-in-Arrays"><a href="#Return-Largest-Numbers-in-Arrays" class="headerlink" title="Return Largest Numbers in Arrays"></a>Return Largest Numbers in Arrays</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function largestOfFour(arr) &#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  arr.forEach(function(a, i)&#123;</span><br><span class="line">    var m = a[<span class="number">0</span>];</span><br><span class="line">    for (var j=<span class="number">1</span>; j&lt;a.length; j++)&#123;</span><br><span class="line">      if (a[j]&gt;m)&#123;</span><br><span class="line">        m = a[j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = m;</span><br><span class="line">  &#125;);</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</span><br></pre></td></tr></table></figure><h3 id="Confirm-the-Ending"><a href="#Confirm-the-Ending" class="headerlink" title="Confirm the Ending"></a>Confirm the Ending</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span><span class="params">(str, target)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> pos = str.length - target.length;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (str.substring(pos) == target)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(<span class="string">"Bastian"</span>, <span class="string">"n"</span>);</span><br></pre></td></tr></table></figure><h3 id="Repeat-a-string-repeat-a-string"><a href="#Repeat-a-string-repeat-a-string" class="headerlink" title="Repeat a string repeat a string"></a>Repeat a string repeat a string</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span><span class="params">(str, num)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> retStr = str;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    retStr = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;num; i++)&#123;</span><br><span class="line">      retStr += str;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> retStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="Truncate-a-string"><a href="#Truncate-a-string" class="headerlink" title="Truncate a string"></a>Truncate a string</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">truncate</span>(str, <span class="built_in">num</span>) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="built_in">length</span> &gt; <span class="built_in">num</span>)&#123;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">num</span> &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">    str = str.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="built_in">num</span>) + <span class="string">"..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    str = str.<span class="built_in">substring</span>(<span class="number">0</span>, <span class="built_in">num</span> - <span class="number">3</span>) + <span class="string">"..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">truncate</span>(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><h3 id="Chunky-Monkey"><a href="#Chunky-Monkey" class="headerlink" title="Chunky Monkey"></a>Chunky Monkey</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> retArr = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i+=<span class="built_in">size</span>)&#123;</span><br><span class="line">    retArr.push(arr.slice(i, i+<span class="built_in">size</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> retArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="Slasher-Flick-Incomplete"><a href="#Slasher-Flick-Incomplete" class="headerlink" title="Slasher Flick Incomplete"></a>Slasher Flick Incomplete</h3><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slasher</span><span class="params">(arr, howMany)</span> &#123;</span></span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">if</span> (howMany &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(howMany &gt;= arr.<span class="built_in">length</span>)&#123;</span><br><span class="line">      arr = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> arr.slice(howMany);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="Mutations-Incomplete"><a href="#Mutations-Incomplete" class="headerlink" title="Mutations Incomplete"></a>Mutations Incomplete</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="comment">//原生js获取的DOM集合是一个类数组对象，所以不能直接利用数组的方法（例如：forEach，map等），需要进行转换为数组后，才能用数组的方法！</span></span><br><span class="line">  <span class="comment">//https://blog.csdn.net/m0_38082783/article/details/78131036?locationNum=10&amp;fps=1</span></span><br><span class="line">  <span class="keyword">var</span> patStr = <span class="built_in">Array</span>.from(arr[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">var</span> str = <span class="built_in">Array</span>.from(arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;patStr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> patt = <span class="keyword">new</span> <span class="built_in">RegExp</span>(patStr[i], <span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!patt.test(str))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"hey"</span>]);</span><br></pre></td></tr></table></figure><h3 id="Falsy-Bouncer-Incomplete"><a href="#Falsy-Bouncer-Incomplete" class="headerlink" title="Falsy Bouncer Incomplete"></a>Falsy Bouncer Incomplete</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Boolean</span>(word);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br></pre></td></tr></table></figure><h3 id="Seek-and-Destroy-Incomplete"><a href="#Seek-and-Destroy-Incomplete" class="headerlink" title="Seek and Destroy Incomplete"></a>Seek and Destroy Incomplete</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> datas = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">    datas.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;datas.length; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"argu:"</span> + datas[i]);</span><br><span class="line">         <span class="keyword">if</span> (data === datas[i])&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="Where-do-I-belong-Incomplete"><a href="#Where-do-I-belong-Incomplete" class="headerlink" title="Where do I belong Incomplete"></a>Where do I belong Incomplete</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">(arr, num)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">array</span> = <span class="keyword">Array</span>.from(arr);</span><br><span class="line">  <span class="keyword">array</span>.sort(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">array</span>.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">array</span>[i]&gt;=num)&#123;</span><br><span class="line">       <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">where([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h3 id="Caesars-Cipher-Incomplete"><a href="#Caesars-Cipher-Incomplete" class="headerlink" title="Caesars Cipher Incomplete"></a>Caesars Cipher Incomplete</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span><span class="params">(str)</span> </span>&#123; <span class="comment">// LBH QVQ VG!</span></span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">array</span> = <span class="keyword">Array</span>.from(str);</span><br><span class="line">    <span class="keyword">array</span> = <span class="keyword">array</span>.map(<span class="function"><span class="keyword">function</span><span class="params">(letter)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'A'</span>&lt;=letter &amp;&amp; <span class="string">'Z'</span>&gt;=letter)&#123;</span><br><span class="line">            code = (letter.charCodeAt() - <span class="number">13</span>);</span><br><span class="line">            <span class="keyword">if</span> (code &lt; <span class="string">'A'</span>.charCodeAt())&#123;</span><br><span class="line">                code += <span class="number">26</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            letter = String.fromCharCode(code);</span><br><span class="line">            console.log((letter));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letter;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rot13(<span class="string">"SERR PBQR PNZC"</span>);  <span class="comment">// 你可以修改这一行来测试你的代码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> freecodecamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap排版学习小结</title>
      <link href="2018-bootstrap-11-24.html"/>
      <url>2018-bootstrap-11-24.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bootstrap 包含了一个响应式的、移动设备优先的、不固定的网格系统</p></blockquote><h2 id="基本套路"><a href="#基本套路" class="headerlink" title="基本套路"></a>基本套路</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-*-*"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-*-*"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span>....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面一步步拆解。</p><h2 id="指定doctype"><a href="#指定doctype" class="headerlink" title="指定doctype"></a>指定doctype</h2><p>指定HTML 版本，<code>&lt;!DOCTYPE html&gt;</code> 代指HTML 5。</p><blockquote><p>如果在 Bootstrap 创建的网页开头不使用 HTML5 的文档类型（Doctype），您可能会面临一些浏览器显示不一致的问题，以致于您的代码不能通过 W3C 标准的验证。</p></blockquote><h2 id="添加meta标签"><a href="#添加meta标签" class="headerlink" title="添加meta标签"></a>添加meta标签</h2><p>为了照顾不同设备的效果，添加 viewport meta 标签：</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</code></p><p>这些都是可选项。</p><blockquote><p><code>width=device-width</code> 可以确保它能正确呈现在不同设备上。<br><code>initial-scale=1.0</code> 确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放。<br><code>maximum-scale=1.0</code> 与 <code>user-scalable=no</code> 一起使用。这样禁用缩放功能后，用户只能滚动屏幕，就能让您的网站看上去更像原生应用的感觉。</p></blockquote><p>详细参考：<a href="https://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="noopener">https://www.cnblogs.com/2050/p/3877280.html</a></p><h2 id="引入bootstrap-css"><a href="#引入bootstrap-css" class="headerlink" title="引入bootstrap.css"></a>引入bootstrap.css</h2><p>单纯引入bootstrap.css后，页面内容立即有了变化，左边缘的文字已显示不全。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTY0MDRlZmFmMTExOWQzYmUucG5n?x-oss-process=image/format,png" alt="引入bootstrap.css前"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWYyODFlZDU1ODI5YjdlMDAucG5n?x-oss-process=image/format,png" alt="引入bootstrap.css后"></p><p>查看样式，也没找到答案。求解。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTczOTJjMThlZjgyNTI0ZjIucG5n?x-oss-process=image/format,png" alt="没找到"></p><h2 id="添加Container"><a href="#添加Container" class="headerlink" title="添加Container"></a>添加Container</h2><p>用来框定bootstrap的有效范围。</p><p>把内容放入<code>&lt;div class=&quot;container&quot;&gt;</code>后，上一步遇到的页面显示不全问题就消失了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTQxZDNiMzllMjY4ODQ2NGIucG5n?x-oss-process=image/format,png" alt="image.png"></p><p>也可替换为<code>&lt;div class=&quot;container-fluid&quot;&gt;</code>，具体参考：<a href="https://blog.csdn.net/weixin_42097173/article/details/80381896" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42097173/article/details/80381896</a></p><h2 id="添加row、col"><a href="#添加row、col" class="headerlink" title="添加row、col"></a>添加row、col</h2><blockquote><ul><li>行必须放置在 .container class 内，以便获得适当的对齐（alignment）和内边距（padding）。</li><li>使用行来创建列的水平组。</li><li>内容应该放置在列内，且唯有列可以是行的直接子元素。</li></ul></blockquote><p>每一行自动分为12列，通过划分12个单位来排版。列数应 &lt;= 12。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTUyYmU0OWYyY2RkYjcyYmUucG5n?x-oss-process=image/format,png" alt="bootstrap栅格系统"></p><p>通过以下方式将元素嵌入网格：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-*-*"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-*-*"</span>&gt;&lt;/<span class="keyword">div</span>&gt;      </span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>类名</th><th>效果</th></tr></thead><tbody><tr><td>.col-xs-</td><td>无论屏幕宽度如何，单元格都在一行，宽度按照百分比设置；试用于手机；</td></tr><tr><td>.col-sm-</td><td>屏幕大于768px时，单元格在一行显示；屏幕小于768px时，独占一行；试用于平板；</td></tr><tr><td>.col-md-</td><td>屏幕大于992px时，单元格在一行显示；屏幕小于992px时，独占一行；试用于桌面显示器；</td></tr><tr><td>.col-lg-</td><td>屏幕大于1200px时，单元格在一行显示；屏幕小于1200px时，独占一行；适用于大型桌面显示器；</td></tr></tbody></table><p>具体参考：<a href="https://www.cnblogs.com/JerryTao/p/5476027.html" target="_blank" rel="noopener">https://www.cnblogs.com/JerryTao/p/5476027.html</a></p><h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h2><p>bootstrap的弹出框等组件包含在js中，也应一并引入。</p><p>在<code>bootstrap.min.js</code>之前，一定要引入<code>jquery.min.js</code>。</p><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>文本居中：<code>.text-center</code><br>元素居中：<code>.center-block</code><br>列偏移居中：<code>col-xx-offset-x</code>（如下例中，内容宽6列，从左偏移3列后，布局变为3-6-3）</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"background center-block"</span>&gt;</span><br><span class="line">                &lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-responsive center-block"</span> src=<span class="string">"居中图片.jpg"</span>&gt;</span><br><span class="line">                &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"text-center"</span>&gt;居中文本&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="row" &gt;</span></span><br><span class="line"><span class="regexp">                    &lt;div class="col-md-6 col-md-offset-3"&gt;</span></span><br><span class="line"><span class="regexp">                         &lt;p&gt;偏移居中列&lt;/</span>p&gt;</span><br><span class="line">                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C双向冒泡排序算法</title>
      <link href="2018-c-2-side-bubble-sort.html"/>
      <url>2018-c-2-side-bubble-sort.html</url>
      
        <content type="html"><![CDATA[<p>同事考研遇到的数据结构题：</p><blockquote><p>题目：冒泡排序算法是把大的元素向上移（气泡的上浮），也可以把小的元素向下移（气泡的下沉），请给出上浮和下沉过程交替的冒泡排序算法。</p></blockquote><p>为了减少重复代码，设置了变量step在1、-1间变化，来控制正向或反向冒泡。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  双向冒泡算法</span></span><br><span class="line"><span class="comment">//  Created by 家齐 on 2018/11/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, temp, step;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    step = <span class="number">1</span>;  <span class="comment">//控制方向</span></span><br><span class="line">    <span class="keyword">for</span> (k=n<span class="number">-1</span>; k&gt;<span class="number">0</span>; k--)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;k ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i+<span class="number">1</span>]&lt;<span class="built_in">array</span>[i])&#123;</span><br><span class="line">                temp = <span class="built_in">array</span>[i];</span><br><span class="line">                <span class="built_in">array</span>[i] = <span class="built_in">array</span>[i+<span class="number">1</span>];</span><br><span class="line">                <span class="built_in">array</span>[i+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">            i += step;</span><br><span class="line">            PrintArray(<span class="built_in">array</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">//i回退两个位置</span></span><br><span class="line">        i -= step;</span><br><span class="line">        i -= step;</span><br><span class="line">        </span><br><span class="line">        step *= <span class="number">-1</span>; <span class="comment">//反向</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    BubbleSort(a, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> bubble sort </tag>
            
            <tag> c </tag>
            
            <tag> both sides </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用vba做答题、抽点类ppt</title>
      <link href="2018-ppt-vab.html"/>
      <url>2018-ppt-vab.html</url>
      
        <content type="html"><![CDATA[<p>首先严重声明一下，我不是ppt高手，酷炫动画、美化之类一概不会，我只会写点代码，汇报ppt做得要多丑有多丑。</p><p>16年底，有幸拿到一份答题ppt模板，接手做了“XX知识问答竞赛”ppt，包含选题答题、倒计时、随机抽点等功能，初次接触到了VBA（Visual Basic for Applications）编程。</p><p>于是自那以后包办了单位各种答题类ppt……最近利用工作间隙又干了一票，感到是时候总结一下，把这项光荣而艰巨的任务传递下去了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWY2MzhmMzUxZDI2NGRlZDcuZ2lm" alt="随机抽点"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWNlNDc0OWMzZDA2NWExMmYuZ2lm" alt="选题答题，加减分"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWNlYmRkYTU4MzNiZDZiYWYuZ2lm" alt="倒计时，并播放提示音"></p><p>为了给ppt添加复杂功能，需要后台插入vba代码。下面整理一下为ppt插入、关联vba代码的基本流程，以及一些Bug的解决方法。</p><p>开发环境：Win10 x64，office 2016。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="显示“开发工具”"><a href="#显示“开发工具”" class="headerlink" title="显示“开发工具”"></a>显示“开发工具”</h3><p>在菜单栏显示“开发工具”，方便后续开发。<br>打开ppt，点 文件-&gt;选项-&gt;自定义功能区，勾选“开发工具”。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTIwMTM4NTliMzNiMTQxZTMucG5n?x-oss-process=image/format,png" alt></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQzZTA0MjFiNzI1OGIzNGMucG5n?x-oss-process=image/format,png" alt="出现“开发工具”菜单"></p><h3 id="选择引用库"><a href="#选择引用库" class="headerlink" title="选择引用库"></a>选择引用库</h3><p>当需要读写Excel时，需勾选引用库。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTk2MTFjNTJhYzk3ZjliYzAucG5n?x-oss-process=image/format,png" alt="点开发工具-&gt;工具-&gt;引用，勾选“Microsoft Excel 16.0 Object Library”"></p><p><strong>注意：随office版本不同，16.0可能会变成12.0等，更换版本时（比如拿office 2010做的拷到office 2016的电脑上用）需要正确勾选。</strong></p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="插入形状"><a href="#插入形状" class="headerlink" title="插入形状"></a>插入形状</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTY5NTU1NmJmMjY5Mzk5ZDAucG5n?x-oss-process=image/format,png" alt="新建一页ppt，插入一个形状"></p><h3 id="插入按钮"><a href="#插入按钮" class="headerlink" title="插入按钮"></a>插入按钮</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTMxMzRhY2U3ODU4YjYwOWIucG5n?x-oss-process=image/format,png" alt="点菜单栏-&gt;开发工具-&gt;“命令按钮”，在页面上拖动，插入按钮"></p><h3 id="打开选择窗格，为对象命名（很重要！）"><a href="#打开选择窗格，为对象命名（很重要！）" class="headerlink" title="打开选择窗格，为对象命名（很重要！）"></a>打开选择窗格，为对象命名（很重要！）</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTBmYWQzNjMwZTc4NmQzZmEucG5n?x-oss-process=image/format,png" alt="点菜单栏-&gt;开始-&gt;选择-&gt;选择窗格，打开对象选择窗口"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LThmMzRhN2VjZGRhZGJmODEucG5n?x-oss-process=image/format,png" alt="双击将矩形对象名，改名为shape_text，这就是VBA中关联的形状名"></p><h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTM1ZDIzOWNlODRlMWMzNDYucG5n?x-oss-process=image/format,png" alt="双击按钮，或点菜单栏-&gt;开发工具-&gt;查看代码，进入开发页面"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWIyMDY0MTlkNjIyM2QzYjkucG5n?x-oss-process=image/format,png" alt="写入如下代码，功能是在形状上显示一行文字"></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> CommandButton1_Click()</span><br><span class="line">Shapes(<span class="string">"shape_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = <span class="string">"你好，VBA！"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="关联代码"><a href="#关联代码" class="headerlink" title="关联代码"></a>关联代码</h3><p>也可以为任何形状关联一段代码。需把代码片段声明中的“Private”关键字去掉，比如：<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Show()</span><br><span class="line">Shapes(<span class="string">"shape_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = <span class="string">"你好，VBA！"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure></p><p>然后回到ppt页面，为形状关联代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWRjZWFkZGMzZTJkM2Q5ZDcucG5n?x-oss-process=image/format,png" alt="选中形状，点菜单栏-&gt;插入-&gt;动作-&gt;运行宏"></p><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>方式一，播放ppt运行代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWZiNWFhZmY3MmRjZDlmYmIucG5n?x-oss-process=image/format,png" alt="点击菜单栏最左侧按钮，返回ppt页面"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWFkYTlmMTEzNjc1OTg2YjQucG5n?x-oss-process=image/format,png" alt="播放ppt，点击按钮，出现文字"></p><p>方式二，在开发页面直接运行代码（常用于调试）：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQyNGUxNDMwM2RkOTM3MWYucG5n?x-oss-process=image/format,png" alt="将光标放到希望运行的函数内，点菜单栏运行按钮"></p><p>以上是ppt vba开发基本流程，下面附上部分代码。</p><h2 id="部分关键代码"><a href="#部分关键代码" class="headerlink" title="部分关键代码"></a>部分关键代码</h2><h3 id="随机抽点："><a href="#随机抽点：" class="headerlink" title="随机抽点："></a>随机抽点：</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Sub</span> Sleep <span class="keyword">Lib</span> <span class="string">"kernel32"</span> (<span class="keyword">ByVal</span> dwMilliseconds <span class="keyword">As</span> <span class="built_in">Long</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">'开始</span></span><br><span class="line"><span class="keyword">Sub</span> RandomStart()</span><br><span class="line">    F = <span class="number">0</span></span><br><span class="line">    <span class="keyword">Do</span> <span class="keyword">While</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">If</span> F = <span class="number">1</span> <span class="keyword">Then</span> <span class="keyword">Exit</span> <span class="keyword">Do</span></span><br><span class="line">        currentQuestionNum = Int(num3_5 * Rnd)</span><br><span class="line">        Shapes(<span class="string">"lable_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = question3_5(currentQuestionNum, <span class="number">0</span>)</span><br><span class="line">        Sleep <span class="number">20</span></span><br><span class="line">        DoEvents</span><br><span class="line">    <span class="keyword">Loop</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'结束</span></span><br><span class="line"><span class="keyword">Sub</span> RandomStop()</span><br><span class="line">F = <span class="number">1</span></span><br><span class="line">Shapes(<span class="string">"shape_answer"</span>).Visible = msoTrue</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="选题答题："><a href="#选题答题：" class="headerlink" title="选题答题："></a>选题答题：</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> chooseQuestion20(i <span class="keyword">As</span> <span class="built_in">Integer</span>)</span><br><span class="line">    <span class="comment">'题号消失</span></span><br><span class="line">    Shapes(questionShape20(i)).TextFrame2.TextRange.<span class="keyword">Text</span> = <span class="string">""</span> </span><br><span class="line">    <span class="comment">'出现"显示答案"按钮</span></span><br><span class="line">    Shapes(<span class="string">"shape_answer"</span>).Visible = msoTrue</span><br><span class="line">    <span class="comment">'显示题目</span></span><br><span class="line">    currentQuestionNum = i</span><br><span class="line">    Shapes(<span class="string">"lable_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = question3_1(currentQuestionNum, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="显示图片："><a href="#显示图片：" class="headerlink" title="显示图片："></a>显示图片：</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shapes(<span class="string">"pic1"</span>).Fill.UserPicture (ActivePresentation.Path &amp; <span class="string">"\照片库\1.jpg"</span>)</span><br></pre></td></tr></table></figure><h2 id="各种疑难杂症"><a href="#各种疑难杂症" class="headerlink" title="各种疑难杂症"></a>各种疑难杂症</h2><p>遇到过各种神奇的问题，网上对ppt vba方面问题解答较少，有些解决起来费了些功夫。</p><h3 id="无法正常读取Excel"><a href="#无法正常读取Excel" class="headerlink" title="无法正常读取Excel"></a>无法正常读取Excel</h3><p>参考上文 “准备工作” “选择引用库” 。</p><h3 id="出现“缺少Sub或Function”错误"><a href="#出现“缺少Sub或Function”错误" class="headerlink" title="出现“缺少Sub或Function”错误"></a>出现“缺少Sub或Function”错误</h3><p>这是在office2016上开发后，换到office2007电脑上运行报的错。</p><p>解决方法：尽量保持office版本一致，建议使用2010以上版本。</p><h3 id="64位系统下，出现“类型不匹配”错误"><a href="#64位系统下，出现“类型不匹配”错误" class="headerlink" title="64位系统下，出现“类型不匹配”错误"></a>64位系统下，出现“类型不匹配”错误</h3><p>从32位系统迁移到64位系统后，运行倒计时函数CreateTimer：<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> SetTimer <span class="keyword">Lib</span> <span class="string">"user32"</span> (<span class="keyword">ByVal</span> hWnd <span class="keyword">As</span> _</span><br><span class="line">        <span class="built_in">Long</span>, <span class="keyword">ByVal</span> nIDEvent <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> uElapse <span class="keyword">As</span> <span class="built_in">Long</span>, _</span><br><span class="line">        <span class="keyword">ByVal</span> lpTimerFunc <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Function</span> CreateTimer(<span class="keyword">ByVal</span> Interval <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    <span class="comment">' 建立一个时间间隔为Interval微秒的定时器</span></span><br><span class="line">    <span class="keyword">Dim</span> tID <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    tID = SetTimer(<span class="number">0</span>, <span class="number">0</span>, Interval, <span class="keyword">AddressOf</span> TimerProc) <span class="comment">'运行到此处出错</span></span><br><span class="line">    CreateTimer = tID</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> TimerProc(<span class="keyword">ByVal</span> hWnd <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> Msg <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> idEvent <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwTime <span class="keyword">As</span> <span class="built_in">Long</span>)</span><br><span class="line">    <span class="comment">' 此处放入要执行的代码</span></span><br><span class="line">    CounterNumber</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure></p><p>出现以下错误：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQ0MThiNDA3ZjcwOWQzMjMucG5n?x-oss-process=image/format,png" alt></p><p>解决方法：将SetTimer声明的最后一个参数类型改为LongPtr，即指针类型即可。<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> SetTimer <span class="keyword">Lib</span> <span class="string">"user32"</span> (<span class="keyword">ByVal</span> hWnd <span class="keyword">As</span> _</span><br><span class="line">        <span class="built_in">Long</span>, <span class="keyword">ByVal</span> nIDEvent <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> uElapse <span class="keyword">As</span> <span class="built_in">Long</span>, _</span><br><span class="line">        <span class="keyword">ByVal</span> lpTimerFunc <span class="keyword">As</span> LongPtr) <span class="keyword">As</span> <span class="built_in">Long</span></span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有系统学过VB，但由于是类C语言，在有源码的支撑下，比葫芦画瓢拿来用并不费力，当时从最初接触到完成开发只用了一周时间。</p><p>但至今仍有许多未解决的疑惑，例如：</p><ol><li>如何将被点击形状的名称作为参数，使其被VBA代码捕获。目前为每个形状关联不同的函数，50个形状就要写50个函数、改50个名称、关联50次……；</li><li>如何随页面载入自动运行某段函数。目前采用手动点击按钮的方式初始化。</li></ol><p>上述问题可能在ppt vba中无解，也可能有更好的解决方法，欢迎交流。</p>]]></content>
      
      
      <categories>
          
          <category> vba编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ppt </tag>
            
            <tag> excel </tag>
            
            <tag> vba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量化考评网站初版</title>
      <link href="2018-standard-front-8-29.html"/>
      <url>2018-standard-front-8-29.html</url>
      
        <content type="html"><![CDATA[<p>在李成海大神搭的架子下，完成了量化考评网站前端部分。用到angular.js、gulp、bower、jade等，感谢成海指导。</p><p>18年7月31日，初版于单位内网上线，功能如下。</p><h2 id="用户入口"><a href="#用户入口" class="headerlink" title="用户入口"></a>用户入口</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWIwYzJjZDA4NDljNjYyZDUuZ2lm" alt></p><h3 id="考评页面"><a href="#考评页面" class="headerlink" title="考评页面"></a>考评页面</h3><h4 id="选择部门、日期"><a href="#选择部门、日期" class="headerlink" title="选择部门、日期"></a>选择部门、日期</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWY3NTZiZDBmMjhlZDRlMzguZ2lm" alt></p><h4 id="填写一日工作"><a href="#填写一日工作" class="headerlink" title="填写一日工作"></a>填写一日工作</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQwNDI3ZDE4YjRjZmUzNTcuZ2lm" alt></p><ul><li><p>类似<strong>购物车</strong>功能，增减或直接修改数目，可实时看到得分结果。</p></li><li><p>当数目输入不合法时（字母，负数等），自动替换为0。</p></li><li><p>加分数目和减分数目均为0时，得分将被清空，不做统计。</p></li></ul><h4 id="快速导航按类别定位"><a href="#快速导航按类别定位" class="headerlink" title="快速导航按类别定位"></a>快速导航按类别定位</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWJlYzM4MDQ3NDViY2I3YzguZ2lm" alt></p><p>自动按类别生成导航菜单。</p><h4 id="提交今日工作"><a href="#提交今日工作" class="headerlink" title="提交今日工作"></a>提交今日工作</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTg3ZTcwNzU3ZDI3YjM1M2QuZ2lm" alt></p><p>显示今日总得分，提交后显示明细。</p><h4 id="防止重复提交"><a href="#防止重复提交" class="headerlink" title="防止重复提交"></a>防止重复提交</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTBjOWQyNzVlYzA2MjYwYWQuZ2lm" alt><br>显示“今日已提交！”，提交按钮变灰。</p><p>工作记录限制每天提交一次，一经提交不可更改。</p><h3 id="绩效搜索页面"><a href="#绩效搜索页面" class="headerlink" title="绩效搜索页面"></a>绩效搜索页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWUyMGI4YmFhYmI4NWViMTMuZ2lm" alt></p><p>查看个人绩效，可按得分类型、评语类型、起止日期等筛选。</p><h3 id="成长曲线页面"><a href="#成长曲线页面" class="headerlink" title="成长曲线页面"></a>成长曲线页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTEzNjU3MjgzNWEzMGM0NjMuZ2lm" alt></p><p>查看个人成长曲线，由每日得分构成。可按部门、起止日期筛选。</p><h2 id="领导入口"><a href="#领导入口" class="headerlink" title="领导入口"></a>领导入口</h2><h3 id="登录页面-1"><a href="#登录页面-1" class="headerlink" title="登录页面"></a>登录页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWE2NTM3MTgyNzI5MWE5YzMuZ2lm" alt></p><h3 id="绩效搜索页面-1"><a href="#绩效搜索页面-1" class="headerlink" title="绩效搜索页面"></a>绩效搜索页面</h3><h4 id="检索人员绩效"><a href="#检索人员绩效" class="headerlink" title="检索人员绩效"></a>检索人员绩效</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWM1MDIzZDMzNDU2NTcyN2EuZ2lm" alt></p><p>检索所属人员绩效，可按部门、姓名、得分类型、评语类型、起止日期等筛选。</p><h4 id="填写评语"><a href="#填写评语" class="headerlink" title="填写评语"></a>填写评语</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTliYzAwYTE3OTM2MWI3YTQuZ2lm" alt></p><p>领导可对某条绩效添加评语。普通用户将能在绩效搜索页面看到评语。</p><h3 id="成长曲线页面-1"><a href="#成长曲线页面-1" class="headerlink" title="成长曲线页面"></a>成长曲线页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTM4NDQ3N2ZhZWRjMDNkNzcuZ2lm" alt></p><p>查看所属人员成长曲线，可按部门、姓名、起止日期等筛选。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>网站后端由成海开发，使用springboot脚手架，效率极高地提供了数据增删查改的接口，这是后面需要学习的东西。</p><p>借此体验了前后端分离的合作开发模式：在阿里云服务器上搭建测试网站和数据库服务，在GitHub上共同管理代码。</p><p>源码可在我的GitHub上找到：<a href="https://github.com/zhang35" target="_blank" rel="noopener">https://github.com/zhang35</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化考评 web 购物车 成长曲线 评语 angular.js gulp bower jade </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器Vim学习笔记（三）——插件</title>
      <link href="2018-vim-8-22.html"/>
      <url>2018-vim-8-22.html</url>
      
        <content type="html"><![CDATA[<p>Vim有很多强大的插件。一开始使用别人的.vimrc配置文件，添加了众多自己都不认识的插件，结果便是懵圈。</p><p>应该需要根据自己的需求安装插件，掌握它们的基本用法。</p><h2 id="手动安装插件"><a href="#手动安装插件" class="headerlink" title="手动安装插件"></a>手动安装插件</h2><blockquote><p>第1种解压为<em>.exe的插件如ctags插件。将ctags.exe拷贝到 vim74目录下;<br>第2种解压为</em>.vim的插件如taglist插件。将taglist.vim、taglist.txt分别拷贝到vimfile下plugin和doc文件夹下;<br>第3种解压为*.vmb的插件如mark插件。例如将supertab.vmb用gvim打开,并执行命令【:so %】进行安装。</p></blockquote><h2 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h2><p>手动安装插件比较繁琐，需要插件管理器。</p><p>使用过pathogen、vundle和vim-plug。</p><ul><li>pathogen，将插件整体放在~/.vim/bundle文件夹中，每个插件一个文件夹，省去分别放.vim和.doc文件的麻烦。离线状态下管理插件很方便。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTNkYmM5MGVlM2YxZjE4MWIucG5n?x-oss-process=image/format,png" alt="pathogen管理插件"></p><ul><li><p>vundle实现的是“一个.vimrc走天下”，把所需插件都列在配置文件里，在线安装、更新、删除等。</p></li><li><p>Vim-plug与Vundle类似，更新、安装都是并发，单文件，小巧快捷。</p></li></ul><p>最终选择了pathogen，因为国内上网环境访问github太慢，在线安装插件缓慢且容易报错。</p><p>使用pathogen只需同步.vimrc和.vim文件夹即可。</p><h2 id="pathogen使用"><a href="#pathogen使用" class="headerlink" title="pathogen使用"></a>pathogen使用</h2><p> 官方链接：<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">https://github.com/tpope/vim-pathogen</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载pathogen.vim到~/.vim/autoload文件夹。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> ~/.<span class="keyword">vim</span>/autoload ~/.<span class="keyword">vim</span>/bundle &amp;&amp; \</span><br><span class="line">curl -LSso ~/.<span class="keyword">vim</span>/autoload/pathogen.<span class="keyword">vim</span> http<span class="variable">s:</span>//tpo.<span class="keyword">pe</span>/pathogen.<span class="keyword">vim</span></span><br></pre></td></tr></table></figure></p><p>在~/.vimrc中添加<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">execute</span> pathogen#infect()</span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>此时只需将完整插件放进~/.vim/bundle文件夹下即可。</p><p>安装插件的例子：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.<span class="keyword">vim</span>/bundle &amp;&amp; \</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tpope/<span class="keyword">vim</span>-sensible.git</span><br></pre></td></tr></table></figure></p><p>生成帮助文档：<br><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call pathogen<span class="function"><span class="keyword">#</span><span class="title">helptags</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="NerdTree"><a href="#NerdTree" class="headerlink" title="NerdTree"></a>NerdTree</h3><p>左侧树形文件浏览器。</p><p>开启：<br><code>:NERDTree</code><br>上/下一个父节点：<br><code>ctrl-k/j</code><br>用标签页打开：<br><code>t</code><br>跳到父/根节点：<br><code>p/P</code></p><h3 id="EasyMotion"><a href="#EasyMotion" class="headerlink" title="EasyMotion"></a>EasyMotion</h3><p>精准跳转插件。</p><p>用法：<br><code>&lt;leader&gt;&lt;leader&gt;+移动指令</code><br>（<leader>默认为’\’）</leader></p><h3 id="CtrlP"><a href="#CtrlP" class="headerlink" title="CtrlP"></a>CtrlP</h3><p>文件模糊搜索。</p><p>用法：<br><code>ctrl-p</code></p><h3 id="nerdcommenter"><a href="#nerdcommenter" class="headerlink" title="nerdcommenter"></a>nerdcommenter</h3><p>注释工具。</p><p>用法：<br> 注释当前行：<br><code>&lt;leader&gt;-cc</code><br> 反注释当前行：<br><code>&lt;leader&gt;-cu</code><br> 性感方式注释：<br><code>&lt;leader&gt;-cs</code></p><h3 id="delimitMate"><a href="#delimitMate" class="headerlink" title="delimitMate"></a>delimitMate</h3><p>自动成对填写括号。</p><h3 id="syntastic"><a href="#syntastic" class="headerlink" title="syntastic"></a>syntastic</h3><p>语法检查，主动模式下保存文件时触发。</p><p>推荐.vimrc配置：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> statusline+=%#warningmsg#</span><br><span class="line"><span class="keyword">set</span> statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line"><span class="keyword">set</span> statusline+=%*</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_always_populate_loc_list</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_auto_loc_list</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_open</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:syntastic_check_on_wq</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>用法：<br>手动检查：<br><code>SyntasticCheck</code><br>切换自动/手动模式：<br><code>SyntasticToggleMode</code><br>清除错误消息：<br><code>SyntasticReset</code><br>查看当前使用的checkers：<br><code>SyntasticInfo</code></p><h3 id="tabularize"><a href="#tabularize" class="headerlink" title="tabularize"></a>tabularize</h3><p>对齐文本。</p><p>用法：<br><code>:Tabularize /正则表达式</code><br>如按逗号分隔符对齐：<br><code>:Tabularize /,</code></p><h3 id="supertab"><a href="#supertab" class="headerlink" title="supertab"></a>supertab</h3><p>允许使用tab切换补全选项。</p><h3 id="surround-vim"><a href="#surround-vim" class="headerlink" title="surround.vim"></a>surround.vim</h3><p>快捷增删改括号。</p>]]></content>
      
      
      <categories>
          
          <category> vim学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器Vim学习笔记（二）——移动、跳转</title>
      <link href="2018-vim-8-6.html"/>
      <url>2018-vim-8-6.html</url>
      
        <content type="html"><![CDATA[<p>为了摆脱鼠标，高效准确的移动光标是首要的。下面总结移动指令。</p><h2 id="上下左右"><a href="#上下左右" class="headerlink" title="上下左右"></a>上下左右</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>上</td><td>k</td><td></td></tr><tr><td>下</td><td>j</td><td></td></tr><tr><td>左</td><td>h</td><td></td></tr><tr><td>右</td><td>i</td></tr></tbody></table><p>可以前加数字，表示移动的倍数。例如，”10j”表示下移动10行。</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>首行</td><td>gg</td><td></td></tr><tr><td>末行</td><td>G</td><td></td></tr><tr><td>第{n}行</td><td>{n}G、{n}gg、:{n}</td><td>ctrl-g查看当前位置</td></tr><tr><td>文件{n}%处的行</td><td>{n}%</td><td></td></tr><tr><td>行首</td><td>0</td><td></td></tr><tr><td>行尾</td><td>$</td><td></td></tr><tr><td>行内第一个非空字符</td><td>-</td></tr></tbody></table><h2 id="屏幕滚动"><a href="#屏幕滚动" class="headerlink" title="屏幕滚动"></a>屏幕滚动</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>下一页</td><td>ctrl-f</td><td></td></tr><tr><td>上一页</td><td>ctrl-b</td><td></td></tr><tr><td>下半页</td><td>ctrl-d</td><td></td></tr><tr><td>上半页</td><td>ctrl-u</td><td></td></tr><tr><td>下一行</td><td>ctrl-e</td><td></td></tr><tr><td>上一行</td><td>ctrl-y</td><td></td></tr><tr><td>当前页顶部</td><td>H</td><td>Head</td></tr><tr><td>当前页中部</td><td>M</td><td>Medium</td></tr><tr><td>当前页底部</td><td>L</td><td>Last</td></tr><tr><td>当前行滚到屏幕顶部</td><td>zt</td><td></td></tr><tr><td>当前行滚到屏幕底部</td><td>zb</td><td></td></tr><tr><td>当前行滚到屏幕中部</td><td>zz</td></tr></tbody></table><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>下一词首</td><td>w</td><td></td></tr><tr><td>下一词首（含符号）</td><td>W</td><td></td></tr><tr><td>上一词首</td><td>b</td><td></td></tr><tr><td>上一词首（含符号）</td><td>B</td><td></td></tr><tr><td>下一词尾</td><td>e</td><td></td></tr><tr><td>下一词尾（含符号）</td><td>E</td><td></td></tr><tr><td>上一词尾</td><td>ge</td><td></td></tr><tr><td>下一词尾</td><td>gE</td></tr></tbody></table><h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><table><thead><tr><th>位置</th><th>按键</th></tr></thead><tbody><tr><td>上次位置</td><td>ctrl-o</td></tr><tr><td>下次位置</td><td>ctrl-i</td></tr></tbody></table><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>搜索是最快速的跳转。</p><table><thead><tr><th>位置</th><th>按键</th><th>备注</th><th>下一个</th><th>上一个</th></tr></thead><tbody><tr><td>下个{char}</td><td>f{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>上个{char}</td><td>F{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>下个{char}前</td><td>t{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>上个{char}前</td><td>T{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>下个{string}</td><td>/{string}</td><td>正则表达式</td><td>n</td><td>N</td></tr><tr><td>上个{string}</td><td>?{string}</td><td>正则表达式</td><td>n</td><td>N</td></tr></tbody></table><h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>设置标签：m{mark}<br>查看标签：:marks<br>跳转到标签：`{mark}</p><p>Vim常用自动创建的位置标志有：<br>| 位置             | 标签名 | 备注 |<br>| —————- | —— | —- |<br>| 上次跳转位置     | `      |      |<br>| 上次修改位置     | .      |      |<br>| 上次修改位置开头 | [      |      |<br>| 上次修改位结尾   | ]      |      |</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><table><thead><tr><th>位置</th><th>按键</th><th>例子</th></tr></thead><tbody><tr><td>关键字定义处</td><td>ctrl+]</td><td></td></tr><tr><td>括号匹配处</td><td>%</td></tr></tbody></table><h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p>Vim有 6 种折叠模式：</p><ul><li>manual           手工定义折叠</li><li>indent             更多的缩进表示更高级别的折叠</li><li>expr                用表达式来定义折叠</li><li>syntax             用语法高亮来定义折叠</li><li>diff                  对没有更改的文本进行折叠</li><li>marker            对文中的标志折叠</li></ul><p>在.vimrc里增加set fdm=indent，即开启自动折叠。</p><p>常用操作为：</p><table><thead><tr><th>操作</th><th>按键</th><th>例子</th></tr></thead><tbody><tr><td>关闭所有折叠</td><td>zm</td><td></td></tr><tr><td>展开所有折叠</td><td>zr</td><td></td></tr><tr><td>创建折叠</td><td>zf</td><td>zf% 、zf56G</td></tr><tr><td>关闭折叠</td><td>zc</td><td></td></tr><tr><td>嵌套关闭折叠</td><td>zC</td><td></td></tr><tr><td>展开折叠</td><td>zo</td><td></td></tr><tr><td>嵌套展开折叠</td><td>zO</td><td></td></tr><tr><td>下一个折叠</td><td>zj</td><td></td></tr><tr><td>上一个折叠</td><td>zk</td></tr></tbody></table><h2 id="EasyMotion插件"><a href="#EasyMotion插件" class="headerlink" title="EasyMotion插件"></a>EasyMotion插件</h2><p>Vim官网上评级为life changing的插件，能实现跨越多行的精准跳转。</p><p>使用方法：在原有的跳转指令前加{leader}{leader}键，{leader}默认为反斜杠<code>\</code>。</p><p>例如，输入<code>\\w</code>,效果如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWMyNzFiNTQyZjJjMjYyODkucG5n?x-oss-process=image/format,png" alt="初始位置"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWUyZTg4YTk0MDU4OTJmYTIucG5n?x-oss-process=image/format,png" alt="指令效果"></p><p>输入位置对应的字母即可跳转过去。太帅了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结了Vim常用移动和跳转指令，及Easymotion插件。</p>]]></content>
      
      
      <categories>
          
          <category> vim学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器Vim学习笔记（一）——基础操作</title>
      <link href="2018-vim-8-1.html"/>
      <url>2018-vim-8-1.html</url>
      
        <content type="html"><![CDATA[<p>Vim是一个文本编辑器，遵循程序员的“极懒”原则：能用键盘就不用鼠标，能敲一次键盘解决就绝不敲第二次，手指能在近处就绝不挪远。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTJjM2QwZTZlMWRiNTBhYTgucG5n?x-oss-process=image/format,png" alt="Vim"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWNlMDM1ZDU5MTMxMTBjOGIucG5n?x-oss-process=image/format,png" alt="加过插件的Vim"></p><p>第一次见我哥用，我问他不用鼠标怎么移动光标呢？他给我演示了 行号+G 直接跳到某一行（想象一下不用腾出手挪鼠标，十指保持在键盘上飞舞的效率）。研三做项目时，国科毕业的博士师兄推荐用Vim，买了教材——《Vim 实用技巧》（Practice Vim），自此入坑，至今已三年。Vim虐我千百遍，我待Vim如初恋。</p><p>Vim极度高效优雅，比如想要删除一行文字，普通编辑器需要拿鼠标涂黑一整行再按退格，而Vim只需要按“dd”；再比如想要另起一行插入文字，普通编辑器需要拿鼠标找到当前行末尾按回车，而Vim只需要按“o”。</p><p>和学Ps一样，下决心学Vim已经不下5次了，这次目标是“从入门到精通”。（入门的话，强烈推荐上述教材，它不仅教了“术”，更是教了“道”）</p><h2 id="4个模式"><a href="#4个模式" class="headerlink" title="4个模式"></a>4个模式</h2><p>vim有4个模式：</p><ul><li>普通模式 (Normal-mode) ：键盘所有键都成了快捷键，平时最常保持的模式。如同画家作画，更多的是构思、寻找位置，动笔（插入模式）只是最后一个步骤。</li><li>插入模式 (Insert-mode)：和普通文本编辑器一样，输入什么就是什么。</li><li>命令模式 (Command-mode)：普通模式下输入“：”即进入，能执行命令行。</li><li>可视模式 (Visual-mode)：相当于普通文本编辑器下的“涂黑”，先选范围后编辑。</li></ul><p>Vim的操作清单如下（手动微笑）：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWFhMDAxYzI5NDVkMzMzMzYucG5n?x-oss-process=image/format,png" alt="vim_cheat_sheet_for_programmers"></p><p>这些快捷键通过一系列排列组合，能产生强大的效果。</p><h2 id="两种操作逻辑"><a href="#两种操作逻辑" class="headerlink" title="两种操作逻辑"></a>两种操作逻辑</h2><h3 id="动作-范围"><a href="#动作-范围" class="headerlink" title="动作+范围"></a>动作+范围</h3><p>普通模式下，先输入动作的快捷键，比如d（删除），c（删除并插入），y（复制），p（粘贴）等。</p><p>再输入范围，比如w（当前字符后面的单词），aw(当前字符所在的整个单词，包含空格)，iw（当前字符所在的整个单词，不空格），即可形成完整的指令。</p><p>组合命令如：</p><p><code>ciw</code> ：清除当前单词（不含后边空格），并进入插入模式。</p><p>c指change，i指inner，w指word。</p><h3 id="范围-动作"><a href="#范围-动作" class="headerlink" title="范围+动作"></a>范围+动作</h3><p>可视模式下选中的内容，相当于普通文本编辑器的“涂黑”。先选择范围后再按动作键，即可形成指令。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>网上找到的指令速记思维导图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWY2ZDkzODE5MTgzYzdkYjcucG5n?x-oss-process=image/format,png" alt="图片来自网络"></p><p>要熟练掌握这些指令，无它，唯有多记多用。</p>]]></content>
      
      
      <categories>
          
          <category> vim学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJS学习笔记</title>
      <link href="2018-AngularJS-7-23.html"/>
      <url>2018-AngularJS-7-23.html</url>
      
        <content type="html"><![CDATA[<p>做绩效考评网站前端，用到angular.js，很强大。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>AngularJS 是一个 JavaScript 框架。</p></blockquote><blockquote><p>AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。</p></blockquote><ul><li>AngularJS 把应用程序数据绑定到 HTML 元素。</li><li>AngularJS 可以克隆和重复 HTML 元素。</li><li>AngularJS 可以隐藏和显示 HTML 元素。</li><li>AngularJS 可以在 HTML 元素”背后”添加代码。</li><li>AngularJS 支持输入验证。</li></ul><h2 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line">    名字: <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    $scope.name = <span class="string">"John Doe"</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>view和controller中的值绑定后，改变一方，另一方实时变化。</p><h2 id="ng-repeat循环元素"><a href="#ng-repeat循环元素" class="headerlink" title="ng-repeat循环元素"></a>ng-repeat循环元素</h2><p>基本用法：x in records:<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"x in records"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;x.Name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;x.Country&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>同时输出key和value，(x, y) in myObj：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"(x, y) in myObj"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;x&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;y&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">var app = angular.module("myApp", []);</span></span><br><span class="line"><span class="xml">app.controller("myCtrl", function($scope) &#123;</span></span><br><span class="line"><span class="xml">    $scope.myObj = &#123;</span></span><br><span class="line"><span class="xml">        "Name" : "Alfreds Futterkiste",</span></span><br><span class="line"><span class="xml">        "Country" : "Germany",</span></span><br><span class="line"><span class="xml">        "City" : "Berlin"</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="ng-options下拉选项"><a href="#ng-options下拉选项" class="headerlink" title="ng-options下拉选项"></a>ng-options下拉选项</h2><p>参考：<a href="https://www.baidu.com/link?url=_XHaqFuLPeXar6Kxwte4sMXDIJtFXcnqdx6O71T8u8_Z57DGHDm-7NoVF2j1CeQ7bZb6Zqh5tCutIJ192EdwqK&amp;wd=&amp;eqid=9621fda7000156d4000000035b3ae580" target="_blank" rel="noopener">angular指令笔记<em>ng-options</em>的使用方法<em>AngularJS</em>脚本之家</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="attribute">ng-options</span>=<span class="string">"c.id as c.city for c in obj1"</span> <span class="attribute">ng-model</span>=<span class="string">"selectedCity"</span> <span class="attribute">ng-change</span>=<span class="string">"SelecteCity()"</span>&gt;</span><br></pre></td></tr></table></figure><p>这里  c.id as c.city for c in obj  我们使用 obj 对象的 id作为select的value，使用obj 的city 作为 select 的label。</p><p>本文的jade代码：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select.form-control(ng-options='<span class="built_in">item</span>.departmentId <span class="keyword">as</span> <span class="built_in">item</span>.departmentName <span class="keyword">for</span> <span class="built_in">item</span> <span class="keyword">in</span> relations', ng-model='search.departmentId')</span><br></pre></td></tr></table></figure><p>relations.departmentName为显示的label，relations.departmentId为value，绑定的model是search.departmentId。</p><p>（relations是Controller中定义的对象）</p><h2 id="scope作用域问题："><a href="#scope作用域问题：" class="headerlink" title="$scope作用域问题："></a>$scope作用域问题：</h2><p>例如，前端指定ng-change=’loadData’：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select.form-control(ng-options='<span class="built_in">item</span>.<span class="built_in">id</span> <span class="keyword">as</span> <span class="built_in">item</span>.username <span class="keyword">for</span> <span class="built_in">item</span> <span class="keyword">in</span> persons', ng-model='search.personId',ng-change='loadData')</span><br></pre></td></tr></table></figure><p>在js中定义loadData()：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadData = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $http(buildParam())</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.data.status === <span class="number">200</span>) &#123;</span><br><span class="line">                $scope.items = response.data.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $.notify(response.data.message, <span class="string">'danger'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            $.notify(<span class="string">'服务器出了点问题，我们正在处理'</span>, <span class="string">'danger'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当选项变更时，是无法触发loadData的，因为前端能交互的作用域都在$scope里。需要添加：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scope</span>.<span class="built_in">load</span>Data = <span class="built_in">load</span>Data();</span><br></pre></td></tr></table></figure><p>或者直接如下定义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.loadData = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AngularJS web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(三)分支管理</title>
      <link href="2018-git-7-23.html"/>
      <url>2018-git-7-23.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git分支原理"><a href="#Git分支原理" class="headerlink" title="Git分支原理"></a>Git分支原理</h2><p>新建dev分支：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTRhZWVlYjE3ZTlmNTE5YzMucG5n?x-oss-process=image/format,png" alt></p><p>在dev分支上提交：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTY2MTgyYjgwZTQzNzBkMTcucG5n?x-oss-process=image/format,png" alt></p><p>切回到master并合并dev：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWIxNWYyOWZlZWM1MmNiZWEucG5n?x-oss-process=image/format,png" alt></p><p>团队工作流程：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWMxZmE3NDhhMTkxM2I2MzYucG5n?x-oss-process=image/format,png" alt></p><p>（图片来自廖雪峰Git教程）</p><h2 id="新建分支："><a href="#新建分支：" class="headerlink" title="新建分支："></a>新建分支：</h2><p>查看当前分支：<br><code>$ git branch</code></p><p>新建、切换分支：<br><code>$ git branch dev</code><br><code>$ git checkout dev</code></p><p>或者简化命令，直接新建并切换分支：</p><p><code>$ git checkout -b dev</code></p><p>以后的提交就是在dev上的，master不受影响。</p><h2 id="合并分支："><a href="#合并分支：" class="headerlink" title="合并分支："></a>合并分支：</h2><p>切回master，此时代码恢复到master时状态：</p><p><code>$ git checkout master</code></p><p>将dev合并到当前分支master上：</p><p><code>$ git merge dev</code></p><h3 id="普通模式合并"><a href="#普通模式合并" class="headerlink" title="普通模式合并"></a>普通模式合并</h3><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并：</p><p><code>$ git merge --no-ff dev</code></p><p>在merge时会生成一个新的commit。而默认的fast forward合并就看不出来曾经做过合并。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>如果两个分支都提交了对同一文件的更改，合并二者将产生冲突：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">merge</span> dev</span><br><span class="line"><span class="keyword">Auto</span>-merging newFile.txt</span><br><span class="line">CONFLICT (<span class="keyword">content</span>): <span class="keyword">Merge</span> conflict <span class="keyword">in</span> newFile.txt</span><br><span class="line"><span class="keyword">Automatic</span> <span class="keyword">merge</span> <span class="keyword">failed</span>; fix conflicts and then <span class="keyword">commit</span> the result.</span><br></pre></td></tr></table></figure><p>git status查看状态如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run "git <span class="keyword">commit</span><span class="string">")</span></span><br><span class="line"><span class="string">  (use "</span>git <span class="keyword">merge</span> <span class="comment">--abort" to abort the merge)</span></span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> mark resolution)</span><br><span class="line"></span><br><span class="line"><span class="keyword">both</span> modified:   newFile.txt</span><br></pre></td></tr></table></figure></p><p>冲突文件已经记录了冲突，可直接编辑：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim newFile.txt </span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD                                                                </span><br><span class="line">  <span class="number">2</span> master <span class="keyword">add</span><span class="bash"></span></span><br><span class="line"><span class="bash">  3 =======</span></span><br><span class="line"><span class="bash">  4 dev add</span></span><br></pre></td></tr></table></figure></p><p>修改后，即可提交成功。</p><p>这说明<code>$ git merge</code>命令即使遇到冲突也会发生作用，继续合并且标记了冲突，产生了新的修改。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p><code>$ git branch -d dev</code></p><p>如dev含有未合并的更改，则可用-D强制删除：</p><p><code>git branch -D dev</code></p><h2 id="暂存现场"><a href="#暂存现场" class="headerlink" title="暂存现场"></a>暂存现场</h2><p>情景：为解决master分支的一个bug，需临时从dev分支切过去。</p><p>这时如果在dev上修改了文件，但未提交，切换分支时会提示：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git co master</span><br><span class="line"><span class="keyword">error: </span>Your local changes to the following files would be overwritten by checkout:</span><br><span class="line">newFile.txt</span><br><span class="line">Please commit your changes or stash them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure></p><p>“要么提交，要么暂存，否则这些更改就会消失。”</p><p>如果还不想提交，那就先stash起来：</p><p><code>$ git stash</code></p><p>然后切换到其它分支改改改。</p><p>完事后再切回到dev，查看stash列表：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash <span class="built_in">list</span></span><br><span class="line">stash@&#123;<span class="number">0</span>&#125;: WIP <span class="keyword">on</span> dev: <span class="number">471716</span>b dev`</span><br></pre></td></tr></table></figure></p><p>恢复现场：</p><p>一是用git stash apply恢复，但是恢复后，还需要用git stash drop来删除stash内容；</p><p>另一种方式是用git stash pop，恢复的同时把stash内容也删了：</p><p><code>$ git stash pop</code></p><p>这样dev上未提交的更改又出现了。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(二)版本管理</title>
      <link href="2018-git-5-6.html"/>
      <url>2018-git-5-6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git版本控制系统"><a href="#Git版本控制系统" class="headerlink" title="Git版本控制系统"></a>Git版本控制系统</h2><p>Git版本控制流程为：<br>工作区（Working Directory / Copy）-&gt;暂存区(stage / index)-&gt;分支。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTQyNDdkNjU3YTU3ODBmN2QucG5n?x-oss-process=image/format,png" alt="工作区、暂存区、分支（来自廖雪峰Git教程）"></p><p>工作区即当前目录，其中有一个隐藏目录.git，为版本库，记录了所有版本信息，包含暂存区和分支等；</p><p><code>$ git add</code>将文件从<strong>工作区</strong>添加到<strong>暂存区</strong>；</p><p><code>$ git commit</code>将<strong>暂存区</strong>的内容提交到<strong>分支</strong>；</p><p>下面的名词解释十分精彩，引自：<a href="https://www.cnblogs.com/kidsitcn/p/4513297.html" target="_blank" rel="noopener">https://www.cnblogs.com/kidsitcn/p/4513297.html</a></p><blockquote><p>首先我们来看几个术语</p><ul><li>HEAD<br>这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</li><li>Index<br>index也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit</li><li>Working Copy<br>working copy代表你正在工作的那个文件集</li></ul></blockquote><blockquote><p>当你第一次checkout一个分支，HEAD就指向当前分支的最近一个commit。在HEAD中的文件集（实际上他们从技术上不是文件，他们是blobs（一团），但是为了讨论的方便我们就简化认为他们就是一些文件）和在index中的文件集是相同的，在working copy的文件集和HEAD,INDEX中的文件集是完全相同的。所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，GIT很happy。</p></blockquote><blockquote><p>当你对一个文件执行一次修改，Git感知到了这个修改，并且说：“嘿，文件已经变更了！你的working copy不再和index,head相同！”，随后GIT标记这个文件是修改过的。</p></blockquote><blockquote><p>然后，当你执行一个git add,它就stages the file in the index，并且GIT说：“嘿，OK，现在你的working copy和index区是相同的，但是他们和HEAD区是不同的！”</p></blockquote><blockquote><p>当你执行一个git commit,GIT就创建一个新的commit，随后HEAD就指向这个新的commit，而index,working copy的状态和HEAD就又完全匹配相同了，GIT又一次HAPPY了。</p></blockquote><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>HEAD是指向当前版本的指针。回退版本其实就是改变HEAD指向的位置：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTU4YzI1YWNmOThhNmRlN2MucG5n?x-oss-process=image/format,png" alt="当前版本（来自廖雪峰Git教程）"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTkzNzliMGM5ZDMxYTM2MjcucG5n?x-oss-process=image/format,png" alt="回退一个版本（来自廖雪峰Git教程）"></p><p>版本回退命令为：<br><code>git reset [--hard|soft|mixed|merge|keep] [&lt;commit&gt;或HEAD]</code></p><p>其中，常用的选项分别有如下功能：</p><ul><li>hard：回滚 HEAD + index + 工作区，彻底没了；</li><li>soft：回滚 HEAD，回到index，可以重新commit；</li><li>mixed（默认参数）：回滚 HEAD + index，回到工作区，可以重新add。</li></ul><h3 id="回退前N个版本"><a href="#回退前N个版本" class="headerlink" title="回退前N个版本"></a>回退前N个版本</h3><p>上一个版本为HEAD\^，上上一个版本为HEAD^^，上n个版本为HEAD~n。</p><p>如果执行<code>$ git reset --hard HEAD</code>，什么都不会发生，因为还在原地。</p><p>回退一个版本：<br><code>$ git reset --hard HEAD^</code></p><p>回退10个版本：<br><code>$ git reset --hard HEAD~10</code></p><h3 id="回退到指定版本"><a href="#回退到指定版本" class="headerlink" title="回退到指定版本"></a>回退到指定版本</h3><p>先<code>$ git log</code>查看版本库状态：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span> <span class="number">7</span>afc632b7bbd7867fb8f74d313c0a558021645a3 (<span class="keyword">HEAD</span> -&gt; <span class="keyword">master</span>, origin/<span class="keyword">master</span>, origin/<span class="keyword">HEAD</span>)</span><br><span class="line">Author: zhang35 &lt;zhangjqfriend@<span class="number">126.</span>com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Wed Jan <span class="number">10</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">17</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Update</span> File.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span> <span class="number">287</span>ed58123b17ba814c2d94ad593c8cfc11af1a6</span><br><span class="line">Author: zhang-pc &lt;zhangjqfriend@<span class="number">126.</span>com&gt;</span><br><span class="line"><span class="built_in">Date</span>:   Wed Jan <span class="number">10</span> <span class="number">12</span>:<span class="number">25</span>:<span class="number">52</span> <span class="number">2018</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    fun</span><br></pre></td></tr></table></figure></p><p>指定版本号前几位即可：</p><p> <code>$ git reset --hard 287ed</code></p><h3 id="撤销回退"><a href="#撤销回退" class="headerlink" title="撤销回退"></a>撤销回退</h3><p>如果回退到某版本后后悔了，想返回到原先的版本，可以<br><code>$ git reflog</code>查看命令记录：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"><span class="number">287</span>ed58 (HEAD -&gt; master) HEAD@&#123;<span class="number">0</span>&#125;: <span class="string">reset:</span> moving to <span class="number">287</span>ed</span><br><span class="line"><span class="number">7</span>afc632 (origin<span class="regexp">/master, origin/</span>HEAD) HEAD@&#123;<span class="number">1</span>&#125;: <span class="string">clone:</span> from git<span class="meta">@github</span>.<span class="string">com:</span>zhang35/Hello-Git.git</span><br></pre></td></tr></table></figure><p>找到之前的版本id即可恢复回去：</p><p> <code>$ git reset --hard 7afc</code></p><h2 id="丢弃修改"><a href="#丢弃修改" class="headerlink" title="丢弃修改"></a>丢弃修改</h2><p>使用<code>$ git status</code>查看状态，可以看到如何撤销的提示。</p><h3 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h3><p>对于已经add到暂存区，但未commit的修改，<code>$ git status</code>提示如下：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">modified:   <span class="keyword">File</span>.txt</span><br></pre></td></tr></table></figure></p><p>移出暂存区：<br><code>git reset HEAD File.txt</code></p><p>（HEAD即当前最新版本）</p><p>这样对File.txt的修改就回到了工作区。</p><h3 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h3><p>对于尚在工作区，还没add到暂存区的修改，<code>$ git status</code>提示如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">modified:   File.txt</span><br></pre></td></tr></table></figure></p><p>从工作区丢弃更改：<br><code>$ git checkout -- File.txt</code></p><p>(命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令)</p><p>这时<code>$ git status</code>提示如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">On branch <span class="literal">master</span></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><p>世界清净了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简介了Git版本管理系统，总结了版本回退、丢弃修改的基本方法。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> .gitignore </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(一)基础用法</title>
      <link href="2018-git-5-5.html"/>
      <url>2018-git-5-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git是当前最流行的分布式版本控制系统。Git是一个本地软件，需要下载安装。</p><h2 id="简化命令"><a href="#简化命令" class="headerlink" title="简化命令"></a>简化命令</h2><p>为了方便使用，首先自定义简化指令：</p><p><code>$ git config --global alias.st status</code></p><p>更简单的做法是，在用户主目录下的隐藏文件.gitconfig 中加入：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[alias]  </span><br><span class="line">    <span class="attr">st</span> = status  </span><br><span class="line">    <span class="attr">ci</span> = commit  </span><br><span class="line">    <span class="attr">br</span> = branch  </span><br><span class="line">    <span class="attr">co</span> = checkout  </span><br><span class="line">    <span class="attr">df</span> = diff  </span><br><span class="line">    <span class="attr">unstage</span> = reset HEAD --</span><br><span class="line">    <span class="attr">last</span> = log -<span class="number">1</span> HEAD</span><br></pre></td></tr></table></figure></p><p>这样，git status/commit/branch/checkout等反人类的长命令，可以敲俩字母代替了。</p><h2 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h2><p>在当前文件夹创建版本库：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir leader-front</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> leader-front</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure></p><h2 id="添加文件："><a href="#添加文件：" class="headerlink" title="添加文件："></a>添加文件：</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add <span class="comment">[--verbose | -v]</span> <span class="comment">[--dry-run | -n]</span> <span class="comment">[--force | -f]</span> <span class="comment">[--interactive | -i]</span> <span class="comment">[--patch | -p]</span></span><br><span class="line">      <span class="comment">[--edit | -e]</span> <span class="comment">[--<span class="comment">[no-]</span>all | --<span class="comment">[no-]</span>ignore-removal | <span class="comment">[--update | -u]</span>]</span></span><br><span class="line">      <span class="comment">[--intent-to-add | -N]</span> <span class="comment">[--refresh]</span> <span class="comment">[--ignore-errors]</span> <span class="comment">[--ignore-missing]</span></span><br><span class="line">      <span class="comment">[--chmod=(+|-)x]</span> <span class="comment">[--]</span> <span class="comment">[&lt;pathspec&gt;…​]</span></span><br></pre></td></tr></table></figure><p>添加指定文件：<br><code>$ git add file1.txt</code><br><code>$ git add file2.txt file3.txt</code></p><p>添加多个文件：<br><code>$ git add document/*.txt</code></p><p>添加所有文件：<br><code>$ git add .</code></p><h3 id="gitignore忽略文件"><a href="#gitignore忽略文件" class="headerlink" title=".gitignore忽略文件"></a>.gitignore忽略文件</h3><p>对于不想添加到仓库的文件，如Desktop.ini，可以通过写.gitignore文件忽略之。</p><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a>提供了常用的配置文件。</p><p>.gitignore例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Windows</span>:</span><br><span class="line"><span class="selector-tag">Thumbs</span><span class="selector-class">.db</span></span><br><span class="line"><span class="selector-tag">Desktop</span><span class="selector-class">.ini</span></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">Python</span>:</span><br><span class="line">*<span class="selector-class">.py</span><span class="selector-attr">[cod]</span></span><br><span class="line">*<span class="selector-class">.so</span></span><br><span class="line">*<span class="selector-class">.egg</span></span><br><span class="line">*<span class="selector-class">.egg-info</span></span><br><span class="line"><span class="selector-tag">dist</span></span><br><span class="line"><span class="selector-tag">build</span></span><br></pre></td></tr></table></figure></p><p>把.gitignore文件单独提交到git后即生效。检验其是否生效方法是，<code>$ git status</code>命令是否显示<code>working directory clean</code>。</p><p>gitignore还可以指定要将哪些文件添加到版本管理中：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">!*.zip</span></span><br><span class="line"><span class="addition">!/mtk/one.txt</span></span><br></pre></td></tr></table></figure></p><p>唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。</p><h2 id="提交修改："><a href="#提交修改：" class="headerlink" title="提交修改："></a>提交修改：</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="comment">[-a | --interactive | --patch]</span> <span class="comment">[-s]</span> <span class="comment">[-v]</span> <span class="comment">[-u&lt;mode&gt;]</span> <span class="comment">[--amend]</span></span><br><span class="line">       <span class="comment">[--dry-run]</span> <span class="comment">[(-c | -C | --fixup | --squash) &lt;commit&gt;]</span></span><br><span class="line">       <span class="comment">[-F &lt;file&gt; | -m &lt;msg&gt;]</span> <span class="comment">[--reset-author]</span> <span class="comment">[--allow-empty]</span></span><br><span class="line">       <span class="comment">[--allow-empty-message]</span> <span class="comment">[--no-verify]</span> <span class="comment">[-e]</span> <span class="comment">[--author=&lt;author&gt;]</span></span><br><span class="line">       <span class="comment">[--date=&lt;date&gt;]</span> <span class="comment">[--cleanup=&lt;mode&gt;]</span> <span class="comment">[--<span class="comment">[no-]</span>status]</span></span><br><span class="line">       <span class="comment">[-i | -o]</span> <span class="comment">[-S<span class="comment">[&lt;keyid&gt;]</span>]</span> <span class="comment">[--]</span> <span class="comment">[&lt;file&gt;…​]</span></span><br></pre></td></tr></table></figure><p>提交暂存区的改动：<br><code>git commit -m &quot;info&quot;</code></p><p>必须得有改动说明。如果没用-m指定，会单独开一个窗口让你写。</p><h2 id="上传代码到远程仓库"><a href="#上传代码到远程仓库" class="headerlink" title="上传代码到远程仓库"></a>上传代码到远程仓库</h2><p>通常使用Github等远程仓库存储、共享代码。</p><p>Github是Git的一个网络实现，提供了免费的远程代码存储仓库。</p><p>由于Github服务器在国外，访问速度感人，可以选用国内类似的代码仓库，比如：码云，coding.net等。</p><p>下面以Git+Github管理前端项目leader-front为例，总结如何使用远程仓库存储代码。</p><h3 id="从本地上传代码到Github"><a href="#从本地上传代码到Github" class="headerlink" title="从本地上传代码到Github"></a>从本地上传代码到Github</h3><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>登录Github，创建仓库leader-front，全是鼠标操作。<br><em>(在自己的Github账户中，需要添加本机SSH公钥后，才能推送)</em></p><p>回到本地命令行，关联远程仓库：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:zhang35/leader-front.git</span></span><br></pre></td></tr></table></figure></p><p>名为origin（origin是git远程仓库的默认名称），以后直接<code>$ git push</code>即可上传。</p><p>也可以起名为“github”，以后使用<code>$ git push github</code>上传。</p><h4 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h4><p>关联远程仓库后，直接输入<code>$ git push</code>后会提示：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fata<span class="variable">l:</span> The current branch master <span class="built_in">has</span> <span class="keyword">no</span> upstream branch.</span><br><span class="line">To push the current branch <span class="built_in">and</span> <span class="keyword">set</span> the remote <span class="keyword">as</span> upstream, use</span><br><span class="line"></span><br><span class="line">    git push --<span class="keyword">set</span>-upstream origin master</span><br></pre></td></tr></table></figure></p><p>因为此时只关联了仓库，还没关联分支。</p><p>不关联分支的情况下，执行：</p><p><code>$ git push origin master</code></p><p>即可将当前分支推送到远程origin下的master分支。</p><p>为了简化这一步骤，第一次推送前，根据提示添加默认关联分支：</p><p><code>$ git push --set-upstream origin master</code></p><p>或同时完成推送和关联：</p><p><code>$ git push -u origin master</code></p><p>加上-u参数，本地的master分支和远程的master分支就关联了起来。</p><p>如果出现如下错误：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">error: </span>src refspec master does not match any.</span><br><span class="line"><span class="keyword">error: </span>failed to push some refs to 'git@github.com:zhang35/leader-front.git'</span><br></pre></td></tr></table></figure></p><p>则是因为此时本地仓库为空，需要添加、提交修改才能提交。</p><h3 id="从Github获取代码"><a href="#从Github获取代码" class="headerlink" title="从Github获取代码"></a>从Github获取代码</h3><p>上一小节的做法是先有本地仓库，再与远程仓库关联。</p><p>更方便的做法是，先有远程仓库，从远程仓库克隆到本地，自动完成关联：</p><p><code>$ git clone git@github.com:zhang35/leader-front.git</code></p><p>或</p><p><code>$ git clone https://github.com/zhang35/leader-front.git</code></p><h2 id="例子：将本地项目上传到Github管理的完整流程"><a href="#例子：将本地项目上传到Github管理的完整流程" class="headerlink" title="例子：将本地项目上传到Github管理的完整流程"></a>例子：将本地项目上传到Github管理的完整流程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir leader-front</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> leader-front</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ci -m <span class="string">'add all'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:zhang35/leader-front.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结了Git的基本用法，以及使用远程仓库储存代码的基本方法。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> .gitignore </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高效能人士的七个习惯》——史蒂芬·柯维</title>
      <link href="2018-7-habits-4-22.html"/>
      <url>2018-7-habits-4-22.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提高认知水平的经典书籍。</p><p>作者总结了从个人修养到为人处世的七项原则，形成了一套完整的体系：</p><p><img src="https://lh3.googleusercontent.com/proxy/hawJy9aLQ-UtAUH2Gh_cTkroiYAFxVK1bCerzcPoyFJnJ1z2HXEBsed-waCR1HLXspnxdcPka7_11raykb-Zaugh7hKp0yrwFNG4" alt="成熟模式图"></p><blockquote><p>“成熟模式图”( Maturity Continuum)即人类成长的三个阶段，分别为依赖期、独立期、互赖期。<br>依赖期的人靠别人来实现愿望；独立期的人单枪匹马打天下；互赖期的人，群策群力实现最高成就。</p></blockquote><p>在这个体系下，有了自下而上的七个习惯。</p><p>前三个促使个人领域的成功，后三个促使公众领域的成功，最后一个是用来凑数的。</p><p>七个习惯可概括为：</p><ol><li>积极主动：控制情绪，不受环境制约；</li><li>以始为终：确定个人原则并一以贯之；</li><li>要事第一：多干“重要但不紧急”的事；</li><li>双赢思维：多干利人又利己的事；</li><li>知彼解己：换位思考，体会他人感受；</li><li>综合统效：兼容并包，团队协作；</li><li>不断更新：保持学习。</li></ol><p>据说坚持修炼此道，便可走向人生巅峰：</p><blockquote><p>本书包含人类效能的许多原则，是基本而首要的，可永葆成功与幸福，放之四海皆准…</p></blockquote><p>这么说不严谨。但了解这些原则还是很有价值的，其中“积极主动”、“要事第一”、“双赢思维”对我启发很大。下面整理读书笔记。</p><h2 id="七个习惯概论"><a href="#七个习惯概论" class="headerlink" title="七个习惯概论"></a>七个习惯概论</h2><h3 id="品德的意义"><a href="#品德的意义" class="headerlink" title="品德的意义"></a>品德的意义</h3><blockquote><p>因此，近50年来讨论成功术的著作都很肤浅，谈的都是如何树立社会形象的技巧和如何成功的捷径。但这种用“阿斯匹林”和“创可贴”来治疗心灵痛苦的方法，往往是头痛医头，脚痛医脚，治标而不治本。有时似乎取得了暂时的效果，但是深层次的问题没有解决，不时又会重新浮现。</p></blockquote><blockquote><p>但在长久的人际关系中，单凭这些次要优势是难有作为的。倘若没有根深蒂固的诚信和基本的品德力量，那么生活的挑战迟早会让你真正的动机暴露无遗，一时的成功就会被人际关系的破裂所替代。</p></blockquote><blockquote><p>只有品德才是交流中最伶俐的“口齿”，正如爱默生( Emerson)所说：“大声喧哗反而难以入耳。”</p></blockquote><blockquote><p>当然，也有品德有余却沟通技巧不足的人，但即便人际关系质量因此受到影响，也是瑕不掩瑜。</p></blockquote><blockquote><p>如果我们只想让生活发生相对较小的变化，那么专注于自己的态度和行为即可，但是实质性的生活变化还是要靠思维的转换。<br>梭罗( Thoreau)曾经说过：“一棵邪恶的大树，砍它枝叶千斧，不如砍它根基一斧。”行为和态度就是枝叶，思维定式就是根基，抓住根本才能让生活出现实质性的进展。</p></blockquote><h3 id="效能的定义"><a href="#效能的定义" class="headerlink" title="效能的定义"></a>效能的定义</h3><blockquote><p>真正的效能应该包含两个要素：一是“产出”，即金蛋；二是“产能”——生产的资产或能力，即下金蛋的鹅。<br>在生活中“重蛋轻鹅”的人，最终会连这个产金蛋的资产也保不住。反之，“重鹅轻蛋”的人，最后自己都可能会被活活饿死，更不用说鹅了。<br>所以，效能在于产出与产能的平衡。</p></blockquote><blockquote><p>日常生活中，你是否曾为了多收获几枚金蛋而废寝忘食地工作，结果弄得精疲力竭，无法继续工作？其实若能好好睡一觉，那么第二天就会精力充沛，完成更多的工作，更好地迎接这一天的挑战。<br>再比如，你强迫别人按你的意志行事，结果却发现你们的关系变得空洞无物；反过来，如果你能用时用心经营人际关系，就能赢得信任与合作，通过开诚布公的交流获得实质性的进展。</p></blockquote><p>磨刀不误砍柴工，分配能量，厚积薄发。这点我已经做到了。</p><h2 id="习惯1：积极主动——个人愿景的原则"><a href="#习惯1：积极主动——个人愿景的原则" class="headerlink" title="习惯1：积极主动——个人愿景的原则"></a>习惯1：积极主动——个人愿景的原则</h2><h3 id="弗兰克尔的例子"><a href="#弗兰克尔的例子" class="headerlink" title="弗兰克尔的例子"></a>弗兰克尔的例子</h3><blockquote><p>维克多·弗兰克尔（Victor Frankl，1905 -1997，出生于奥地利的美国神经与精神病学教授——译注）的感人事迹可以帮助我们回答上述疑问。<br>身为犹太人，弗兰克尔曾在“二战”期间被关进纳粹德国的死亡集中营，其父母、妻子与兄弟都死于纳粹魔掌，只剩下一个妹妹。他本人也饱受凌辱，历尽酷刑，过着朝不保夕的生活。<br>有一天，他赤身独处于狭小的囚室，忽然有一种全新的感受，后来他称之为“人类终极的自由”。虽然纳粹能控制他的生存环境，摧残他的肉体，但他的自我意识却是独立的，能够超脱肉体的束缚，以旁观者的身份审视自己的遭遇。他可以决定外界刺激对自己的影响程度，或者说，在遭遇（刺激）与对遭遇的回应之间，他有选择回应方式的自由或能力。<br>这期间他设想了各式各样的状况，比如想象他从死亡营获释后，站在讲台上给学生讲授自己从这段痛苦遭遇中学得的宝贵教训，告诉他们如何用心灵的眼睛看待自己的经历。<br>凭着想象与记忆，他不断修炼心灵、头脑和道德的自律能力，将内心的自由种子培育得日益成熟，直到超脱纳粹的禁锢。对于物质环境，纳粹享有决定权和一定的自由，但是弗兰克尔享有更伟大的自由——他强大的内心力量可以帮助他实践自己的选择，超越纳粹的禁锢。这种力量感化了其他的囚犯，甚至狱卒，帮助狱友们在苦难中找到生命的意义，寻回自尊。</p></blockquote><blockquote><p>在最恶劣的环境中，弗兰克尔运用人类独有的自我意识，发掘了人性最根本的原则，即在刺激与回应之间，人有选择的自由。</p></blockquote><blockquote><p>埃莉诺·罗斯福（Eleanor Roosevelt，美国小罗斯福总统的夫人——译注）曾说：“除非你愿意，否则没人能伤害你。”</p></blockquote><blockquote><p>圣雄甘地：“除非拱手相让，否则没人能剥夺我们的自尊。”可见最刻骨铭心的伤害并非悲惨遭遇本身，而是我们竟然会听任这些遭遇发生在自己身上。</p></blockquote><p>这个例子直击我的内心。同样是封闭的环境，但控制情绪，处变不惊，精神便能自由自在。</p><h3 id="对待恋爱关系"><a href="#对待恋爱关系" class="headerlink" title="对待恋爱关系"></a>对待恋爱关系</h3><blockquote><p>“可是没有爱，你让我怎么去爱呢？”<br>“老兄，爱是一个动词，爱的感觉是爱的行动所带来的成果，所以请你爱她，为她服务，为她牺牲，聆听她心里的话，设身处地为她着想，欣赏她，肯定她。你愿意吗？”<br>在所有进步的社会中，爱都是代表动作，但消极被动的人却把爱当做一种感觉。好莱坞式的电影就常灌输这种不必为爱负责的观念——因为爱只是感觉，没有感觉，便没有爱。事实上，任由感觉左右行为是不负责任的做法。</p></blockquote><p>维持婚姻关系需要极大投入，爱意慢慢消散，最后只剩下责任。</p><p>婚姻制度果真泯灭人性，唉。</p><h2 id="习惯2：以始为终"><a href="#习惯2：以始为终" class="headerlink" title="习惯2：以始为终"></a>习惯2：以始为终</h2><h3 id="制定原则的重要性"><a href="#制定原则的重要性" class="headerlink" title="制定原则的重要性"></a>制定原则的重要性</h3><blockquote><p>成功，甚至求生的关键并不在于你流了多少血汗，而在于你努力的方向是否正确，因此无论在哪个行业，领导都重于管理。</p></blockquote><blockquote><p>个人生活中的领导意识更为匮乏，很多人连自己的价值观都没有搞清楚，就忙于提高效率，制定目标或完成任务。</p></blockquote><h3 id="个人使命宣言"><a href="#个人使命宣言" class="headerlink" title="个人使命宣言"></a>个人使命宣言</h3><blockquote><p>以终为始最有效的方法，就是撰写一份个人使命宣言，即人生哲学或基本信念。宣言主要说明自己想成为怎样的人（品德），成就什么样的事业（贡献和成就）及为此奠基的价值观和原则。</p></blockquote><p>高晓松：”男人要有一以贯之的价值观“。</p><p>个人原则很重要，我现在就苦于琢磨这个事。</p><p>但列出个原则清单谈何容易，悟道必定需要长久积累。慢慢来，多读书，读国学经典。</p><h3 id="根据原则做决策的例子"><a href="#根据原则做决策的例子" class="headerlink" title="根据原则做决策的例子"></a>根据原则做决策的例子</h3><blockquote><p>现在假定你已经买好票，准备晚上与配偶一起去听音乐会，对方兴奋不已，满怀期待。<br>可是下午四点钟，老板突然来电话要你晚上加班，理由是第二天上午九点钟有一个重要会议。<br>◆对以家庭或配偶为中心的人而言，当然是优先考虑配偶的感觉，为了不让他（她）失望，你很可能会委婉地拒绝老板。即使为了保住工作而勉强留下来加班，心里也一定十分不情愿，担心着配偶的反应，想着用什么合适的理由来平息他（她）的失望与不满。<br>◆以金钱为中心的人则看重加班费或加班对于老板调薪决策的影响，于是理直气壮地告诉配偶自己要加班，并理所当然地认为对方应该谅解，毕竟经济利益高于一切。<br>◆以工作为中心的人会觉得正中下怀，因为加班既可以让自己增加经验，又是一个很好的表现机会，有利晋升，所以不论是否需要，都会自动延长加班时间，并想当然地以为配偶会以此为荣，不会为爽约一事小题大做。<br>◆以名利为中心的人，会算计～下加班费能买到什么，或者考虑一下加班对个人形象有何助益，比如赢得一个为工作而牺牲自己的美誉。<br>◆以享乐为中心的人，即使配偶并不介意，也还是会撇下工作赴约，因为实在需要犒劳自己一下。</p></blockquote><blockquote><p>以原则为中心的人会保持冷静和客观，不受情绪或其他因素的干扰，综观全局——工作需要、家庭需要、其他相关因素以及不同决定的可能后果，深思熟虑后才做出正确的选择。</p></blockquote><h3 id="通过心灵演练确定原则的例子"><a href="#通过心灵演练确定原则的例子" class="headerlink" title="通过心灵演练确定原则的例子"></a>通过心灵演练确定原则的例子</h3><blockquote><p>我曾在大学课堂上做过类似实验，我对学生说：“假设你只剩下一学期的生命了，那么该如何把握这最后的学习机会呢？请想象自己将怎样度过这个学期。”<br>突然换了一种思路后，学生们发现了很多新的价值观。<br>我要求他们以一周的时间，以这个思路来检讨自己，并每天记下心得。<br>结果，有人开始给父母写信，表达对父母的爱心和赞美；有人则与感情不和的手足或朋友重归于好，所有这一切都发人深省。<br>学生们行动的中心和主导的原则都是爱心。一旦想到自己的生命只有短暂的几个月，吵架、仇恨、羞辱和责骂就都变得微不足道了，而原则和价值观却变得无比清晰。</p></blockquote><h3 id="家庭原则、企业原则等"><a href="#家庭原则、企业原则等" class="headerlink" title="家庭原则、企业原则等"></a>家庭原则、企业原则等</h3><blockquote><p>其实，每个家庭都有共同的价值观及理念，作为生活的重心，撰写家庭使命宣言正可加以凸显这个生活重心。家庭使命宣言有如宪法，可当作衡量一切利弊得失的标准，以及重大决定的依据，并使全家人团结在共同的目标下。</p></blockquote><blockquote><p>IBM主管时时不忘向员工强调该公司的三大原则：个人尊严、卓越与服务。<br>它们代表了IBM的信仰，因此不论世事如何变化，IBM从上到下的每一个人都始终信守这三大原则，无一例外。</p></blockquote><h2 id="习惯3：要事第一"><a href="#习惯3：要事第一" class="headerlink" title="习惯3：要事第一"></a>习惯3：要事第一</h2><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><blockquote><p>◆在你目前的生活中，有哪些事情能够彻底改观你的个人生活，但是你一直没有去做？<br>◆在你目前的生活中，有哪些事情能够彻底改观你的工作局面，但是你一直没有去做？</p></blockquote><h3 id="时间管理法"><a href="#时间管理法" class="headerlink" title="时间管理法"></a>时间管理法</h3><p>第一类事务：重要紧急<br>第二类事务：重要不紧急<br>第三类事务：不重要紧急<br>第四类事务：不重要不紧急</p><blockquote><p>我多年的心得是：如何分辨轻重缓急与培养组织能力，是时间管理的精髓。</p></blockquote><blockquote><p>与以往截然不同之处在于，它根本否定“时间管理”这个名词，主张关键不在于时间管理，而在于个人管理。与其着重于时间与事务的安排，不如把重心放在维持产出与产能的平衡上。</p></blockquote><blockquote><p>高效能人士总是避免陷入第三和第四类事务，因为不论是否紧迫，这些事情都是不重要的，他们还通过花费更多时间在第二类事务来减少第一类事务的数量。<br>第二类事务包括建立人际关系、撰写使命宣言、规划长期目标、防患于未然等等。人人都知道这些事很重要，却因尚未迫在眉睫，反而避重就轻。</p></blockquote><h3 id="授权，把任务分出去"><a href="#授权，把任务分出去" class="headerlink" title="授权，把任务分出去"></a>授权，把任务分出去</h3><blockquote><p>授权是提高效能或效能的秘诀之一，可惜一般人多吝于授权，总觉得不如靠自己更省时省事。<br>其实把责任分配给其他成熟老练的员工，才有余力从事更高层次的活动。因此，授权代表成长，不但是个人，也是团体的成长。<br>已故名企业家潘尼( J.C.Penney)曾表示，他这一生中最明智的决定就是“放手”。在发现独立难撑大局之后，他毅然决然授权让别人去做，结果造就了无数商店、个人的成长与发展。</p></blockquote><blockquote><p>预期成果双方都要明确并且完全理解最终想要的结果。要以“结果”，而不是以“方法”为中心。要投入时间，有耐心，详细地描述最终的结果。具体的日程，明确截止期限。<br>事先告知对方可能出现的难题与障碍，避免无谓的摸索，但是不要告诉他们要做什么。要让他们自己为最后的结果负责，明确指导方针，然后放手让他们去做。</p></blockquote><h2 id="习惯4：双赢思维——人际领导的原则"><a href="#习惯4：双赢思维——人际领导的原则" class="headerlink" title="习惯4：双赢思维——人际领导的原则"></a>习惯4：双赢思维——人际领导的原则</h2><h3 id="要么双赢，要么不做"><a href="#要么双赢，要么不做" class="headerlink" title="要么双赢，要么不做"></a>要么双赢，要么不做</h3><blockquote><p>在相互依赖的环境里，任何非双赢的解决方案都不是最好的，因为它们终将对长远的关系产生这样那样的不利影响，你必须慎重对待这些影响的代价。如果你无法同对方达成双赢的协议，那么最好选择放弃。<br>在家里，“不能双赢就干脆放弃”这个原则也能让大家感到轻松自由。如果在看什么电影的问题上僵持不下，那么不如放弃看电影，做些别的事情，总比这个夜晚有人欢喜有人愁的要好。</p></blockquote><h3 id="富足的心态"><a href="#富足的心态" class="headerlink" title="富足的心态"></a>富足的心态</h3><blockquote><p>富足的心态( Abundance Mentality)源自厚实的个人价值观与安全感。由于相信世间有足够的资源，人人得以分享，所以不怕与人共名声、共财势，从而开启无限的可能性，充分发挥创造力，并提供宽广的选择空间。<br>公众领域的成功的意思不是压倒旁人，而是通过成功的有效交往让所有参与者获利，大家一起工作，一起探讨，一起实现单枪匹马无法完成的理想，这种成功要以知足心态为基础。</p></blockquote><p>马云创建淘宝平台，一心帮商家致富；马化腾以产品经理的心态，最重视用户体验；百度重广告竞价，便是反例。想成功，先利人，后利己。</p><h2 id="习惯5：知彼解己——移情沟通的原则"><a href="#习惯5：知彼解己——移情沟通的原则" class="headerlink" title="习惯5：知彼解己——移情沟通的原则"></a>习惯5：知彼解己——移情沟通的原则</h2><h3 id="四种自传式回应"><a href="#四种自传式回应" class="headerlink" title="四种自传式回应"></a>四种自传式回应</h3><blockquote><p>我们在听别人讲话时总是会联系我们自己的经历，因此自以为是的人往往会有四种“自传式回应”( Autobiographical Response)的倾向：<br>价值判断——对旁人的意见只有接受或不接受。<br>追根究底——依自己的价值观探查别人的隐私。<br>好为人师——以自己的经验提供忠告。<br>自以为是——根据自己的行为与动机衡量别人的行为与动机。</p></blockquote><h3 id="父子沟通障碍的例子"><a href="#父子沟通障碍的例子" class="headerlink" title="父子沟通障碍的例子"></a>父子沟通障碍的例子</h3><blockquote><p>请看以下一对父子的谈话，先从父亲的角度来看：<br>子：“上学真是无聊透了。”<br>父：“怎么回事？”←追根究底<br>子：“学的都是些不实用的东西。”<br>父：“我当年也有同样的想法，可是现在觉得那些知识还挺有用的，你就忍耐一下吧。”←好为人师子：“我已经耗了10年了，难道那些X+Y能让我学会修车吗？”<br>父：“修车？别开玩笑了。” ←价值判断子：“我不是开玩笑，我的同学乔伊辍学修车，现在月收入不少，这才有用啊。”<br>父：“现在或许如此，以后他后悔就来不及了。你不会喜欢修车的。好好念书，将来不怕找不到更好的工作。”←好为人师子：“我不知道，可是乔伊现在很成功。”<br>父：“你已尽了全力吗？这所高中是名校，应该差不到哪儿去。”←好为人师、价值判断<br>子：“可是同学们都有同感。”<br>父：“你知不知道，把你养到这么大，你妈和我牺牲了多少？已经读到高二了，不许你半途而废。”←价值判断子：“我知道你们牺牲很大，可是不值得。”<br>父：“你应该多读书，少看电视——” ←好为人师、价值判断<br>子：“爸，唉——算了，多说也没什么用。”</p></blockquote><h3 id="有效的沟通方式"><a href="#有效的沟通方式" class="headerlink" title="有效的沟通方式"></a>有效的沟通方式</h3><blockquote><p>这个例子充分显示有效的沟通多么不易，了解他人又是多么重要。正确的沟通方式也就是移情聆听，至少包括四个阶段。<br>第一阶段是复述语句，这至少能使人专心聆听。<br>子：“上学真是无聊透了！”<br>父：“你已受不了了，觉得上学太无聊。”<br>第二阶段加入解释，纯用自己的词句表达，但仍用左脑的逻辑思考去理解。<br>父：“你不想上学了。<br>第三阶段渗入个人的感觉，右脑发挥作用。此时听者所注意的已不止于言语，也开始体会对方的心情。<br>父：“你觉得很有挫折感。”<br>第四阶段是既加以解释，又带有感情，左右脑并用。<br>父：“你对上学有很深的挫折感。”<br>运用第四阶段的方式沟通，不仅能了解对方，更能帮助对方认清自己，勇于表白。</p></blockquote><p>沟通时，多说”你“，少说”我“！</p><h3 id="父子成功沟通的例子"><a href="#父子成功沟通的例子" class="headerlink" title="父子成功沟通的例子"></a>父子成功沟通的例子</h3><blockquote><p>子：“上学真是无聊透了！”←我想引起注意，与人谈谈心事。<br>父：“你对上学有很深的挫折感。”←对，这正是我的感觉。<br>子：“没错，学校的东西根本不实用。”<br>父：“你觉得读书对你没什么用。”←想想看，我是那么说的吗？<br>子：“对，学校的不一定对我有用。你看乔伊，他现在修车技术一流，这才实用。”<br>父：“你觉得他的选择正确。”←嗯…，子：“嗯，从某个角度看确实如此。现在他收入不错，可是几年后，或许会后悔。<br>父：“你认为将来他会觉得当年做错了决定。”<br>子：“一定会的，现在的社会里，教育程度不高会吃亏的。”<br>父：“教育很重要。”<br>子：“对，如果高中都没毕业，一定找不到工作，也上不了大学。有件事——我真的很担心，你不会告诉妈吧？”<br>父：“你不想让你妈知道？”<br>子：“不是啦！跟她说也无妨，反正她迟早会知道的。今天学校举行阅读能力测验，结果我只有小学程度，可是我已经高二了！”<br>儿子终于吐露真言，原来他担心阅读程度不如人。此时才是父亲发挥影响力，提供意见的时刻。不过在开导过程中，依然要注意孩子言谈间所传达的信息。若是合理的反应不妨顺其自然，但情绪性反应出现时，必须仔细聆听。<br>父：“我有个构想，也许你可以上补习班加强阅读能力。”<br>子：“我已经打听过了，可是每星期要耗掉好几个晚上！”<br>父亲意识到这是情绪性反应，又恢复移情聆听。<br>子：“补习的代价太高了。”<br>子：“而且我答应同学，晚上另有节目。”<br>父：“你不想食言。”<br>子：“不过补习如果真的有效，我可以想办法跟同学改时间。<br>父：“你其实很想多下点功夫，又担心补习没用。<br>子：“你觉得会有效吗？”<br>孩子又恢复了理性，父亲则再次扮演导师的角色。</p></blockquote><h3 id="品德第一，感情第二，理性第三"><a href="#品德第一，感情第二，理性第三" class="headerlink" title="品德第一，感情第二，理性第三"></a>品德第一，感情第二，理性第三</h3><blockquote><p>古希腊人有一种很经典的哲学观点，即品德第一，感情第二，理性第三。我认为这三个词集中体现了让他人理解自己以及有效表达自己的精髓。<br>品德指的是你个人的可信度，是人们对你的诚信和能力的认可，是人们对你的信任，是你的情感账户。感情指的是你的移情能力，是感性的，说明你能通过交流迅速理解他人的情感。理性是你的逻辑能力，即合理表达自己的能力。<br>请注意这个顺序：品德、感情、理性。首先是你本身的品德，然后是你同他人的关系，最后是你表达自己的能力，这是另外一种重要的模式转换。多数人习惯直接用左脑逻辑表达自己，意图说服别人，却从来没把品德第一，感情第二放在心上。</p></blockquote><h2 id="习惯6：综合统效"><a href="#习惯6：综合统效" class="headerlink" title="习惯6：综合统效"></a>习惯6：综合统效</h2><h3 id="取长补短"><a href="#取长补短" class="headerlink" title="取长补短"></a>取长补短</h3><blockquote><p>假如两人意见相同，其中一人必属多余。与所见略同的人沟通，毫无益处，要有分歧才有收获。</p></blockquote><blockquote><p>流传于远东地区的一句哲言：“我们不应单纯地模仿大师的言行，而应该追求大师所追求的。”同样，我们不应该单纯地模仿，而应该创造。</p></blockquote><blockquote><p>统合综效的精髓就是判断和尊重差异，取长补短。男女和夫妻间的生理差异显而易见，那么社会、智力和情感方面的差异呢？不是也可以创造出新的生活形态和环境吗？</p></blockquote><h3 id="尊重差异"><a href="#尊重差异" class="headerlink" title="尊重差异"></a>尊重差异</h3><blockquote><p>与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。</p></blockquote><blockquote><p>自以为是的人总以为自己最客观，别人都有所偏颇，其实这才是画地为牢。反之，虚怀若谷的人承认自己有不足之处，而乐于在与人交往之中汲取丰富的知识见解，重视不同的意见，因而增广见闻。此所谓“三人行，必有我师焉”。</p></blockquote><p>综艺节目《奇葩说》的核心价值观。</p><h2 id="习惯7：不断更新"><a href="#习惯7：不断更新" class="headerlink" title="习惯7：不断更新"></a>习惯7：不断更新</h2><h3 id="投资自己"><a href="#投资自己" class="headerlink" title="投资自己"></a>投资自己</h3><blockquote><p>人生最值得的投资就是锻炼自己，因为生活与服务人群都得靠自已，这是最珍贵的工具。<br>工作本身并不能带来经济上的安全感，具备良好的思考、学习、创造与适应能力，才能利于不败之地。拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠。<br>微不足道的小事也会引发惊人的结果，每念及此，我就认为世上无小事。</p></blockquote><h3 id="兼顾四个方面"><a href="#兼顾四个方面" class="headerlink" title="兼顾四个方面"></a>兼顾四个方面</h3><blockquote><p>它从四个层面更新你的天性，那就是：身体、精神、智力、社会／情感。</p></blockquote><p>身体：锻炼身体；<br>精神：调节心态，处变不惊；<br>智力：读书，学习；<br>社会／情感：管理人际关系。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>典型的西式成功学，分门别类，刨根问底，创造出了一套知识体系。<br>跟西药一样，成分复杂，见效直接。</p><p>这些道理，国学中自然都有包含。只是我们的传统是点到为止，多靠体悟。<br>跟中药一样，材料简单，重在熬制。</p><p>以后愿多从厚重的国学经典中寻求修身处世之道。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高效能 七个习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Gulp自动构建环境</title>
      <link href="2018-gulp-4-14.html"/>
      <url>2018-gulp-4-14.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>perl设计者在著作programming perl中提到:</p><p>优秀的程序员具有三大美德: 懒惰 急躁 和傲慢 ( laziness,Impatience.and Hubris)。</p><p>恩，第一就是懒，我十分认同。重复性工作全都应该交由机器去做。</p><p>于是在前端项目中，Gulp这种自动构建工具就应运而生了。</p><p>gulp通过定义任务，能完成前端项目的自动预处理、生成、部署等，甚至连刷新浏览器都省了，做到了“所见即所得”。</p><p>于是程序员能专注于coding，保存代码即可见到结果。</p><p>真是懒到极致了。</p><p>下面总结下Gulp项目的搭建流程。</p><h2 id="什么是Gulp"><a href="#什么是Gulp" class="headerlink" title="什么是Gulp"></a>什么是Gulp</h2><blockquote><p>Gulp是一个自动化工具，前端开发者可以使用它来处理常见任务：</p><ul><li>搭建web服务器</li><li>文件保存时自动重载浏览器</li><li>使用预处理器如Sass、LESS</li><li>优化资源，比如压缩CSS、JavaScript、压缩图片<br>当然Gulp能做的远不止这些。如果你够疯狂，你甚至可以使用它搭建一个静态页面生成器。Gulp真的足够强大，但你必须学会驾驭它。</li></ul></blockquote><a id="more"></a><h2 id="安装gulp模块"><a href="#安装gulp模块" class="headerlink" title="安装gulp模块"></a>安装gulp模块</h2><p>使用npm安装gulp，以便以后能在终端使用gulp命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cnpm install gulp -g</span></span><br></pre></td></tr></table></figure></p><p>tip：安装淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm，提高模块下载速度：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install -g cnpm --registry=https:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</span><br></pre></td></tr></table></figure></p><h2 id="创建gulp项目"><a href="#创建gulp项目" class="headerlink" title="创建gulp项目"></a>创建gulp项目</h2><h3 id="创建package-json文件："><a href="#创建package-json文件：" class="headerlink" title="创建package.json文件："></a>创建package.json文件：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init</span></span><br></pre></td></tr></table></figure><p>在 package.json 文件中指定项目依赖的包，以后可使用 npm install 命令一次性下载这些依赖包。<br>关于package.json详见：<a href="https://blog.csdn.net/u011240877/article/details/76582670" target="_blank" rel="noopener">https://blog.csdn.net/u011240877/article/details/76582670</a></p><h3 id="局部安装Gulp模块："><a href="#局部安装Gulp模块：" class="headerlink" title="局部安装Gulp模块："></a>局部安装Gulp模块：</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install gulp --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>dependencies就是你程序运行需要的模块，没有这个模块你程序就会报错。<br>devDependencies是开发的时候需要的模块。<br>举个例子，你用angularjs框架开发一个程序，开发阶段需要用到gulp来构建你的开发和本地运行环境。所以angularjs一定要放到dependencies里，因为以后程序到生产环境也要用。gulp则是你用来压缩代码，打包等需要的工具，程序实际运行的时候并不需要，所以放到dev里就ok了。</p><h3 id="创建gulpfile-js"><a href="#创建gulpfile-js" class="headerlink" title="创建gulpfile.js"></a>创建gulpfile.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); <span class="comment">//使用本地gulp模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务模块</span></span><br><span class="line">gulp.task(<span class="string">'hi'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>命令行执行：<code>$ gulp hello</code>，能看到：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">20</span>:<span class="number">24</span>:<span class="number">28</span>] <span class="symbol">Starting</span> <span class="string">'hi'</span>...</span><br><span class="line">hello</span><br><span class="line">[<span class="number">20</span>:<span class="number">24</span>:<span class="number">28</span>] <span class="symbol">Finished</span> <span class="string">'hi'</span> after <span class="number">178</span> μ</span><br></pre></td></tr></table></figure></p><h3 id="写gulp任务"><a href="#写gulp任务" class="headerlink" title="写gulp任务"></a>写gulp任务</h3><p>一般任务长这样：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'task-name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'source-files'</span>) <span class="comment">// Get source files with gulp.src</span></span><br><span class="line">    .pipe(aGulpPlugin()) <span class="comment">// Sends it through a gulp plugin</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'destination'</span>)) <span class="comment">// Outputs the file in the destination folder</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>src输入源文件，pipe到插件处理后，输出到dest。</p><p>自动处理jade的任务：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jade = <span class="built_in">require</span>(<span class="string">'gulp-jade'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'templates'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  gulp.src(<span class="string">'/src/*.jade'</span>)</span><br><span class="line">    .pipe(jade(&#123;</span><br><span class="line">      pretty: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>pretty:true</code> 意思是对输出的html排版。不做设置的话，默认压缩html。</p><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>监视文件变动代码如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.watch</span>(<span class="string">'files-to-watch'</span>, [<span class="string">'tasks'</span>, <span class="string">'to'</span>, <span class="string">'run'</span>]);</span><br></pre></td></tr></table></figure></p><p>或者使用通配符：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **/*表示任意文件夹下的任意文件</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.watch</span>(<span class="string">'app/scss/**/*.scss'</span>, [<span class="string">'sass'</span>]);</span><br></pre></td></tr></table></figure></p><p>或者使用任务同时监听多组文件：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  gulp.watch(<span class="string">'app/scss/**/*.scss'</span>, [<span class="string">'sass'</span>]);</span><br><span class="line">  <span class="comment">// Other watchers</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用livereload插件自动刷新浏览器"><a href="#使用livereload插件自动刷新浏览器" class="headerlink" title="使用livereload插件自动刷新浏览器"></a>使用livereload插件自动刷新浏览器</h3><p>以监视html文件为例，一旦有变动，自动生成并刷新浏览器。</p><h4 id="本地安装gulp-livereload"><a href="#本地安装gulp-livereload" class="headerlink" title="本地安装gulp-livereload"></a>本地安装gulp-livereload</h4><p><code>cnpm install gulp-livereload --save-dev</code></p><h4 id="添加gulp任务"><a href="#添加gulp任务" class="headerlink" title="添加gulp任务"></a>添加gulp任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</span><br><span class="line"> </span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    livereload.listen();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监视src文件夹下所有文件</span></span><br><span class="line">    gulp.watch(<span class="string">'src/*.*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;  </span><br><span class="line">        livereload.changed(event.path);  </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="安装浏览器插件"><a href="#安装浏览器插件" class="headerlink" title="安装浏览器插件"></a>安装浏览器插件</h4><p>安装chrome的livereload插件，可下载crx文件直接拖入浏览器安装。</p><h4 id="以服务器方式打开页面"><a href="#以服务器方式打开页面" class="headerlink" title="以服务器方式打开页面"></a>以服务器方式打开页面</h4><p>加载本地html文件无法触发livereload，必须以服务器方式加载。</p><p>这里使用node的超轻量级web服务器http-server。</p><p>安装http-server：<code>cnpm install http-server -g</code></p><p>在html所在文件夹执行：<code>$ http-server</code>。</p><p>此时便能在<a href="http://localhost:8080/访问到页面。" target="_blank" rel="noopener">http://localhost:8080/访问到页面。</a></p><h4 id="运行livereload"><a href="#运行livereload" class="headerlink" title="运行livereload"></a>运行livereload</h4><p>1、执行gulp任务：<code>$ gulp watch</code></p><p>2、点击Chrome地址栏右边livereload按钮变成实心圈，即为启用。</p><p>此时修改文件，浏览器即可自动刷新。</p><h3 id="gulp-jade-livereload完整例子"><a href="#gulp-jade-livereload完整例子" class="headerlink" title="gulp + jade + livereload完整例子"></a>gulp + jade + livereload完整例子</h3><p>gulpfile.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">  livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</span><br><span class="line">  jade = <span class="built_in">require</span>(<span class="string">'gulp-jade'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  livereload.listen();</span><br><span class="line">  gulp.watch(<span class="string">'src/*.*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;  </span><br><span class="line">    livereload.changed(event.path);  </span><br><span class="line">  &#125;);  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//监视jade文件修改，执行jade任务</span></span><br><span class="line">  gulp.watch(<span class="string">'src/*.jade'</span>, [<span class="string">'jade'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'jade'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/*.jade'</span>)</span><br><span class="line">  .pipe(jade(</span><br><span class="line">    &#123;<span class="attr">pretty</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    ))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'dist/'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure></p><p>输入不带参数的命令：<code>$ gulp</code>，自动执行default任务。</p><p>实现自动处理jade，并自动刷新浏览器。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/Tom-yi/p/8036730.html" target="_blank" rel="noopener">https://www.cnblogs.com/Tom-yi/p/8036730.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客</title>
      <link href="2018-hexo-4-14.html"/>
      <url>2018-hexo-4-14.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在简书写过学习笔记。但技术博客嘛，还是自己搭一个比较有逼格。</p><p>博客是一些静态网页，所以GitHub提供免费的git pages就能胜任。</p><p>但从头搭建一个功能丰富的博客很是麻烦。比如实现常用侧边栏的分类、标签功能等就够喝一壶了。</p><p>于是需要自动构建博客框架的工具，就能从配置、生成等杂活中解放出来，把重点放在写上。</p><p>常见的工具有hexo、jekyll等。本文使用hexo+next主题。</p><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>安装Hexo：<code>$ npm install -g hexo-cli</code></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>在_config.yml中配置网站。本文将主题配置为Next（需要下载）。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><h4 id="新建文章："><a href="#新建文章：" class="headerlink" title="新建文章："></a>新建文章：</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;  <span class="comment">//layout默认为 post</span></span><br></pre></td></tr></table></figure><h4 id="新建草稿："><a href="#新建草稿：" class="headerlink" title="新建草稿："></a>新建草稿：</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> draft &lt;<span class="built_in">title</span>&gt;  <span class="comment">//创建草稿</span></span><br><span class="line">$ hexo publish [layout] &lt;<span class="built_in">title</span>&gt; <span class="comment">//发布草稿</span></span><br></pre></td></tr></table></figure><h4 id="设置分类和标签："><a href="#设置分类和标签：" class="headerlink" title="设置分类和标签："></a>设置分类和标签：</h4><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。<br>分类和标签可以在 Front-matter 中设置：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure></p><h4 id="设置文章摘要“查看更多”（Next主题适用）："><a href="#设置文章摘要“查看更多”（Next主题适用）：" class="headerlink" title="设置文章摘要“查看更多”（Next主题适用）："></a>设置文章摘要“查看更多”（Next主题适用）：</h4><p>在文中使用&lt;– more –&gt;分隔，或者在front-matter中配置description。</p><h4 id="生成、发布："><a href="#生成、发布：" class="headerlink" title="生成、发布："></a>生成、发布：</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">// 生成网页</span></span><br><span class="line">hexo d <span class="comment">// 部署网站，在_config.yml中配置过后可以自动部署到git上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面两个命令可以简写为:</span></span><br><span class="line"><span class="symbol">$</span> hexo g -d</span><br><span class="line"><span class="symbol">$</span> hexo d -g</span><br></pre></td></tr></table></figure><h4 id="本地测试："><a href="#本地测试：" class="headerlink" title="本地测试："></a>本地测试：</h4><p>可本地启动服务器，测试网站：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure></p><p>启动服务器后，会监视文件变动并自动更新，刷新浏览器即可看到变化。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a><br>hexo常用命令笔记：<a href="https://blog.csdn.net/qq_26975307/article/details/62447489" target="_blank" rel="noopener">https://blog.csdn.net/qq_26975307/article/details/62447489</a><br>next官方文档：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
            <tag> gitpage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好哇，博客</title>
      <link href="2018-first.html"/>
      <url>2018-first.html</url>
      
        <content type="html"><![CDATA[<h2 id="Jinsane的个人主页"><a href="#Jinsane的个人主页" class="headerlink" title="Jinsane的个人主页"></a>Jinsane的个人主页</h2><p>终于差不多啦!用Hexo自动生成的网页，next主题。</p><p>在这里写学习笔记。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java投票网站初版</title>
      <link href="2018-java-web-3-18.html"/>
      <url>2018-java-web-3-18.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>搭好<a href="https://www.jianshu.com/p/c68fd9fe4ead" target="_blank" rel="noopener">Spring+SpringMVC+Hibernate实现投票/调查问卷网站</a>的架子后，本想去尝试下其它东西，好在家腾君表示要把它完善下，能真正投入使用。<br>这才发现，还有太多东西要做，还有太多坑没踩。年后至今，三周过去了，终于合作完成了能凑合用的版本。家腾君表示：“吹了一年的牛B，终于能交差了。”</p></blockquote><p>完善后的投票网站，目前效果如下：</p><h3 id="1-前端（用户界面）"><a href="#1-前端（用户界面）" class="headerlink" title="1. 前端（用户界面）"></a>1. 前端（用户界面）</h3><p>1.1 打开首页，点击进入投票页面。加了些jQuery美化插件：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWVkN2QzM2FlODc1YjRjZGQuZ2lm" alt="ios视觉差效果（飞机在飞有木有）"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTI3MjkwOWQwYmU3YjdhNTguZ2lm" alt="粒子效果"></p><p>1.2 侧边导航：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWJlOWQwNWZlYzM2MDBmMGQuZ2lm" alt="导航栏"></p><p>1.3 辅助填表，一键全优：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWJhMzVlMzZmM2U1YjllNDMuZ2lm" alt="一键全优"></p><p>1.4 表单验证。用户点击提交按钮后，检查答题情况，提示用户：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWRhODJmYzA5ZmI5ZTZiMzMucG5n?x-oss-process=image/format,png" alt="提示未完成题目"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWE1YTEzMTJiNTQyNGEyNjQucG5n?x-oss-process=image/format,png" alt="提示用户投票是否有效"></p><p>1.5 防止重复投票（可由后台管理员开放）。完成一次投票后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTUzZDQ5ZTNiOTUyYzQ5YWYucG5n?x-oss-process=image/format,png" alt="投票成功"><br>再次投票会提示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTQ5NmM4NjMyZDM2ODBhZjIucG5n?x-oss-process=image/format,png" alt="投票失败"></p><h3 id="2-后端（管理员界面）"><a href="#2-后端（管理员界面）" class="headerlink" title="2. 后端（管理员界面）"></a>2. 后端（管理员界面）</h3><p>2.1 输入密码，登录后台：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWE5M2M3MzY0NjQyZmJkNjIucG5n?x-oss-process=image/format,png" alt="登录界面"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWI1NzVkYTM4MGMwY2E0YTIucG5n?x-oss-process=image/format,png" alt="管理员界面"></p><p>2.2 功能区如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTFmYmU0ZTEyNDZjNTUwNDkucG5n?x-oss-process=image/format,png" alt="功能区"></p><ul><li>每2s实时更新投票情况。</li><li>“开放投票”按钮会刷新本轮投票情况，去除“无法重复投票”状态；</li><li>“无限投票”开关打开时，永不限制重复投票；</li><li>“下载文件”按钮会将结果导出为word文档，压缩为zip文件，提供下载；</li><li>“过滤废票”开关打开后，会按规则去除无效票，改变统计结果。</li></ul><p>2.3 点击人名，查看结果。如果打开“过滤废票”开关，会显示去除废票后的结果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWI1ZGFlY2M5MjAyZGMwMDMucG5n?x-oss-process=image/format,png" alt="查看详细结果"></p><p>2.4 下载结果。如果打开“过滤废票”开关，会得到去除废票后的结果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWZmYTFmOTg5YzViYzBlYmYucG5n?x-oss-process=image/format,png" alt="下载得到“测评结果.zip”文件"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTVjYzQ3ZjNiMjMxNzljOTkucG5n?x-oss-process=image/format,png" alt="解压得到按部门分类目录结构"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTAxYTljMzg4NDY4ZDM5Y2IucG5n?x-oss-process=image/format,png" alt="得到自动生成的word文件xxx.doc"></p><p>以上。</p><p>几乎全是“面向搜索引擎”的编程。后面会继续完善，慢慢总结所用知识。<br>项目源码：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fzhang35%2FQuizWeb.git" target="_blank" rel="noopener">https://github.com/zhang35/QuizWeb.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring+SpringMVC+Hibernate实现投票/调查问卷网站</title>
      <link href="2018-java-web-2-11.html"/>
      <url>2018-java-web-2-11.html</url>
      
        <content type="html"><![CDATA[<p>使用SSH架构（Spring+SpringMVC+Hibernate）实现了简单的调查问卷网站。最终效果如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyNDA2NjQtMjQ2OTViZDhlZDFkMGZmMy5wbmc?x-oss-process=image/format,png" alt="投票页面"><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyNDA2NjQtZDA2ZjIyMjEzNTAwOGEwZS5wbmc?x-oss-process=image/format,png" alt="查看结果页面"></p><p>下面整理实现流程。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="1-SSH架构"><a href="#1-SSH架构" class="headerlink" title="1.SSH架构"></a>1.SSH架构</h4><p>SSH是<a href="https://baike.baidu.com/item/MVC" target="_blank" rel="noopener">MVC</a>架构的一种实现。</p><p>Spring、SpringMVC、Hibernate各自用处分别是：</p><ul><li>Hibernate方便了对数据库的操作。一个对象映射一个表，省去了写SQL语句的繁琐，完成<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96" target="_blank" rel="noopener">数据持久化</a>的任务。</li><li>Spring方便了对象的创建和相互关联。比如网站启动时想要初始化的一些对象，可交给Spring管理。</li><li>SpringMVC实现了MVC架构，使得结构清晰、分工明确。</li></ul><p>（Spring和SpringMVC区别：Spring是IOC和AOP的容器框架，参考：<a href="http://blog.csdn.net/eson_15/article/details/51090040" target="_blank" rel="noopener">谈谈Spring中的IOC和AOP概念</a>）；SpringMVC是基于Spring实现的MVC Web框架）。</p><h4 id="2-Maven"><a href="#2-Maven" class="headerlink" title="2.Maven"></a>2.Maven</h4><p>Maven是一个项目管理工具，有一套标准的工程结构。其核心配置文件是pom.xml，描述了项目信息，依赖关系等。</p><p>由于Java项目中需要引入各种jar包，还存在版本差异，把这些依赖关系在pom.xml里面描述，maven就会自动从本地或远程仓库寻找依赖，不用再去一个个下载、拷贝jar包了。</p><p>例如，想引入springmvc框架，就在pom.xml中加入如下配置：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span></span></span></span><br></pre></td></tr></table></figure></p><h4 id="3-代码结构"><a href="#3-代码结构" class="headerlink" title="3.代码结构"></a>3.代码结构</h4><p>Java源码包含Model、DAO、Service、Controller四个包，其中：</p><ul><li>Model：存放数据模型</li><li>DAO：实现直接操作Model的接口及方法，比如实现getPerson()</li><li>Service：使用DAO提供的接口，实现项目需要用到的功能，比如实现getAllPersons()</li><li>Controller：使用Service提供的功能，实现数据分发及页面展示。</li></ul><p>工程结构如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyNDA2NjQtMmJkNGEzNTExMmM2N2RiNC5wbmc?x-oss-process=image/format,png" alt="工程结构"><br>项目源码：<a href="https://github.com/zhang35/QuizWeb.git" target="_blank" rel="noopener">https://github.com/zhang35/QuizWeb.git</a></p><hr><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>集成开发环境（IDE）：IntelliJ IDEA 2017.3.2<br>本地服务器：Tomcat 9.0.2<br>数据库： MySQL 5.7<br>项目管理：Maven<br>操作系统：MacOS</p><hr><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ul><li><p>如何使用IDEA创建web工程，参考：<br><a href="http://www.cnblogs.com/carsonzhu/p/5468223.html" target="_blank" rel="noopener">使用IntelliJ IDEA开发java web</a></p></li><li><p>如何使用IDEA配置maven仓库，加快加载依赖包的速度，参考：<br><a href="http://www.cnblogs.com/sword-successful/p/6408281.html" target="_blank" rel="noopener">IDEA配置maven(配置阿里云中央仓库)</a></p></li></ul><h3 id="2-搭建SSH项目"><a href="#2-搭建SSH项目" class="headerlink" title="2. 搭建SSH项目"></a>2. 搭建SSH项目</h3><ul><li>如何在IntelliJ与Maven的环境下搭建Spring+SpringMVC+Hibernate项目，参考：<br><a href="http://blog.csdn.net/haluoluo211/article/details/52225074" target="_blank" rel="noopener">Spring-SpringMVC-Hibernate在IntelliJ与Maven的环境下搭建</a></li></ul><h3 id="3-实现投票功能"><a href="#3-实现投票功能" class="headerlink" title="3. 实现投票功能"></a>3. 实现投票功能</h3><p>从操作流程出发，实现思路是：</p><h4 id="3-1-输入网址进入投票界面。（SpringMVC控制网址-gt-页面的映射）"><a href="#3-1-输入网址进入投票界面。（SpringMVC控制网址-gt-页面的映射）" class="headerlink" title="3.1 输入网址进入投票界面。（SpringMVC控制网址-&gt;页面的映射）"></a>3.1 输入网址进入投票界面。（SpringMVC控制网址-&gt;页面的映射）</h4><p>3.1.1 在web.xml中配置SpringMVC使之生效，web.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.1.2 在SpringMVC的配置文件servletname-servlet.xml中配置地址过滤规则，spring-dispatcher-servlet.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"web.quiz.controller"</span> /&gt;</span><span class="comment">&lt;!-- 要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解析网址，加前缀后缀，比如输入index时定位到/WEB-INF/jsp/index.jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不拦截静态资源，保证对js、css、jpg等的正常访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.1.3 最后，在Controller中控制页面分发，QuizController.java：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = <span class="meta-string">"vote"</span>, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String index() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"vote"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>####3.2 获取问卷内容。（Hibernate+Spring从数据库中读取问卷信息，发送到前端页面）<br>3.2.1 首先使用Hibernate关联对象与数据库。Hibernate有配置xml和注解两种实现方式，本文使用注解。Person.java：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@javax.persistence.Entity注解一个实体Bean。数据表中的行对应实例，列对应实例的属性</span></span><br><span class="line">    <span class="meta">@Entity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="meta">@Id</span>   <span class="comment">//必须使用 @javax.persistence.Id 注解一个主键；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> id;             <span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;            <span class="comment">//姓名</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.2.2 然后实现相应的DAO接口。PersonDAO.java、PersonDAOImpl.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDAO</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Repository</span> <span class="comment">//@Repository用于标注数据访问组件，即DAO组件；</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDAOImpl</span> <span class="keyword">implements</span> <span class="title">PersonDAO</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span> <span class="comment">//@Autowired可以对成员变量、方法和构造函数进行标注，来完成自动装配。默认按照类型进行装配。</span></span><br><span class="line">  <span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Person.class);</span><br><span class="line">        <span class="keyword">return</span> criteria.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2.3 PersonDAOImpl中要用的sessionFactory怎么来？什么是SessionFactory：</p><blockquote><p>SessionFactory接口负责初始化Hibernate。SessionFactory并不是轻量级的，因为一般情况下，一个项目通常只需要一个SessionFactory就够。</p></blockquote><p>所以把SessionFactory放在Web初始化时候生成，使用Spring实现其自动装配。</p><p>首先在web.xml中配置Spring：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:/META-INF/applicationContext.xml,</span><br><span class="line">        classpath:/META-INF/spring-jdbc.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在Spring配置文件中配置Hibernate，spring-jdbc.xml：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--自定义的hibernate.properties文件,下面$</span></span><span class="template-variable">&#123;XXX&#125;</span><span class="xml"><span class="comment">的内容来源--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:/META-INF/properties/hibernate.properties"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用C3P0数据源，MySQL数据库 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span></span><br><span class="line"><span class="xml">      destroy-method="close"&gt;</span></span><br><span class="line"><span class="xml">       <span class="comment">&lt;!-- MySQL5 --&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;driverClassName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span></span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- session工厂 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span></span><br><span class="line"><span class="xml">      class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"web.quiz.model"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">props</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>$</span><span class="template-variable">&#123;hibernate.hbm2ddl.auto&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>$</span><span class="template-variable">&#123;hibernate.dialect&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>$</span><span class="template-variable">&#123;hibernate.show_sql&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>$</span><span class="template-variable">&#123;hibernate.format_sql&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!--hibernate的事务管理器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span></span><br><span class="line"><span class="xml">      class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>在Spring的默认配置文件applicationContext.xml中配置扫描的包。这些包中有Spring注解为@Component的类，在使用注解配置的情况下，系统启动时会被自动扫描，并添加到bean工厂中去（省去了配置文件中写bean定义了）。applicationContext.xml：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   &lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"web.quiz.service"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"web.quiz.DAO"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>至此，PersonDAOImpl中有了可用的sessionFactory，它的功能也能尽数实现了，如3.2.2中所示。</p><p>3.2.4 此时有了PersonDAO的实现，进一步封装成可直接用的服务。DBService.java 、DBServiceImpl.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">loadPersons</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">//@Service用于标注业务层组件</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//@Transactional 可以作用于接口、接口方法、类以及类方法上。赋予其事务属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBServiceImpl</span> <span class="keyword">implements</span> <span class="title">DBService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonDAO personDAO;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">loadPersons</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personDAO.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，读写数据的功能有了。可以在Controller中调用服务读数据，QuizController.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuizController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>  <span class="comment">//与@Autowired等效，是JDK支持的注解，默认按照名称进行装配</span></span><br><span class="line">    <span class="keyword">private</span> DBService dbService;</span><br><span class="line">    <span class="meta">@PostConstruct</span>  <span class="comment">//使用@PostConstruct注释初始化方法。在Controller中，用@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器调用一次。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initQuiz</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.persons = dbService.loadPersons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2.5 把读取的内容发给前端JSP页面。本文使用了两种方法，一是传json回去，二是直接传对象回去。</p><p><strong>方法一</strong>：传json到前端，用拼接字符串的方式生成页面。这种方法很笨，当时知识面太窄。不过用json传数据在做数据可视化时比较方便，所以也保留了这些代码。QuizController.java：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/loadPaper"</span>, method = RequestMethod.GET)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">byte</span>[] loadPaper() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       String jsonString = objectMapper.writeValueAsString(<span class="keyword">this</span>.quiz);</span><br><span class="line">       <span class="keyword">byte</span>[] b = jsonString.getBytes(<span class="string">"UTF-8"</span>);        <span class="comment">//解决传到前端后中文乱码问题</span></span><br><span class="line">       <span class="keyword">return</span> b;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>在前端用js解析json，生成页面。问卷页面vote.jsp：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $.getJSON(<span class="string">"loadPaper"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  <span class="comment">//获取问卷数据quiz,放入data中</span></span><br><span class="line">                <span class="keyword">var</span> names = data.names;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; names.length; i++)&#123;</span><br><span class="line">                      <span class="keyword">var</span> testDiv = <span class="string">'&lt;div class="test"&gt;'</span> + <span class="string">'&lt;p class="name"&gt;'</span> + (i+<span class="number">1</span>) + <span class="string">".&amp;nbsp"</span> + names[i] + <span class="string">'：&lt;/p&gt;'</span>;</span><br><span class="line">                      ...</span><br><span class="line">                      $(<span class="string">"form"</span>).append(testDiv);</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure></p><p><strong>方法二</strong>：借助ModelAndView对象，直接传对象到前端。配合JSP的特点，比较优雅高效。QuizController.java中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在方法的参数列表中添加形参 ModelMap map, spring 会自动创建ModelMap对象。</span></span><br><span class="line"><span class="comment">//然后调用map的put(key,value)或者addAttribute(key,value)将数据放入map中，spring会自动将数据存入request。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">check</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelMap model)</span></span>&#123;</span><br><span class="line">  model.addAttribute(<span class="string">"persons"</span>, persons);  <span class="comment">//添加名为persons的对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"result"</span>);   <span class="comment">//返回页面result.jsp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在前端使用JSTL &lt;c:forEach&gt;和EL表达式循环生成表格。显示成绩页面result.jsp：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;persons&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"person"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;person.id&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;person.id&#125;</span><span class="xml"><span class="tag"><span class="string">/detail"</span>&gt;</span>$</span><span class="template-variable">&#123;person.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--REST风格--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;person.department&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>（注意：使用EL表达式时，需加入&lt;%@page isELIgnored=”false” %&gt;）</p><p>这里把每个人名作为一个超链接，点进去显示其测评结果。${person.id}/detail会变成如1/detail这样的地址。该地址在QuizController.java中这么解析：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = <span class="string">"/&#123;id&#125;/detail"</span>, method = RequestMethod.GET)</span><br><span class="line">    public ModelAndView detail(HttpServletRequest request, ModelMap model, @PathVariable String <span class="built_in">id</span>) &#123;</span><br><span class="line">        Result <span class="literal">result</span> = dbService.getResultByID(<span class="built_in">id</span>);</span><br><span class="line">        String <span class="built_in">name</span> = <span class="literal">result</span>.getName();</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, <span class="built_in">name</span>);</span><br><span class="line"><span class="built_in">        return</span> new ModelAndView(<span class="string">"detail"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.2.6 扩展知识<br>上述传参方式叫REST( Representational State Transfer)风格。<br>关于SpringMVC应用REST风格，参考：<a href="https://www.baidu.com/link?url=d-Rg_gxkKlAH95hnCYk2_m7EqFvgBpt9a3ZiWCFLgiN0fTCCqs4KH0dAW0MI8b0_MdvigqzLJSI0ysAufrE0uK&amp;wd=&amp;eqid=b83da03c00046a25000000025a67d318" target="_blank" rel="noopener">Spring MVC 实现增删改查 - CSDN博客</a><br>关于其它URL传参方式，参考： <a href="http://www.cnblogs.com/wangchuanfu/p/5913310.html" target="_blank" rel="noopener">SpringMVC之@RequestParam @PathVariable对比</a><br>关于SpringMVC中各种常用传值方法，参考：<a href="http://blog.csdn.net/sunshine__me/article/details/49494545" target="_blank" rel="noopener">springMVC 将controller中数据传递到jsp页面</a></p><h4 id="3-3-填写问卷，点提交。-Controller接收前端表单，结果写入数据库"><a href="#3-3-填写问卷，点提交。-Controller接收前端表单，结果写入数据库" class="headerlink" title="3.3 填写问卷，点提交。(Controller接收前端表单，结果写入数据库)"></a>3.3 填写问卷，点提交。(Controller接收前端表单，结果写入数据库)</h4><p>主要是前端传值到后端的问题。<br>在vote.jsp中：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=<span class="string">"<span class="keyword">POST</span>"</span> action=<span class="string">"submit"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>在QuizController.java中：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = <span class="string">"/submit"</span>, method = RequestMethod.POST)</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">String</span> submit(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">       Enumeration&lt;<span class="built_in">String</span>&gt; enu = request.getParameterNames();        <span class="comment">//获得表单中所有值</span></span><br><span class="line">       <span class="keyword">while</span> (enu.hasMoreElements()) &#123;</span><br><span class="line">           <span class="built_in">String</span> paraName = (<span class="built_in">String</span>) enu.nextElement();</span><br><span class="line">           <span class="built_in">String</span> value = request.getParameter(paraName);   <span class="comment">//按照表单中的顺序，一个个接收值</span></span><br><span class="line">           <span class="params">...</span></span><br><span class="line">           dbService.saveOrUpdateResult(result); <span class="comment">//将成绩写入数据库中</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-4-管理员登录，查看结果。-身份验证后，JSP展示结果"><a href="#3-4-管理员登录，查看结果。-身份验证后，JSP展示结果" class="headerlink" title="3.4 管理员登录，查看结果。(身份验证后，JSP展示结果)"></a>3.4 管理员登录，查看结果。(身份验证后，JSP展示结果)</h4><p>提供管理员登录页面login.jsp，登录后进入参评人列表页面result.jsp；点击参评人超链接，进入详细成绩页面detail.jsp，统计分析个人得票结果。</p><p>到这里已经没有什么难度，不再写了。</p><hr><h2 id="一点心得"><a href="#一点心得" class="headerlink" title="一点心得"></a>一点心得</h2><h3 id="1-hibernate如何将数组成员对应到数据库"><a href="#1-hibernate如何将数组成员对应到数据库" class="headerlink" title="1. hibernate如何将数组成员对应到数据库"></a>1. hibernate如何将数组成员对应到数据库</h3><p>对于Question对象，成员id、title都能自动对应数据库中表的一列，而options作为一个List就带来很多麻烦。</p><p><strong>解决方法：把List<string>拼接成一个String保存</string></strong>，当使用时，按照约定规则拆分即可：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] <span class="keyword">options</span> = questions[i].<span class="keyword">options</span>.split(<span class="string">"#"</span>); <span class="comment">//自行约定，这里用#分隔字符</span></span><br></pre></td></tr></table></figure></p><p>成员变为：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> options;</span><br></pre></td></tr></table></figure></p><p>完美！</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>终于搭好Java SSH这个架子，实现了基本功能，但不想再继续写了。Web技术迭代太快，后面去尝试下其它技术。</p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
