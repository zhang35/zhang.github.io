<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker搭建mysql环境</title>
      <link href="2020-Docker/docker-mysql.html"/>
      <url>2020-Docker/docker-mysql.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br><span class="line">docker <span class="built_in">exec</span> -it mysql bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】Flask-SQLAlchemy使用方法</title>
      <link href="2020-Python/Flask-SQLAlchemy%E7%9A%84%E5%A2%9E%EF%BC%8C%E5%88%A0%EF%BC%8C%E6%94%B9%EF%BC%8C%E6%9F%A5.html"/>
      <url>2020-Python/Flask-SQLAlchemy%E7%9A%84%E5%A2%9E%EF%BC%8C%E5%88%A0%EF%BC%8C%E6%94%B9%EF%BC%8C%E6%9F%A5.html</url>
      
        <content type="html"><![CDATA[<p>作者：Dozing<br>链接：<a href="https://www.jianshu.com/p/b729e84fae4f" target="_blank" rel="noopener">https://www.jianshu.com/p/b729e84fae4f</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="Flask-SQLAlchemy的使用："><a href="#Flask-SQLAlchemy的使用：" class="headerlink" title="Flask-SQLAlchemy的使用："></a>Flask-SQLAlchemy的使用：</h3><p><strong>ORM的好处：可以让我们操作数据库跟操作对象是一样的，非常方便，因为一个表就抽象成一个类，一条数据就抽象成该类的一个对象</strong></p><p>1.初始化和设置数据库配置信息</p><ul><li><p>使用flask_sqlalchemy中的SQLAlchemy进行初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app) <span class="comment"># 通过类`SQLAlchemy`来连接数据库</span></span><br></pre></td></tr></table></figure></li><li><p>设置配置信息：在<code>config.py</code>文件中添加以下的配置信息：</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DB_URI = <span class="string">'mysql+mysqldb://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;.format(USERNAME，PASSWORD，HOSTNAME，PORT，DATABASE)'</span></span><br><span class="line"><span class="comment"># 创建数据库引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br></pre></td></tr></table></figure><p>  首先从sqlalchemy中导入<code>create_engine</code>,用这个函数来创建引擎，然后用<code>engine.connect()</code>来连接数据库，其中一个比较重要的点是，通过create_engine函数的时候，需要传递一个满足某种<strong>格式</strong>的字符串，对这个字符串的格式来进行解释：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialect+driver:<span class="comment">//username:password@host:port/database</span></span><br></pre></td></tr></table></figure><p>  dialect是数据库的实现，比如MySQL,PostgreSQL,SQLite,并且转换为小写，driver是python对应的驱动，如果不指定，会选择默认的驱动，比如MySQL的默认驱动是Mysqldb,username是数据库的用户名，password是连接数据库的密码，host是连接数据的域名，port是数据库监听的端口号，database是连接哪个数据库的名字。</p><ul><li>在主<code>app</code>文件中，添加配置文件：</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><ul><li>测试，看有没有问题：</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p>  如果没有报错，说明配置没有问题，如果有错误，可以根据错误进行修改</p><p><strong>Python语言不像Java, C,C++会有<code>main()</code>函数，Python是脚本语言，只会由上往下执行。</strong></p><h3 id="Flask-SQLAlchemy的使用"><a href="#Flask-SQLAlchemy的使用" class="headerlink" title="Flask-SQLAlchemy的使用"></a>Flask-SQLAlchemy的使用</h3><ol><li>初始化和设置数据库配置信息</li></ol><ul><li>使用flask_sqlalchemy中的SQLAlchemy经行初始化：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><ol><li><p>设置配置信息：<code>config.py</code>文件中添加配置信息</p></li><li><p>在主<code>app</code>文件中，添加配置文件：</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><ol start="3"><li>做测试，看有没有问题</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">  id = db.Column(db.Integer)</span><br></pre></td></tr></table></figure><h3 id="使用Flask-SQLAlchemy创建模型与表的映射："><a href="#使用Flask-SQLAlchemy创建模型与表的映射：" class="headerlink" title="使用Flask-SQLAlchemy创建模型与表的映射："></a>使用Flask-SQLAlchemy创建模型与表的映射：</h3><ol><li>模型需要继承自<code>db.Model</code>,然后需要映射到表中的属性，必须写成<code>db.Column</code>的数据类型。</li><li>数据类型：<ul><li><code>db.Integer</code>代表的是整形.</li><li><code>db.String</code>代表的是<code>varchar</code>,需要指定最长的长度.</li><li><code>db.Text</code>代表的是<code>text</code>.</li></ul></li><li>其他参数：<ul><li><code>primary_key</code>:代表的是将这个字段设置为主键。</li><li><code>autoincrement</code>:代表的是这个主键为自增长的。</li><li><code>nullable</code>:代表的是这个字段是否为空，默认可以为空，可以将这个值设置为<code>False</code>,在数据库中，这个值就不能为空了。</li></ul></li><li>最后需要调用<code>db.create_all</code>来将模型真正地创建到数据库中。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span> <span class="comment">#如果不指定表名，会默认以这个类名的小写为表名</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br><span class="line">    content = db.Column(db.Text,nullable = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-SQLAlchemy的增，删，改，查"><a href="#Flask-SQLAlchemy的增，删，改，查" class="headerlink" title="Flask-SQLAlchemy的增，删，改，查"></a>Flask-SQLAlchemy的增，删，改，查</h3><ol><li>增：</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加：</span></span><br><span class="line"> article1 = Article(title = <span class="string">u'aaa'</span>,content = <span class="string">u'bbb'</span>)</span><br><span class="line"> db.session.add(article1)</span><br><span class="line"> <span class="comment"># 事务</span></span><br><span class="line"> db.session.commit()</span><br></pre></td></tr></table></figure><ol start="2"><li><p>查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select * from article where article.title = 'aaa';</span></span><br><span class="line">article1 = Article.query.filter(Article.title == <span class="string">'aaa'</span>).first()</span><br><span class="line">print(<span class="string">'title:%s'</span> % article1.title)</span><br><span class="line">print(<span class="string">'content:%s'</span> % article1.content)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># And操作</span></span><br><span class="line">article1 = Article.query.filter(Article.title == <span class="string">'aaa'</span>, Article.author == <span class="string">'bbb'</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">article1 = Article.query.filter(Article.title == <span class="string">'aaa'</span>).filter(Article.author == <span class="string">'bbb'</span>).first()</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>改：</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改：</span></span><br><span class="line"> <span class="comment"># 1.先把你要更改的数据查找出来</span></span><br><span class="line"> article1 = Article.query.filter(Article.title == <span class="string">'aaa'</span>).first()</span><br><span class="line"> <span class="comment"># 2.把这条数据，你需要修改的地方进行修改</span></span><br><span class="line"> article1.title = <span class="string">'New title'</span></span><br><span class="line"> <span class="comment"># 3.做事物的提交</span></span><br><span class="line"> db.session.commit()</span><br></pre></td></tr></table></figure><ol start="4"><li>删：</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删：</span></span><br><span class="line"> <span class="comment"># 1.把需要删除的数据查找出来</span></span><br><span class="line"> article1 = Article.query.filter(Article.title == <span class="string">'New title'</span>).first()</span><br><span class="line"> <span class="comment"># 2.把这条数据删除掉</span></span><br><span class="line"> db.session.delete(article1)</span><br><span class="line"> <span class="comment"># 3.做事物的提交</span></span><br><span class="line"> db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="Flask-Script的介绍与安装"><a href="#Flask-Script的介绍与安装" class="headerlink" title="Flask-Script的介绍与安装"></a>Flask-Script的介绍与安装</h3><ol><li><code>Flask-Script</code>的作用是可以通过命令行的形式来操作Flask.例如通过命令跑一个开发版本的服务器、设置数据库、定时任务等。</li><li>如果直接在主<code>manager.py</code>中写命令，那么在终端就只需要<code>python manager.py command_name</code>就可以了。</li><li>如果把一些命令集中在一个文件中，那么在终端就需要输入一个父命令，比如<code>python manager.py db init</code></li><li>例子：flask_script_demo.py 和manager.py</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask_script_demo.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello_world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主manager.py</span></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_script_demo <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> db_script <span class="keyword">import</span> DBmanager</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'服务器跑起来了'</span>)</span><br><span class="line"></span><br><span class="line">manager.add_command(<span class="string">'db'</span>,DBmanager)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><ol><li>有子命令的例子：db_script.py</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">DBmanager = Manager() <span class="comment"># 这个为什么不是Manager(app)。因为这个不是主文件，所以不需要在Manager()里面写入'app'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DBmanager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'数据库初始化完成'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@DBmanager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">migrate</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'数据表重新迁移成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个没有下面的代码是因为这个不是主的manager.py。它只是子的文件，所以不需要有下面的代码。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">if __name__ == '__main__':</span></span><br><span class="line"><span class="string">    manager.run()</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>有关Flask-Script还是有很多的不理解,例如代码当中的解释器<a href="mailto:`@DBmanager.command" target="_blank" rel="noopener">`@DBmanager.command</a>`这个可以Flask-Script的官网。<a href="https://flask-script.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask-Script</a></p><h3 id="分开models和解决循环引用"><a href="#分开models和解决循环引用" class="headerlink" title="分开models和解决循环引用"></a>分开models和解决循环引用</h3><ol><li><p>分开Models的目的：是为了让代码更加方便地管理。</p></li><li><p>什么是循环引用？</p><p><strong>[循环引用] 当一个单元格内的公式直接或间接地应用了这个公式本身所在的单元格时，就称为循环引用。</strong></p><p>为什么会报错？因为结果还没出来，却又要去调用它。所以会报错！<br> 假设有如下的文件结构：</p></li></ol>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">models_sep</span><span class="selector-class">.py</span> </span><br><span class="line"><span class="selector-tag">models</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models_sep.py </span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello_world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py </span></span><br><span class="line"><span class="keyword">from</span> models_sep <span class="keyword">import</span> db </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>上面的代码会造成一个循环引用：</p><p><img src="https:////upload-images.jianshu.io/upload_images/2459618-9e5ac8143f149b5d.png?imageMogr2/auto-orient/strip|imageView2/2/w/442/format/webp" alt="img"></p><p>循环引用</p><p>主文件app引入models文件中的Article.但models文件要引入app中的db,才可以生成，做成了循环引用。</p><ol><li>如何解决循环引用：把<code>db</code>放在一个单独的文件中，切断循环引用的线条就可以<br> 假设有如下的文件结构：</li></ol>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">app</span><span class="selector-class">.py</span> </span><br><span class="line"><span class="selector-tag">exts</span><span class="selector-class">.py</span> </span><br><span class="line"><span class="selector-tag">models</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py </span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db.init_app(app) <span class="comment"># init_app()可以用来解决循环引用的问题</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  app.run(debug = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exts.py </span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># models.py </span></span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">  __tablename__ = <span class="string">'article'</span></span><br><span class="line">  id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">  title = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-SQLAlchemy的外键约束"><a href="#Flask-SQLAlchemy的外键约束" class="headerlink" title="Flask-SQLAlchemy的外键约束"></a>Flask-SQLAlchemy的外键约束</h3><ol><li>外键：</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"> __tablename__ = <span class="string">'article'</span></span><br><span class="line"> id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line"> title = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br><span class="line"> content = db.Column(db.Text,nullable = <span class="keyword">False</span>)</span><br><span class="line"> author_id = db.Column(db.Integer,db.ForeignKey(<span class="string">'user.id'</span>)) <span class="comment"># user这个是表的名字，而不是类的名字。注意</span></span><br><span class="line"> author = db.relationship(<span class="string">'User'</span>,backref = db.backref(<span class="string">'articles'</span>)) <span class="comment"># User这个是类的名字，注意</span></span><br><span class="line">                                                                   <span class="comment"># relations：会在Article表中寻找外键‘user.id’然后关联到User表</span></span><br></pre></td></tr></table></figure><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author = db.relationship(&apos;User&apos;,backref = db.backref(&apos;articles&apos;))</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>给<code>Article</code>这个模型添加一个<code>author</code>属性，可以访问这篇文章的作者的数据，像访问普通模型一样。</li><li><code>backref</code>是定义反向引用的，可以通过<code>User.articles</code>访问这个模型所写的所有文章</li></ul></li></ol><p><em>这里有一个知识点，当<code>db.create_all()</code>运行了后，数据库的表已经创建好了。若要再对表(类)修改，添加外键，关系等。将不会生效。因为表，已经在数据库中创建好了。</em><br> 例子代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br><span class="line">    content = db.Column(db.Text,nullable = <span class="keyword">False</span>)</span><br><span class="line">    author_id = db.Column(db.Integer,db.ForeignKey(<span class="string">'user.id'</span>)) <span class="comment"># user这个是表的名字，而不是类的名字。注意</span></span><br><span class="line">    author = db.relationship(<span class="string">'User'</span>,backref = db.backref(<span class="string">'articles'</span>)) <span class="comment"># User这个是类的名字，注意</span></span><br><span class="line">                                                                      <span class="comment"># relations：会在Article表中寻找外键‘user.id’然后关联到User表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#想要添加一篇文章，因为文章必须依赖用户而存在，所以首先的话，先添加一个用户</span></span><br><span class="line">    <span class="comment">#user1 = User(username = 'zhiliaoketang')</span></span><br><span class="line">    <span class="comment">#db.session.add(user1)</span></span><br><span class="line">    <span class="comment">#db.session.commit()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#article1 = Article(title = 'aaa',content = 'This is an Article',author_id=1)</span></span><br><span class="line">    <span class="comment">#db.session.add(article1)</span></span><br><span class="line">    <span class="comment">#db.session.commit()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#article = Article.query.filter(Article.title == u'aaa').first()</span></span><br><span class="line">    <span class="comment">#author_id = article.author_id</span></span><br><span class="line">    <span class="comment">#user = User.query.filter(User.id == author_id).first()</span></span><br><span class="line">    <span class="comment">#print("username:%s" %(user.username))</span></span><br><span class="line">    <span class="comment">#return 'Hello World'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#article = Article(title = 'aaa',content = 'This is an Article')</span></span><br><span class="line">    <span class="comment">#article = Article(title = 'bbb',content = 'This is an Article2')</span></span><br><span class="line">    <span class="comment">#article.author = User.query.filter(User.id == 1).first()</span></span><br><span class="line">    <span class="comment">#db.session.add(article) </span></span><br><span class="line">    <span class="comment">#db.session.commit()</span></span><br><span class="line"></span><br><span class="line">    article = Article.query.filter(Article.content == <span class="string">'This is an Article2'</span>).first()</span><br><span class="line">    print(<span class="string">"author is %s"</span> %(article.author.username))</span><br><span class="line">    user = User.query.filter(User.id == <span class="number">1</span>).first()</span><br><span class="line">    print(<span class="string">"The Articles are:"</span>)</span><br><span class="line">    <span class="keyword">for</span> arti <span class="keyword">in</span> user.articles:</span><br><span class="line">        print(<span class="string">'--------'</span>)</span><br><span class="line">        print(arti.title)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ol><li>表多对多的关系：</li></ol><ul><li><p>多对多的关系，需要通过一个中间表进行关联。</p></li><li><p>中间表，不能通过<code>class</code>的方式实现，只能通过<code>db.Table</code>的方式实现</p></li><li><p>设置关联：<br> <code>tags = db.relationship(&#39;Tag&#39;,secondary = article_tag,backref = db.backref(&#39;articles&#39;))</code>需要使用一个关键字参数<code>secondary=中间表</code></p></li><li><p>数据的添加与访问：</p><ul><li>数据添加：</li></ul></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">article1 = Article(title = <span class="string">'aaa'</span>)</span><br><span class="line">article2 = Article(title = <span class="string">'bbb'</span>)</span><br><span class="line"></span><br><span class="line">tag1 = Tag(name = <span class="string">'999'</span>)</span><br><span class="line">tag2 = Tag(name = <span class="string">'888'</span>)</span><br><span class="line"></span><br><span class="line">article1.tags.<span class="built_in">append</span>(tag1) # 留意可以用<span class="built_in">append</span>()来添加数据</span><br><span class="line">article1.tags.<span class="built_in">append</span>(tag2)</span><br><span class="line">article2.tags.<span class="built_in">append</span>(tag1)</span><br><span class="line">article2.tags.<span class="built_in">append</span>(tag2)</span><br><span class="line"></span><br><span class="line">db.session.add(article1)</span><br><span class="line">db.session.add(article2)</span><br><span class="line"></span><br><span class="line">db.session.add(tag1)</span><br><span class="line">db.session.add(tag2)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 数据访问：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>python </span><br><span class="line">article1 = Article.query.filter(Article.title == <span class="string">'aaa'</span>).first()</span><br><span class="line">tags = article1.tags</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tag in tags:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'---------'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Tag: %s'</span> %(tag.name))</span><br><span class="line"></span><br><span class="line">tag1 = Tag.query.filter(Tag.name == <span class="string">'999'</span>).first()</span><br><span class="line">articles = tag1.articles</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> article in articles:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'********'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'article: %s'</span> %(article.title))</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure><p>例子代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">article_tag = db.Table(<span class="string">'article_tag'</span>,</span><br><span class="line">              db.Column(<span class="string">'article_id'</span>,db.Integer,db.ForeignKey(<span class="string">'article.id'</span>),primary_key = <span class="keyword">True</span>),</span><br><span class="line">              db.Column(<span class="string">'tag_id'</span>,db.Integer,db.ForeignKey(<span class="string">'tag.id'</span>),primary_key = <span class="keyword">True</span>),</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br><span class="line">    tags = db.relationship(<span class="string">'Tag'</span>,secondary = article_tag,backref = db.backref(<span class="string">'articles'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tag'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key = <span class="keyword">True</span>,autoincrement = <span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>),nullable = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">''' article1 = Article(title = 'aaa')</span></span><br><span class="line"><span class="string">    article2 = Article(title = 'bbb')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    tag1 = Tag(name = '999')</span></span><br><span class="line"><span class="string">    tag2 = Tag(name = '888')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    article1.tags.append(tag1)</span></span><br><span class="line"><span class="string">    article1.tags.append(tag2)</span></span><br><span class="line"><span class="string">    article2.tags.append(tag1)</span></span><br><span class="line"><span class="string">    article2.tags.append(tag2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    db.session.add(article1)</span></span><br><span class="line"><span class="string">    db.session.add(article2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    db.session.add(tag1)</span></span><br><span class="line"><span class="string">    db.session.add(tag2)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    db.session.commit() '''</span></span><br><span class="line"></span><br><span class="line">    article1 = Article.query.filter(Article.title == <span class="string">'aaa'</span>).first()</span><br><span class="line">    tags = article1.tags</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">        print(<span class="string">'---------'</span>)</span><br><span class="line">        print(<span class="string">'Tag: %s'</span> %(tag.name))</span><br><span class="line"></span><br><span class="line">    tag1 = Tag.query.filter(Tag.name == <span class="string">'999'</span>).first()</span><br><span class="line">    articles = tag1.articles</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        print(<span class="string">'********'</span>)</span><br><span class="line">        print(<span class="string">'article: %s'</span> %(article.title))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-Migrate的介绍与安装："><a href="#Flask-Migrate的介绍与安装：" class="headerlink" title="Flask-Migrate的介绍与安装："></a>Flask-Migrate的介绍与安装：</h3><ol><li><p>介绍：因为采用<code>db.create_all</code>在后期修改字段的时候，不会自动的映射到数据库中，必须删除表，然后重新运行<code>db.create_all</code>才会重新映射，这样不符合实际的工作要求。因此flask-migrate就是为了解决这个问题，它可以在每次修改模型后，可以将修改的东西映射到数据库中。</p></li><li><p>使用<code>flask_migrate</code>必须借助<code>flask_scripts</code>,这个包的<code>MigrateCommand</code>中包含了所有和数据库相关的命令。</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask_migrate</span><br></pre></td></tr></table></figure><p>相关的命令：</p><ul><li><code>python manager.py db init</code>:初始化一个迁移脚本的环境，只需要执行一次</li><li><code>python manager.py db migrate</code>:将模型生成迁移文件，只要模型更改了，就需要执行一遍这个命令</li><li><code>python manager.py db upgrade</code>:将迁移文件真正映射到数据库中，每次运行<code>migrate</code>命令后，记得要运行这个命令</li><li>注意点：需要将你想要的映射到数据库中的模型，都要导入到<code>manager.py</code>文件中，如果没有导入进去，就不会映射到数据库中。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个article模型，采用models分开的方式</span></span><br><span class="line"><span class="keyword">with</span> app.app_context():  <span class="comment"># 手动将app推到app栈顶</span></span><br><span class="line">    db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello_world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Flask-SQLAlchemy模型的理解"><a href="#Flask-SQLAlchemy模型的理解" class="headerlink" title="Flask-SQLAlchemy模型的理解"></a>Flask-SQLAlchemy模型的理解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    password = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User `&#123;&#125;`&gt;"</span>.format(self.username)</span><br></pre></td></tr></table></figure><p>这段代码做了什么呢？实际上，我们已经得到了<code>User</code>模型，它基于一个<code>user</code>表，该表拥有3个字段。当我们继承<code>db.Model</code>时，与数据库连接和通信的工作已经自动完成了。<code>User</code>的某些类的属性值是<code>db.Column</code>类的实例，每个这样的属性都代表了数据库表里的一个字段。在<code>db.Column</code>的构造函数里，第1个参数是可选的，通过这个参数我们可以指定该属性在数据库中的字段名。如果没有指定，则SQLAlchemy会认为字段名与这个属性的名字是一样的。如果要指定这个可选参数，则可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = db.Column(&apos;user_name&apos;, db.String(255))</span><br></pre></td></tr></table></figure><p>传给<code>db.Column</code>的第2个参数会告诉SQLAlchemy，应该把这个字段作为什么类型来处理。我们在书中将会用到的主要类型有:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.String</span><br><span class="line">db.Text</span><br><span class="line">db.Integer</span><br><span class="line">db.Float</span><br><span class="line">db.Boolean</span><br><span class="line">db.Date</span><br><span class="line">db.DateTime</span><br><span class="line">db.Time`</span><br></pre></td></tr></table></figure><p>每种类型的含义都很简单。<code>String</code>和<code>Text</code>类型会接收<code>Python</code>的字符串，并且把它们转为<code>varchar</code>和<code>text</code>类型的字段。<code>Integer</code>和<code>Float</code>类型则会接收<code>Python</code>的任意数值类型，把它们分别转换为对应的正确类型，再插入数据库中。<code>Boolean</code>类型会接收<code>Python</code>的布尔值转换成<code>Boolean</code>类型的字段；如果数据库不支持<code>Boolean</code>类型的字段，则<code>SQLAlchemy</code>会自动把Python的布尔值转换为0和1保存在数据库中。<code>Date</code>,<code>DateTime</code>和Time类型使用了Python的<code>datetime</code>原生包中的同名类，并把它们转换后保存到数据库中。<code>String</code>,<code>Integer</code>和<code>Float</code>类型都会接收一个额外的参数，来告诉SQLAlchemy该字段的存储长度限制。</p><p><code>primary_key</code>参数会告诉<code>SQLAlchemy</code>，这个字段需要做主键索引。每个<code>SQLAlchemy</code>模型类型都必须有一个主键才能正常工作。</p><p><code>SQLAlchemy</code>会假设你的表名就模型类型的小写版本。但是，如果你想给表起个别的名字，你可以给类添加<code>__tablename__</code>的类属性。另外，通过采用这种方式，你也可以使用在数据库中已经存在的表，只需把表名设为该属性的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user_table_name'</span></span><br><span class="line"></span><br><span class="line">   id = db.Column(db.Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    password = db.Column(db.String(<span class="number">255</span>))</span><br></pre></td></tr></table></figure><p>我们不需要定义<code>__init__</code>或<code>__repr__</code>方法，如果我们没有定义，则SQLAlchemy会自动创建<code>__init__</code>方法。你定义的所有字段名将会成为此方法所接收的关键字的参数名。</p><p><a href="https://blog.csdn.net/happyanger6/article/details/53947162" target="_blank" rel="noopener">参考原文</a></p><p>自己当初在用<code>Flask</code>来创建用户角色时，对下面的代码的代码中的`role = Role(name = r)思考了很久。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'roles'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    default = db.Column(db.Boolean,default=<span class="keyword">False</span>,index=<span class="keyword">True</span>)</span><br><span class="line">    permissions = db.Column(db.Integer)</span><br><span class="line">    users = db.relationship(<span class="string">'User'</span>, backref=<span class="string">'role'</span>, lazy=<span class="string">'dynamic'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_roles</span><span class="params">()</span>:</span></span><br><span class="line">        roles = &#123;</span><br><span class="line">            <span class="string">'User'</span>:[Permission.FOLLOW,Permission.COMMENT,Permission.WRITE],</span><br><span class="line">            <span class="string">'Moderator'</span>:[Permission.FOLLOW,Permission.COMMENT,Permission.WRITE,Permission.MODERATE],</span><br><span class="line">            <span class="string">'Administrator'</span>:[Permission.FOLLOW,Permission.COMMENT,Permission.WRITE,Permission.MODERATE,Permission.ADMIN]</span><br><span class="line">        &#125;</span><br><span class="line">        default_role = <span class="string">'User'</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> roles:</span><br><span class="line">            role = Role.query.filter_by(name = r).first()</span><br><span class="line">            <span class="keyword">if</span> role <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                role = Role(name=r)</span><br><span class="line">            role.reset_permissions()</span><br><span class="line">            <span class="keyword">for</span> perm <span class="keyword">in</span> roles[r]:</span><br><span class="line">                role.add_permission(perm)</span><br><span class="line">            role.default = (role.name == default_role)</span><br><span class="line">            db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure><p>角色<code>Role</code>模型明明有好几个字段，为什么但一个关键字参数<code>name = r</code>就可以用来创建一个实例？知道在SQLAlchemy中，不需要定义<code>__init__</code>或<code>__repr__</code>方法，如果没有定义，则SQLAlchemy会自动创建<code>__init__</code>方法。定义过的所有字段名将会成为此方法所接收的关键字的参数名。</p><p>当若作为<code>__init__()</code>构造函数的参数，不是要一次性全部赋值的吗？为什么就只有’name=r’作为关键字传入就可以了？<br> 知道看到用户<code>User</code>模型中的构造模型。发现到了关键字参数<code>**kwargs</code>。一切都突然明白了。还是自己python基础不太熟悉。要找找源代码来看一看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixin, db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">64</span>), unique=<span class="keyword">True</span>, index=<span class="keyword">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">64</span>), unique=<span class="keyword">True</span>, index=<span class="keyword">True</span>)</span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'roles.id'</span>))</span><br><span class="line">    password_hash = db.Column(db.String(<span class="number">128</span>))</span><br><span class="line">    confirmed = db.Column(db.Boolean,default = <span class="keyword">False</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    location = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    about_me = db.Column(db.Text())</span><br><span class="line">    member_since = db.Column(db.DateTime(),default = datetime.utcnow)</span><br><span class="line">    last_seen = db.Column(db.DateTime(),default = datetime.utcnow)</span><br><span class="line">    avatar_hash = db.Column(db.String(<span class="number">32</span>))</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>,backref = <span class="string">'author'</span>,lazy = <span class="string">'dynamic'</span>)</span><br><span class="line">    followed = db.relationship(<span class="string">'Follow'</span>,</span><br><span class="line">                                foreign_keys=[Follow.follower_id],</span><br><span class="line">                                backref=db.backref(<span class="string">'follower'</span>,lazy=<span class="string">'joined'</span>),</span><br><span class="line">                                lazy=<span class="string">'dynamic'</span>,r.</span><br><span class="line">                                cascade=<span class="string">'all,delete-orphan'</span>)</span><br><span class="line">    followers = db.relationship(<span class="string">'Follow'</span>,</span><br><span class="line">                                 foreign_keys=[Follow.followed_id],</span><br><span class="line">                                 backref=db.backref(<span class="string">'followed'</span>,lazy=<span class="string">'joined'</span>),</span><br><span class="line">                                 lazy=<span class="string">'dynamic'</span>,</span><br><span class="line">                                 cascade = <span class="string">'all,delete-orphan'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,**kwargs)</span>:</span></span><br><span class="line">        super(User,self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">if</span> self.role <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> self.email == current_app.config[<span class="string">'FLASKY_ADMIN'</span>]:</span><br><span class="line">                self.role = Role.query.filter_by(name = <span class="string">'Administrator'</span>).first()</span><br><span class="line">            <span class="keyword">if</span> self.role <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                self.role = Role.query.filter_by(default = <span class="keyword">True</span>).first()</span><br><span class="line">        <span class="keyword">if</span> self.email <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> self.avatar_hash <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.avatar_hash = self.gravatar_hash()</span><br></pre></td></tr></table></figure><p>还有就是对为什么在用户的<code>confirm</code>函数中，只有<code>db.session.add(self)</code><br> 而没有db.session.commit().</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def confirm(<span class="keyword">self</span>,token):</span><br><span class="line">    s = Serializer(current_app.config[<span class="string">'SECRET_KEY'</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = s.loads(token)</span><br><span class="line">    except:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> data.get(<span class="string">'confirm'</span>)!=<span class="keyword">self</span>.id:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">self</span>.confirmed = <span class="keyword">True</span></span><br><span class="line">    db.session.add(<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>这个这是模型，真正实现<code>db.session.commit()</code>的是在视图函数里面。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@auth</span>.route(<span class="string">'/confirm/&lt;token&gt;'</span>)</span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line">def confirm(token):</span><br><span class="line">    <span class="keyword">if</span> current_user.confirmed:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'main.index'</span>)</span><br><span class="line">    <span class="keyword">if</span> current_user.confirm(token):</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">'You have confirmed your account.Thanks'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flash(<span class="string">'The confirmation link is invalid or has expired.'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'main.index'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 使用requests发送Http Get请求</title>
      <link href="2020-Python/http.html"/>
      <url>2020-Python/http.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://localhost:5000/objecttrajactory/lastnminutes/2"</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.status_code)</span><br><span class="line">dataJson = r.json()</span><br><span class="line">print(dataJson)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020-Postgis/queries.html"/>
      <url>2020-Postgis/queries.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">object_id,</span><br><span class="line">ST_AsEWKT ( gps_line ),</span><br><span class="line">ST_M(ST_EndPoint(gps_line)),</span><br><span class="line">to_char(to_timestamp(ST_M(ST_EndPoint(gps_line))), <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">PUBLIC.objecttrajactory</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhang35/Image@master/img/image-20201019104748370.png" alt="image-20201019104748370"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 离线安装Docker</title>
      <link href="2020-Docker/docker-offline-install.html"/>
      <url>2020-Docker/docker-offline-install.html</url>
      
        <content type="html"><![CDATA[<p>参考： <a href="https://docs.docker.com/engine/install/binaries/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/binaries/</a></p><p>测试环境如下，centos系统版本为3.10.0-327.el7.x86_64：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">3.10.0-327.el7.x86_64</span><br></pre></td></tr></table></figure></p><h3 id="下载二进制安装包"><a href="#下载二进制安装包" class="headerlink" title="下载二进制安装包"></a>下载二进制安装包</h3><p><a href="https://download.docker.com/linux/static/stable/x86_64/" target="_blank" rel="noopener">https://download.docker.com/linux/static/stable/x86_64/</a> </p><p>这里下载了<code>docker-17.03.0-ce.tgz</code>，拷贝到centos里。</p><p>注意不能使用docker-18.06版本，docker版本过高而linux版本过低，会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused <span class="string">"process_linux.go:297: copying bootstrap data to pipe caused \"write init-p: broken pipe\""</span>: unknown.</span><br></pre></td></tr></table></figure><h3 id="解压二进制包"><a href="#解压二进制包" class="headerlink" title="解压二进制包"></a>解压二进制包</h3><p><code>$ tar xzvf docker-17.03.0-ce.tgz</code></p><h3 id="将二进制文件移动到-usr-bin-中："><a href="#将二进制文件移动到-usr-bin-中：" class="headerlink" title="将二进制文件移动到/usr/bin/中："></a>将二进制文件移动到/usr/bin/中：</h3><p><code>$ sudo cp docker/* /usr/bin/</code></p><h3 id="开启守护进程"><a href="#开启守护进程" class="headerlink" title="开启守护进程"></a>开启守护进程</h3><p><code>$ sudo dockerd &amp;</code></p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p><code>$ sudo docker run hello-world</code></p><p>成功打印：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> offline </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win7安装Docker</title>
      <link href="2020-Docker/docker-win7-install.html"/>
      <url>2020-Docker/docker-win7-install.html</url>
      
        <content type="html"><![CDATA[<p>win7系统下，一开始下载了docker desktop，发现安装失败：<br><img src="https://img-blog.csdnimg.cn/20201009110101208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>因为docker desktop要求win10系统，老版本的只能安装docker toolbox。</p><p>下载toolbox：<a href="https://github.com/docker/toolbox/releases" target="_blank" rel="noopener">https://github.com/docker/toolbox/releases</a></p><p><img src="https://img-blog.csdnimg.cn/20201009110845854.png#pic_center" alt="在这里插入图片描述"><br>安装完成后，得到一个快捷方式，直接运行报错：windows 正在查找bash.exe。<br><img src="https://img-blog.csdnimg.cn/20201009124951321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>解决方法：手动配置git路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Git\bin\bash.exe --login -i <span class="string">"C:\Program Files\Docker Toolbox\start.sh"</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201009125216762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>再次运行，仍然有错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No default Boot2Docker ISO found locally…</span><br><span class="line">error with pre-create check</span><br></pre></td></tr></table></figure><p>解决方法：下载Boot2Docker ：<br><a href="https://github.com/boot2docker/boot2docker/releases" target="_blank" rel="noopener">https://github.com/boot2docker/boot2docker/releases</a><br>到<code>%HOMEPATH%.docker\machine\cache</code></p><p>我的是：<code>C:\Users\Administrator\.docker\machine\cache</code></p><p><img src="https://img-blog.csdnimg.cn/20201009133348451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入<code>$ docker run hello-world</code>，看到如下信息，表明正常运行：<br><img src="https://img-blog.csdnimg.cn/20201009133435790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上面的docker tool box 快捷方式打开的窗口不好用，不能复制粘贴。</p><p>解决方法：直接在docker安装目录下启动star.sh即可：<br><img src="https://img-blog.csdnimg.cn/20201009142804828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Win7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala try-Catch</title>
      <link href="2020-Scala/scala-try-catch.html"/>
      <url>2020-Scala/scala-try-catch.html</url>
      
        <content type="html"><![CDATA[<h2 id="try-Catch"><a href="#try-Catch" class="headerlink" title="try-Catch"></a>try-Catch</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; &#123;</span><br><span class="line">        ex.printStackTrace() <span class="comment">// 打印到标准err</span></span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"exception===&gt;: ..."</span>)  <span class="comment">// 打印到标准err</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">val</span> a = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; &#123;</span><br><span class="line">println(<span class="string">"bug"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark操作hdfs</title>
      <link href="2020-Spark/spark-hdfs.html"/>
      <url>2020-Spark/spark-hdfs.html</url>
      
        <content type="html"><![CDATA[<p>官方说明：<a href="http://hadoop.apache.org/docs/r2.6.1/api/org/apache/hadoop/fs/FileSystem.html" target="_blank" rel="noopener">http://hadoop.apache.org/docs/r2.6.1/api/org/apache/hadoop/fs/FileSystem.html</a></p><h2 id="遍历hdfs目录文件"><a href="#遍历hdfs目录文件" class="headerlink" title="遍历hdfs目录文件"></a>遍历hdfs目录文件</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.<span class="type">Configuration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.&#123;<span class="type">FileSystem</span>, <span class="type">Path</span>, <span class="type">FileUtil</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">Configuration</span>()</span><br><span class="line"><span class="keyword">val</span> hdfs= <span class="type">FileSystem</span>.get(conf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> savePath = <span class="string">"/"</span></span><br><span class="line"><span class="keyword">val</span> path = <span class="keyword">new</span> <span class="type">Path</span>(savePath)</span><br><span class="line"><span class="keyword">val</span> allFiles = <span class="type">FileUtil</span>.stat2Paths(hdfs.listStatus(path))</span><br><span class="line">allFiles.foreach(println)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">打印结果：</span><br><span class="line"></span><br><span class="line">hdfs://master.xxx.com:8020/2CYS6GRQ3</span><br><span class="line">hdfs://master.xxx.com:8020/31.xlsx</span><br><span class="line">hdfs://master.xxx.com:8020/CanopyPredictParams.json</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="delete操作"><a href="#delete操作" class="headerlink" title="delete操作"></a>delete操作</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> hdfs : <span class="type">FileSystem</span> = <span class="type">FileSystem</span>.get(<span class="keyword">new</span> <span class="type">Configuration</span>)</span><br><span class="line"><span class="keyword">val</span> path=<span class="keyword">new</span> <span class="type">Path</span>(bmNBPath)</span><br><span class="line"><span class="keyword">if</span>(hdfs.exists(path)) &#123;</span><br><span class="line">  <span class="keyword">if</span>(hdfs.isDirectory(path))</span><br><span class="line">    hdfs.delete(path, <span class="literal">true</span>) <span class="comment">//true代表递归删除，当path是目录时使用</span></span><br><span class="line">  <span class="keyword">else</span> hdfs.delete(path,<span class="literal">false</span>)  <span class="comment">//非递归删除，</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Path f,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">boolean</span> recursive)</span></span></span><br><span class="line"><span class="function">                        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">Delete a file.</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">f - the path to delete.</span></span><br><span class="line"><span class="function">recursive - <span class="keyword">if</span> path is a directory and set to <span class="keyword">true</span>, the directory is deleted <span class="keyword">else</span> <span class="keyword">throws</span> an exception. In <span class="keyword">case</span> of a file the recursive can be set to either <span class="keyword">true</span> or <span class="keyword">false</span>.</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function"><span class="keyword">true</span> <span class="keyword">if</span> delete is successful <span class="keyword">else</span> <span class="keyword">false</span>.</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">IOException</span></span><br></pre></td></tr></table></figure><h2 id="exists操作：检查路径是否存在"><a href="#exists操作：检查路径是否存在" class="headerlink" title="exists操作：检查路径是否存在"></a>exists操作：检查路径是否存在</h2><p>原型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Path f)</span></span></span><br><span class="line"><span class="function">               <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">Check <span class="keyword">if</span> a path exists. It is highly discouraged to call <span class="keyword">this</span> method back to back with other <span class="title">getFileStatus</span><span class="params">(Path)</span> calls, as <span class="keyword">this</span> will involve multiple redundant RPC calls in HDFS.</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">f - source path</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function"><span class="keyword">true</span> <span class="keyword">if</span> the path exists</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">IOException - IO failure</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark DataFrame操作</title>
      <link href="2020-Spark/pyspark-dataframe.html"/>
      <url>2020-Spark/pyspark-dataframe.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_time_int</span><span class="params">(d, t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> time.mktime(time.strptime(d + <span class="string">','</span> + t, time_format))</span><br><span class="line">indf = inputRDD(inputTableName)\</span><br><span class="line">        .withColumnRenamed(lonCol, <span class="string">'longitude'</span>)\</span><br><span class="line">        .withColumnRenamed(latCol, <span class="string">'latitude'</span>)\</span><br><span class="line">        .withColumnRenamed(dateCol, <span class="string">'date'</span>)\</span><br><span class="line">        .withColumnRenamed(timeCol, <span class="string">'time'</span>)</span><br><span class="line"><span class="comment"># 将日期+时间统一为秒数，增加新列"timeInt"存储</span></span><br><span class="line">indf = indf.withColumn(<span class="string">"timeInt"</span>, functions.UserDefinedFunction(calc_time_int)(indf.date, indf.time))</span><br><span class="line"><span class="comment"># 按照"timeInt"排序</span></span><br><span class="line">indf = indf.withColumn(<span class="string">"timeInt"</span>, indf[<span class="string">"timeInt"</span>].cast(<span class="string">"double"</span>))</span><br><span class="line">points = indf.orderBy(<span class="string">'timeInt'</span>).collect()</span><br></pre></td></tr></table></figure><p><a href="https://towardsdatascience.com/the-most-complete-guide-to-pyspark-dataframes-2702c343b2e8#35c2" target="_blank" rel="noopener">https://towardsdatascience.com/the-most-complete-guide-to-pyspark-dataframes-2702c343b2e8#35c2</a>)</p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>I am working on installing Spark on Ubuntu 18.04, but the steps should remain the same for MAC too. I am assuming that you already have Anaconda and Python3 installed. After that, you can just go through these steps:</p><ol><li>Download the Spark Binary from Apache Spark <a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">Website</a>. And click on the Download Spark link to download Spark.</li></ol><p><img src="https://miro.medium.com/max/60/1*-xm3faSPHpjQCu8RuHD8bA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1175/1*-xm3faSPHpjQCu8RuHD8bA.png" alt="Image for post"></p><p>\2. Once you have downloaded the above file, you can start with unzipping the file in your home directory. Just Open up the terminal and put these commands in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">cp Downloads/spark-2.4.5-bin-hadoop2.7.tgz ~</span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure><p>\3. Check your Java Version. As of version 2.4 Spark works with Java 8. You can check your Java Version using the command <code>java -version</code> on the terminal window.</p><p>I had Java 11 in my machine, so I had to run the following commands on my terminal to install and change default Java to Java 8:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>You will need to manually select the Java version 8 by typing the selection number.</p><p><img src="https://miro.medium.com/max/60/1*YTG1Hpovti8bcb3PFNPfBw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1214/1*YTG1Hpovti8bcb3PFNPfBw.png" alt="Image for post"></p><p>Rechecking Java version should give something like:</p><p><img src="https://miro.medium.com/max/60/1*_m6cmKerEl4K1YyVY81kcQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1203/1*_m6cmKerEl4K1YyVY81kcQ.png" alt="Image for post"></p><p>\4. Edit your <code>~/.bashrc</code> file and add the following lines at the end of the file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function pysparknb () </span><br><span class="line">&#123;</span><br><span class="line">#Spark path</span><br><span class="line">SPARK_PATH=~/spark-2.4.5-bin-hadoop2.7export PYSPARK_DRIVER_PYTHON=&quot;jupyter&quot;</span><br><span class="line">export PYSPARK_DRIVER_PYTHON_OPTS=&quot;notebook&quot;# For pyarrow 0.15 users, you have to add the line below or you will get an error while using pandas_udf </span><br><span class="line">export ARROW_PRE_0_15_IPC_FORMAT=1# Change the local[10] to local[numCores in your machine]</span><br><span class="line">$SPARK_PATH/bin/pyspark --master local[10]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>\5. Source <code>~/.bashrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>\6. Run the <code>pysparknb</code> function in the terminal and you will be able to access the notebook. You will be able to open a new notebook as well as the <code>sparkcontext</code> will be loaded automatically.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pysparknb</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*2PO5uExGdBF2T2VAMBSxVw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1154/1*2PO5uExGdBF2T2VAMBSxVw.png" alt="Image for post"></p><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><p>With the installation out of the way, we can move to the more interesting part of this post. I will be working with the <a href="https://www.kaggle.com/kimjihoo/coronavirusdataset" target="_blank" rel="noopener">Data Science for COVID-19 in South Korea</a>, which is one of the most detailed datasets on the internet for COVID.</p><p>Please note that I will be using this dataset to showcase some of the most useful functionalities of Spark, but this should not be in any way considered a data exploration exercise for this amazing dataset.</p><p><img src="https://miro.medium.com/max/60/0*RVqtYcbfYPdKuU2L.PNG?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1174/0*RVqtYcbfYPdKuU2L.PNG" alt="Image for post"></p><p>Source: <a href="https://www.kaggle.com/kimjihoo/coronavirusdataset?select=Case.csv" target="_blank" rel="noopener">Kaggle</a></p><p>I will mainly work with the following three tables only in this post:</p><ul><li>Cases</li><li>Region</li><li>TimeProvince</li></ul><p><strong><em>You can find all the code at the\</em></strong> <a href="https://github.com/MLWhiz/data_science_blogs/tree/master/sparkdf" target="_blank" rel="noopener"><strong><em>GitHub\</em></strong></a> <strong><em>repository.\</em></strong></p><h1 id="1-Basic-Functions"><a href="#1-Basic-Functions" class="headerlink" title="1. Basic Functions"></a>1. Basic Functions</h1><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>We can start by loading the files in our dataset using the spark.read.load command. This command reads parquet files, which is the default file format for spark, but you can add the parameter <code>format</code> to read .csv files using it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases = spark.read.load(&quot;/home/rahul/projects/sparkdf/coronavirusdataset/Case.csv&quot;,format=&quot;csv&quot;, sep=&quot;,&quot;, inferSchema=&quot;true&quot;, header=&quot;true&quot;)</span><br></pre></td></tr></table></figure><h2 id="See-a-few-rows-in-the-file"><a href="#See-a-few-rows-in-the-file" class="headerlink" title="See a few rows in the file"></a>See a few rows in the file</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*ktmyd5NDOpjNlgGvaZ8gaA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/989/1*ktmyd5NDOpjNlgGvaZ8gaA.png" alt="Image for post"></p><p>This file contains the cases grouped by way of the infection spread. This might have helped in the rigorous tracking of Corona Cases in South Korea.</p><p>The way this file looks is great right now, but sometimes as we increase the number of columns, the formatting becomes not too great. I have noticed that the following trick helps in displaying in pandas format in my Jupyter Notebook. The <code>.toPandas()</code> function converts a spark dataframe into a pandas Dataframe which is easier to show.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases.limit(10).toPandas()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*FsFK46Nn5A5bqGClBisNyw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/883/1*FsFK46Nn5A5bqGClBisNyw.png" alt="Image for post"></p><h2 id="Change-Column-Names"><a href="#Change-Column-Names" class="headerlink" title="Change Column Names"></a>Change Column Names</h2><p>Sometimes we would like to change the name of columns in our Spark Dataframes. We can do this simply using the below command to change a single column:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases = cases.withColumnRenamed(&quot;infection_case&quot;,&quot;infection_source&quot;)</span><br></pre></td></tr></table></figure><p>Or for all columns:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cases = cases.toDF(*[&apos;case_id&apos;, &apos;province&apos;, &apos;city&apos;, &apos;group&apos;, &apos;infection_case&apos;, &apos;confirmed&apos;,</span><br><span class="line">       &apos;latitude&apos;, &apos;longitude&apos;])</span><br></pre></td></tr></table></figure><h2 id="Select-Columns"><a href="#Select-Columns" class="headerlink" title="Select Columns"></a>Select Columns</h2><p>We can select a subset of columns using the <code>select</code> keyword.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cases = cases.select(&apos;province&apos;,&apos;city&apos;,&apos;infection_case&apos;,&apos;confirmed&apos;)</span><br><span class="line">cases.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*QKcHoVIlK2GXcH-nBl4jbg.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/892/1*QKcHoVIlK2GXcH-nBl4jbg.png" alt="Image for post"></p><h2 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h2><p>We can sort by the number of confirmed cases. Here note that the <code>cases</code> data frame will not change after performing this command as we don’t assign it to any variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases.sort(&quot;confirmed&quot;).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*8qGT0xInxQIWty9t0t2XFQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/895/1*8qGT0xInxQIWty9t0t2XFQ.png" alt="Image for post"></p><p>But that is inverted. We want to see the most cases at the top. We can do this using the <code>F.desc</code> function:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># descending Sort</span><br><span class="line">from pyspark.sql import functions as F</span><br><span class="line">cases.sort(F.desc(&quot;confirmed&quot;)).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*R6aM7HxbFncerkpwWquZhQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/898/1*R6aM7HxbFncerkpwWquZhQ.png" alt="Image for post"></p><p>We can see the most cases in a logical area in South Korea originated from <code>Shincheonji Church</code>.</p><h2 id="Cast"><a href="#Cast" class="headerlink" title="Cast"></a>Cast</h2><p>Though we don’t face it in this dataset, there might be scenarios where Pyspark reads a double as integer or string, In such cases, you can use the cast function to convert types.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.types import DoubleType, IntegerType, StringTypecases = cases.withColumn(&apos;confirmed&apos;, F.col(&apos;confirmed&apos;).cast(IntegerType()))cases = cases.withColumn(&apos;city&apos;, F.col(&apos;city&apos;).cast(StringType()))</span><br></pre></td></tr></table></figure><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>We can filter a data frame using multiple conditions using AND(&amp;), OR(|) and NOT(~) conditions. For example, we may want to find out all the different infection_case in Daegu Province with more than 10 confirmed cases.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases.filter((cases.confirmed&gt;10) &amp; (cases.province==&apos;Daegu&apos;)).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*hgJ2QZuDCmNpTg6ust-FVA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/896/1*hgJ2QZuDCmNpTg6ust-FVA.png" alt="Image for post"></p><h2 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h2><p>We can use <code>groupBy</code> function with a spark DataFrame too. Pretty much same as the pandas <code>groupBy</code> with the exception that you will need to import <code>pyspark.sql.functions</code>. <a href="https://people.eecs.berkeley.edu/~jegonzal/pyspark/pyspark.sql.html#module-pyspark.sql.functions" target="_blank" rel="noopener">Here</a> is the list of functions you can use with this function module.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql import functions as Fcases.groupBy([&quot;province&quot;,&quot;city&quot;]).agg(F.sum(&quot;confirmed&quot;) ,F.max(&quot;confirmed&quot;)).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*cp3SUlUCAKXtqIg-WmBfUQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/896/1*cp3SUlUCAKXtqIg-WmBfUQ.png" alt="Image for post"></p><p>If you don’t like the new column names, you can use the <code>alias</code> keyword to rename columns in the <code>agg</code> command itself.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cases.groupBy([&quot;province&quot;,&quot;city&quot;]).agg(</span><br><span class="line">    F.sum(&quot;confirmed&quot;).alias(&quot;TotalConfirmed&quot;),\</span><br><span class="line">    F.max(&quot;confirmed&quot;).alias(&quot;MaxFromOneConfirmedCase&quot;)\</span><br><span class="line">    ).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*FY498DJ6Zq_85ISVh0Y2Bw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/894/1*FY498DJ6Zq_85ISVh0Y2Bw.png" alt="Image for post"></p><h2 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h2><p>To Start with Joins we will need to introduce one more CSV file. We will go with the region file which contains region information such as elementary_school_count, elderly_population_ratio, etc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">regions = spark.read.load(&quot;/home/rahul/projects/sparkdf/coronavirusdataset/Region.csv&quot;,format=&quot;csv&quot;, sep=&quot;,&quot;, inferSchema=&quot;true&quot;, header=&quot;true&quot;)</span><br><span class="line">regions.limit(10).toPandas()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*hUS5-k5chLXW_9y-WYiQwg.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1149/1*hUS5-k5chLXW_9y-WYiQwg.png" alt="Image for post"></p><p>We want to get this information in our cases file by joining the two DataFrames. We can do this by using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cases = cases.join(regions, [&apos;province&apos;,&apos;city&apos;],how=&apos;left&apos;)</span><br><span class="line">cases.limit(10).toPandas()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*Ms2nehD-DeuKbL28v89tDw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1339/1*Ms2nehD-DeuKbL28v89tDw.png" alt="Image for post"></p><h1 id="2-Broadcast-Map-Side-Joins"><a href="#2-Broadcast-Map-Side-Joins" class="headerlink" title="2. Broadcast/Map Side Joins"></a>2. Broadcast/Map Side Joins</h1><p>Sometimes you might face a scenario where you need to join a very big table(~1B Rows) with a very small table(~100–200 rows). The scenario might also involve increasing the size of your database like in the example below.</p><p><img src="https://miro.medium.com/max/60/1*8XzZhDG53AP5ejj7ULkO7A.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/706/1*8XzZhDG53AP5ejj7ULkO7A.png" alt="Image for post"></p><p>Such sort of operations is aplenty in Spark where you might want to apply multiple operations to a particular key. But assuming that the data for each key in the Big table is large, it will involve a lot of data movement. And sometimes so much that the application itself breaks. A small optimization then you can do when joining on such big tables(assuming the other table is small) is to broadcast the small table to each machine/node when you perform a join. You can do this easily using the broadcast keyword. This has been a lifesaver many times with Spark when everything else fails.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.functions import broadcast</span><br><span class="line">cases = cases.join(broadcast(regions), [&apos;province&apos;,&apos;city&apos;],how=&apos;left&apos;)</span><br></pre></td></tr></table></figure><h1 id="3-Use-SQL-with-DataFrames"><a href="#3-Use-SQL-with-DataFrames" class="headerlink" title="3. Use SQL with DataFrames"></a>3. Use SQL with DataFrames</h1><p>If you want, you can also use SQL with data frames. Let us try to run some SQL on the cases table.</p><p>We first register the cases dataframe to a temporary table cases_table on which we can run SQL operations. As you can see, the result of the SQL select statement is again a Spark Dataframe.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cases.registerTempTable(&apos;cases_table&apos;)</span><br><span class="line">newDF = sqlContext.sql(&apos;select * from cases_table where confirmed&gt;100&apos;)</span><br><span class="line">newDF.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*mE7MvOsWN_Zy8Pg1B9arMg.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/895/1*mE7MvOsWN_Zy8Pg1B9arMg.png" alt="Image for post"></p><p>I have shown a minimal example above, but you can use pretty much complex SQL queries involving GROUP BY, HAVING, AND ORDER BY clauses as well as aliases in the above query.</p><h1 id="4-Create-New-Columns"><a href="#4-Create-New-Columns" class="headerlink" title="4. Create New Columns"></a>4. Create New Columns</h1><p>There are many ways that you can use to create a column in a PySpark Dataframe. I will try to show the most usable of them.</p><h2 id="Using-Spark-Native-Functions"><a href="#Using-Spark-Native-Functions" class="headerlink" title="Using Spark Native Functions"></a>Using Spark Native Functions</h2><p>The most pysparkish way to create a new column in a PySpark DataFrame is by using built-in functions. This is the most performant programmatical way to create a new column, so this is the first place I go whenever I want to do some column manipulation.</p><p>We can use <code>.withcolumn</code> along with PySpark SQL functions to create a new column. In essence, you can find String functions, Date functions, and Math functions already implemented using Spark functions. Our first function, the <code>F.col</code> function gives us access to the column. So if we wanted to add 100 to a column, we could use <code>F.col</code> as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pyspark.sql.functions as F</span><br><span class="line">casesWithNewConfirmed = cases.withColumn(&quot;NewConfirmed&quot;, 100 + F.col(&quot;confirmed&quot;))casesWithNewConfirmed.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*iTG_N0x4KRdCQP5avzhBYA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/895/1*iTG_N0x4KRdCQP5avzhBYA.png" alt="Image for post"></p><p>We can also use math functions like <code>F.exp</code> function:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">casesWithExpConfirmed = cases.withColumn(&quot;ExpConfirmed&quot;, F.exp(&quot;confirmed&quot;))casesWithExpConfirmed.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*JaIautuqNZT0me3uVKTZJg.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/892/1*JaIautuqNZT0me3uVKTZJg.png" alt="Image for post"></p><p>There are a lot of other functions provided in this module, which are enough for most simple use cases. You can check out the functions list <a href="https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions" target="_blank" rel="noopener">here</a>.</p><h2 id="Using-Spark-UDFs"><a href="#Using-Spark-UDFs" class="headerlink" title="Using Spark UDFs"></a>Using Spark UDFs</h2><p>Sometimes we want to do complicated things to a column or multiple columns. This could be thought of as a map operation on a PySpark Dataframe to a single column or multiple columns. While Spark SQL functions do solve many use cases when it comes to column creation, I use Spark UDF whenever I need more matured Python functionality.</p><p>To use Spark UDFs, we need to use the <code>F.udf</code> function to convert a regular python function to a Spark UDF. We also need to specify the return type of the function. In this example the return type is <code>StringType()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pyspark.sql.functions as F</span><br><span class="line">from pyspark.sql.types import *</span><br><span class="line">def casesHighLow(confirmed):</span><br><span class="line">    if confirmed &lt; 50: </span><br><span class="line">        return &apos;low&apos;</span><br><span class="line">    else:</span><br><span class="line">        return &apos;high&apos;</span><br><span class="line">    </span><br><span class="line">#convert to a UDF Function by passing in the function and return type of function</span><br><span class="line">casesHighLowUDF = F.udf(casesHighLow, StringType())CasesWithHighLow = cases.withColumn(&quot;HighLow&quot;, casesHighLowUDF(&quot;confirmed&quot;))</span><br><span class="line">CasesWithHighLow.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*RcawXm0DOYunfIxnXb7voQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/893/1*RcawXm0DOYunfIxnXb7voQ.png" alt="Image for post"></p><h2 id="Using-RDDs"><a href="#Using-RDDs" class="headerlink" title="Using RDDs"></a>Using RDDs</h2><p>This might seem a little odd, but sometimes both the spark UDFs and SQL functions are not enough for a particular use-case. I have observed the RDDs being much more performant in some use-cases in real life. You might want to utilize the better partitioning that you get with spark RDDs. Or you may want to use group functions in Spark RDDs.</p><p>Whatever the case be, I find this way of using RDD to create new columns pretty useful for people who have experience working with RDDs that is the basic building block in the Spark ecosystem. Don’t worry much if you don’t understand it. It is just here for completion.</p><p><strong><em>The process below makes use of the functionality to convert between\</em></strong> <code>***Row\***</code> <strong><em>and\</em></strong> <code>***pythondict\***</code> <strong><em>objects.\</em></strong> We convert a row object to a dictionary. Work with the dictionary as we are used to and convert that dictionary back to row again. This might come in handy in a lot of situations.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">from pyspark.sql import Rowdef rowwise_function(row):</span><br><span class="line">    # convert row to python dictionary:</span><br><span class="line">    row_dict = row.asDict()</span><br><span class="line">    # Add a new key in the dictionary with the new column name and value.</span><br><span class="line">    # This might be a big complex function.</span><br><span class="line">    row_dict[&apos;expConfirmed&apos;] = float(np.exp(row_dict[&apos;confirmed&apos;]))</span><br><span class="line">    # convert dict to row back again:</span><br><span class="line">    newrow = Row(**row_dict)</span><br><span class="line">    # return new row</span><br><span class="line">    return newrow# convert cases dataframe to RDD</span><br><span class="line">cases_rdd = cases.rdd# apply our function to RDD</span><br><span class="line">cases_rdd_new = cases_rdd.map(lambda row: rowwise_function(row))# Convert RDD Back to DataFrame</span><br><span class="line">casesNewDf = sqlContext.createDataFrame(cases_rdd_new)casesNewDf.show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*t73b854I0Hdlks5wbQQx_Q.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/893/1*t73b854I0Hdlks5wbQQx_Q.png" alt="Image for post"></p><h2 id="Using-Pandas-UDF"><a href="#Using-Pandas-UDF" class="headerlink" title="Using Pandas UDF"></a>Using Pandas UDF</h2><p>This functionality was introduced in the Spark version 2.3.1. And this allows you to use pandas functionality with Spark. I generally use it when I have to run a groupBy operation on a Spark dataframe or whenever I need to create rolling features and want to use Pandas rolling functions/window functions rather than Spark window functions which we will go through later in this post.</p><p>The way we use it is by using the <code>F.pandas_udf</code> decorator. <strong><em>We assume here that the input to the function will be a pandas data frame.\</em></strong> And we need to return a pandas dataframe in turn from this function.</p><p>The only complexity here is that we have to provide a schema for the output Dataframe. We can use the original schema of a dataframe to create the outSchema.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases.printSchema()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*an_O0MpNsOqVMioU1ne67g.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/893/1*an_O0MpNsOqVMioU1ne67g.png" alt="Image for post"></p><p>Here I am using Pandas UDF to get normalized confirmed cases grouped by infection_case. The main advantage here is that I get to work with pandas dataframes in Spark.</p><iframe src="https://towardsdatascience.com/media/14e602004a77fc390f9fd960237da04f" allowfullscreen frameborder="0" height="633" width="680" title="pandas_udf.py" class="t u v gg aj" scrolling="auto" style="box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 633px;"></iframe><p><img src="https://miro.medium.com/max/60/1*iUOEcEXVNsYtabSnhXXgwA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/819/1*iUOEcEXVNsYtabSnhXXgwA.png" alt="Image for post"></p><h1 id="5-Spark-Window-Functions"><a href="#5-Spark-Window-Functions" class="headerlink" title="5. Spark Window Functions"></a>5. Spark Window Functions</h1><p>Window functions may make a whole blog post in itself. Here I will talk about some of the most important window functions available in spark.</p><p>For this, I will also use one more data CSV, which has dates present as that will help with understanding Window functions much better. I will use the TimeProvince dataframe which contains daily case information for each province.</p><p><img src="https://miro.medium.com/max/60/1*dAennXpCnDel5e8a2aU16A.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/896/1*dAennXpCnDel5e8a2aU16A.png" alt="Image for post"></p><h2 id="Ranking"><a href="#Ranking" class="headerlink" title="Ranking"></a>Ranking</h2><p>You can get rank as well as dense_rank on a group using this function. For example, you may want to have a column in your cases table that provides the rank of infection_case based on the number of infection_case in a province. We can do this by:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.window import WindowwindowSpec = Window().partitionBy([&apos;province&apos;]).orderBy(F.desc(&apos;confirmed&apos;))cases.withColumn(&quot;rank&quot;,F.rank().over(windowSpec)).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*k0OR_AL_LMq0SKUpHdD7KQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/896/1*k0OR_AL_LMq0SKUpHdD7KQ.png" alt="Image for post"></p><h2 id="Lag-Variables"><a href="#Lag-Variables" class="headerlink" title="Lag Variables"></a>Lag Variables</h2><p>Sometimes our data science models may need lag based features. For example, a model might have variables like the price last week or sales quantity the previous day. We can create such features using the lag function with window functions. Here I am trying to get the confirmed cases 7 days before. I am filtering to show the results as the first few days of corona cases were zeros. You can see here that the lag_7 day feature is shifted by 7 days.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.window import Window</span><br><span class="line">windowSpec = Window().partitionBy([&apos;province&apos;]).orderBy(&apos;date&apos;)</span><br><span class="line">timeprovinceWithLag = timeprovince.withColumn(&quot;lag_7&quot;,F.lag(&quot;confirmed&quot;, 7).over(windowSpec))timeprovinceWithLag.filter(timeprovinceWithLag.date&gt;&apos;2020-03-10&apos;).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*deE34rlGaCf1lQH1iLhCGA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/800/1*deE34rlGaCf1lQH1iLhCGA.png" alt="Image for post"></p><h2 id="Rolling-Aggregations"><a href="#Rolling-Aggregations" class="headerlink" title="Rolling Aggregations"></a>Rolling Aggregations</h2><p>Sometimes it helps to provide rolling averages to our models. For example, we might want to have a rolling 7-day sales sum/mean as a feature for our sales regression model. Let us calculate the rolling mean of confirmed cases for the last 7 days here. This is what a lot of the people are already doing with this dataset to see the real trends.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.window import WindowwindowSpec = Window().partitionBy([&apos;province&apos;]).orderBy(&apos;date&apos;).rowsBetween(-6,0)timeprovinceWithRoll = timeprovince.withColumn(&quot;roll_7_confirmed&quot;,F.mean(&quot;confirmed&quot;).over(windowSpec))timeprovinceWithRoll.filter(timeprovinceWithLag.date&gt;&apos;2020-03-10&apos;).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*MBW-cxmevqPkA1vd5fbo2Q.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/797/1*MBW-cxmevqPkA1vd5fbo2Q.png" alt="Image for post"></p><p>There are a few things here to understand. First is the<code>**rowsBetween(-6,0)**</code> function that we are using here. This function has a form of <code>rowsBetween(start,end)</code> with both start and end inclusive. Using this we only look at the past 7 days in a particular window including the current_day. Here 0 specifies the current_row and -6 specifies the seventh row previous to current_row. Remember we count starting from 0.</p><p>So to get <code>roll_7_confirmed</code> for date <code>2020–03–22</code> we look at the confirmed cases for dates <code>2020–03–22 to 2020–03–16</code> and take their mean.</p><p>If we had used <code>**rowsBetween(-7,-1)**</code> we would just have looked at past 7 days of data and not the current_day.</p><p>One could also find a use for <code>rowsBetween(Window.unboundedPreceding, Window.currentRow)</code> where we take the rows between the first row in a window and the current_row to get running totals. I am calculating cumulative_confirmed here.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pyspark.sql.window import WindowwindowSpec = Window().partitionBy([&apos;province&apos;]).orderBy(&apos;date&apos;).rowsBetween(Window.unboundedPreceding,Window.currentRow)</span><br><span class="line">timeprovinceWithRoll = timeprovince.withColumn(&quot;cumulative_confirmed&quot;,F.sum(&quot;confirmed&quot;).over(windowSpec))</span><br><span class="line">timeprovinceWithRoll.filter(timeprovinceWithLag.date&gt;&apos;2020-03-10&apos;).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*-jfjnbRiCpQxOAviCBnlGw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/792/1*-jfjnbRiCpQxOAviCBnlGw.png" alt="Image for post"></p><h1 id="6-Pivot-Dataframes"><a href="#6-Pivot-Dataframes" class="headerlink" title="6. Pivot Dataframes"></a>6. Pivot Dataframes</h1><p>Sometimes we may need to have the dataframe in flat format. This happens frequently in movie data where we may want to show genres as columns instead of rows. We can use pivot to do this. Here I am trying to get one row for each date and getting the province names as columns.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pivotedTimeprovince = timeprovince.groupBy(&apos;date&apos;).pivot(&apos;province&apos;).agg(F.sum(&apos;confirmed&apos;).alias(&apos;confirmed&apos;) , F.sum(&apos;released&apos;).alias(&apos;released&apos;))pivotedTimeprovince.limit(10).toPandas()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*qY3QiI116g794I7diW5IfA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/803/1*qY3QiI116g794I7diW5IfA.png" alt="Image for post"></p><p>One thing to note here is that we need to provide an aggregation always with the pivot function even if the data has a single row for a date.</p><h1 id="7-Unpivot-Stack-Dataframes"><a href="#7-Unpivot-Stack-Dataframes" class="headerlink" title="7. Unpivot/Stack Dataframes"></a>7. Unpivot/Stack Dataframes</h1><p>This is just the opposite of the pivot. Given a pivoted dataframe like above, can we go back to the original?</p><p>Yes, we can. But the way is not that straightforward. For one we will need to replace <code>-</code> with <code>_</code> in the column names as it interferes with what we are about to do. We can simply rename the columns:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newColnames = [x.replace(&quot;-&quot;,&quot;_&quot;) for x in pivotedTimeprovince.columns]pivotedTimeprovince = pivotedTimeprovince.toDF(*newColnames)</span><br></pre></td></tr></table></figure><p>Now we will need to create an expression which looks like the below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;stack(34, &apos;Busan_confirmed&apos; , Busan_confirmed,&apos;Busan_released&apos; , Busan_released,&apos;Chungcheongbuk_do_confirmed&apos; ,.</span><br><span class="line">.</span><br><span class="line">.&apos;Seoul_released&apos; , Seoul_released,&apos;Ulsan_confirmed&apos; , Ulsan_confirmed,&apos;Ulsan_released&apos; , Ulsan_released) as (Type,Value)&quot;</span><br></pre></td></tr></table></figure><p>The general format is as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;stack(&lt;cnt of columns you want to put in one column&gt;, &apos;firstcolname&apos;, firstcolname , &apos;secondcolname&apos; ,secondcolname ......) as (Type, Value)&quot;</span><br></pre></td></tr></table></figure><p>It may seem daunting, but we can create such an expression using our programming skills.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">expression = &quot;&quot;</span><br><span class="line">cnt=0</span><br><span class="line">for column in pivotedTimeprovince.columns:</span><br><span class="line">    if column!=&apos;date&apos;:</span><br><span class="line">        cnt +=1</span><br><span class="line">        expression += f&quot;&apos;&#123;column&#125;&apos; , &#123;column&#125;,&quot;expression = f&quot;stack(&#123;cnt&#125;, &#123;expression[:-1]&#125;) as (Type,Value)&quot;</span><br></pre></td></tr></table></figure><p>And we can unpivot using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unpivotedTimeprovince = pivotedTimeprovince.select(&apos;date&apos;,F.expr(exprs))</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*hu8pEYBD3x-U1UEA3w5Wkw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/801/1*hu8pEYBD3x-U1UEA3w5Wkw.png" alt="Image for post"></p><p>And voila! we have got our dataframe in a vertical format. There are quite a few column creations, filters, and join operations needed to get exactly the same format as before, but I will not get into those.</p><h1 id="8-Salting"><a href="#8-Salting" class="headerlink" title="8. Salting"></a>8. Salting</h1><p>Sometimes it might happen that a lot of data goes to a single executor since the same key is assigned for a lot of rows in our data. Salting is another way that helps you to manage data skewness.</p><p>So assuming we want to do the sum operation when we have skewed keys. We can start by creating the Salted Key and then doing a double aggregation on that key as the sum of a sum still equals sum. To understand this assume we need the sum of confirmed infection_cases on the cases table and assume that the key infection_cases is skewed. We can do the required operation in two steps.</p><p><strong>1. Create a Salting Key</strong></p><p>We first create a salting key using a concatenation of infection_case column and a random_number between 0 to 9. In case your key is even more skewed, you can split it in even more than 10 parts.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases = cases.withColumn(&quot;salt_key&quot;, F.concat(F.col(&quot;infection_case&quot;), F.lit(&quot;_&quot;), F.monotonically_increasing_id() % 10))</span><br></pre></td></tr></table></figure><p>This is how the table looks after the operation:</p><p><img src="https://miro.medium.com/max/60/1*lqeOANtoNPprEAxcpB56NQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/990/1*lqeOANtoNPprEAxcpB56NQ.png" alt="Image for post"></p><p><strong>2. First Groupby on salt key</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cases_temp = cases.groupBy([&quot;infection_case&quot;,&quot;salt_key&quot;]).agg(F.sum(&quot;confirmed&quot;)).show()</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*IZ_pQGF4N-8eMDInqF7RHQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/984/1*IZ_pQGF4N-8eMDInqF7RHQ.png" alt="Image for post"></p><p><strong>3. Second Group On the original Key</strong></p><p><img src="https://miro.medium.com/max/60/1*vMMG9g7hyxKEVZUdqGCPMQ.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/985/1*vMMG9g7hyxKEVZUdqGCPMQ.png" alt="Image for post"></p><p>Here we saw how the sum of sum can be used to get the final sum. You can also make use of facts like:</p><ul><li>min of min is min</li><li>max of max is max</li><li>sum of count is count</li></ul><p>You can think about ways in which salting as an idea could be applied to joins too.</p><h1 id="Some-More-Tips-and-Tricks"><a href="#Some-More-Tips-and-Tricks" class="headerlink" title="Some More Tips and Tricks"></a>Some More Tips and Tricks</h1><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><p>Spark works on the lazy execution principle. What that means is that nothing really gets executed until you use an action function like the <code>.count()</code> on a dataframe. And if you do a <code>.count</code> function, it generally helps to cache at this step. So I have made it a point to cache() my dataframes whenever I do a <code>.count()</code> operation.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.cache().count()</span><br></pre></td></tr></table></figure><h2 id="Save-and-Load-from-an-intermediate-step"><a href="#Save-and-Load-from-an-intermediate-step" class="headerlink" title="Save and Load from an intermediate step"></a>Save and Load from an intermediate step</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.write.parquet(&quot;data/df.parquet&quot;)</span><br><span class="line">df.unpersist()</span><br><span class="line">spark.read.load(&quot;data/df.parquet&quot;)</span><br></pre></td></tr></table></figure><p>When you work with Spark you will frequently run with memory and storage issues. While in some cases such issues might be resolved using techniques like broadcasting, salting or cache, sometimes just interrupting the workflow and saving and reloading the whole dataframe at a crucial step has helped me a lot. This helps spark to let go of a lot of memory that gets utilized for storing intermediate shuffle data and unused caches.</p><h2 id="Repartitioning"><a href="#Repartitioning" class="headerlink" title="Repartitioning"></a>Repartitioning</h2><p>You might want to repartition your data if you feel your data has been skewed while working with all the transformations and joins. The simplest way to do it is by using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.repartition(1000)</span><br></pre></td></tr></table></figure><p>Sometimes you might also want to repartition by a known scheme as this scheme might be used by a certain join or aggregation operation later on. You can use multiple columns to repartition using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.repartition(&apos;cola&apos;, &apos;colb&apos;,&apos;colc&apos;,&apos;cold&apos;)</span><br></pre></td></tr></table></figure><p>You can get the number of partitions in a data frame using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.rdd.getNumPartitions()</span><br></pre></td></tr></table></figure><p>You can also check out the distribution of records in a partition by using the <code>glom</code> function. This helps in understanding the skew in the data that happens while working with various transformations.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.glom().map(len).collect()</span><br></pre></td></tr></table></figure><h2 id="Reading-Parquet-File-in-Local"><a href="#Reading-Parquet-File-in-Local" class="headerlink" title="Reading Parquet File in Local"></a>Reading Parquet File in Local</h2><p>Sometimes you might want to read the parquet files in a system where Spark is not available. In such cases, I normally use the below code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from glob import glob</span><br><span class="line">def load_df_from_parquet(parquet_directory):</span><br><span class="line">   df = pd.DataFrame()</span><br><span class="line">   for file in glob(f&quot;&#123;parquet_directory&#125;/*&quot;):</span><br><span class="line">      df = pd.concat([df,pd.read_parquet(file)])</span><br><span class="line">   return df</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><img src="https://miro.medium.com/max/60/0*mL0xSG32jEU-gPkb.jpg?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/960/0*mL0xSG32jEU-gPkb.jpg" alt="Image for post"></p><p>Source: <a href="https://pixabay.com/photos/dawn-graduates-throwing-hats-dusk-1840298/" target="_blank" rel="noopener">Pixabay</a></p><p>This was a big post and congratulations on you reaching the end. These are the most common functionalities I end up using in my day to day job.</p><p>Hopefully, I’ve covered the Dataframe basics well enough to pique your interest and help you get started with Spark. If you want to learn more about how Spark Started or RDD basics take a look at this <a href="https://towardsdatascience.com/the-hitchhikers-guide-to-handle-big-data-using-spark-90b9be0fe89a" target="_blank" rel="noopener">post</a></p><p><strong><em>You can find all the code at this\</em></strong> <a href="https://github.com/MLWhiz/data_science_blogs/tree/master/sparkdf" target="_blank" rel="noopener"><strong><em>GitHub\</em></strong></a> <strong><em>repository where I keep code for all my posts.\</em></strong></p><h2 id="Continue-Learning"><a href="#Continue-Learning" class="headerlink" title="Continue Learning"></a>Continue Learning</h2><p>Also, if you want to learn more about Spark and Spark DataFrames, I would like to call out these excellent courses on <a href="https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;offerid=467035.11468293556&amp;type=2&amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fbig-data-essentials" target="_blank" rel="noopener">Big Data Essentials: HDFS, MapReduce and Spark RDD</a> and <a href="https://click.linksynergy.com/link?id=lVarvwc5BD0&amp;offerid=467035.11468293488&amp;type=2&amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fbig-data-analysis" target="_blank" rel="noopener">Big Data Analysis: Hive, Spark SQL, DataFrames and GraphFrames</a> by Yandex on Coursera.</p><p>I am going to be writing more of such posts in the future too. Let me know what you think about the series. Follow me up at <a href="https://medium.com/@rahul_agarwal" target="_blank" rel="noopener"><strong>Medium</strong></a> or Subscribe to my <a href="http://eepurl.com/dbQnuX" target="_blank" rel="noopener"><strong>blog</strong></a> to be informed about them. As always, I welcome feedback and constructive criticism and can be reached on Twitter <a href="https://twitter.com/MLWhiz" target="_blank" rel="noopener">@mlwhiz</a>.</p><p>Also, a small disclaimer — There might be some affiliate links in this post to relevant resources, as sharing knowledge is never a bad idea.</p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyspark </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark WordCount代码</title>
      <link href="2020-Spark/spark-scala-wordcount.html"/>
      <url>2020-Spark/spark-scala-wordcount.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> inputFile =  <span class="string">"file:///E://test.txt"</span></span><br><span class="line">      <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line">      <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">      <span class="keyword">val</span> textFile = sc.textFile(inputFile)</span><br><span class="line">      <span class="keyword">val</span> wordCount = textFile.flatMap(line =&gt; line.split(<span class="string">" "</span>)).map(word =&gt; (word, <span class="number">1</span>)).reduceByKey((a, b) =&gt; a + b)</span><br><span class="line">      wordCount.foreach(println)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala解析json</title>
      <link href="2020-Scala/scala-json.html"/>
      <url>2020-Scala/scala-json.html</url>
      
        <content type="html"><![CDATA[<h2 id="Gson解析json"><a href="#Gson解析json" class="headerlink" title="Gson解析json"></a>Gson解析json</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.<span class="type">Gson</span></span><br><span class="line"><span class="keyword">import</span> com.google.gson.<span class="type">JsonParser</span></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> jsonparam = <span class="string">""</span><span class="string">"&#123;"</span><span class="type">RERUNNING</span><span class="string">":&#123;"</span>nodeN<span class="string">ame":"</span>test_zhangjiaqi_1<span class="string">","</span>preN<span class="string">odes":[],"</span>prevI<span class="string">nterpreters":[],"</span><span class="string">rerun":"</span><span class="string">false"&#125;,"</span><span class="string">name":"</span><span class="number">123123123</span><span class="string">sdfasdf","</span><span class="string">path":[&#123;"</span><span class="string">name":"</span>hdfs:<span class="comment">//master.xxxx.com:8020/data","path":"hdfs://master.xxxx.com:8020/data"&#125;]&#125;"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> gson = <span class="keyword">new</span> <span class="type">Gson</span>()</span><br><span class="line"><span class="keyword">val</span> parser = <span class="keyword">new</span> <span class="type">JsonParser</span>();</span><br><span class="line"><span class="keyword">val</span> p = parser.parse(jsonparam).getAsJsonObject()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取单个值</span></span><br><span class="line"><span class="keyword">val</span> name = p.get(<span class="string">"name"</span>)</span><br><span class="line">println(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取嵌套json对象</span></span><br><span class="line"><span class="keyword">val</span> jsonArray = p.getAsJsonArray(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">val</span> je = jsonArray.get(<span class="number">0</span>).getAsJsonObject</span><br><span class="line">println(je.get(<span class="string">"name"</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyspark wordcount</title>
      <link href="2020-Spark/pyspark-wordcount.html"/>
      <url>2020-Spark/pyspark-wordcount.html</url>
      
        <content type="html"><![CDATA[<h2 id="pyspark环境配置"><a href="#pyspark环境配置" class="headerlink" title="pyspark环境配置"></a>pyspark环境配置</h2><p>参考：<a href="https://www.cnblogs.com/TTyb/p/9546265.html" target="_blank" rel="noopener">https://www.cnblogs.com/TTyb/p/9546265.html</a></p><p>在命令提示符里输入pyspark验证，应该打印如下内容：</p><p><img src="https://cdn.jsdelivr.net/gh/zhang35/Image@master/img/image-20201019175846163.png" alt="image-20201019175846163"></p><p>如果不成功，报如下错误，说明spark环境变量有问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed to find Spark jars directory.</span><br><span class="line">You need to build Spark before running this program.</span><br></pre></td></tr></table></figure><p>windows下路径为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\spark-3.0.1-bin-hadoop2.7\bin</span><br></pre></td></tr></table></figure><p>也就是pyspark.cmd所在的目录一定要被包含到环境变量中。</p><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><p>建立test.txt内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">def</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>测试程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line">sc = SparkContext(<span class="string">"local"</span>, <span class="string">"first app"</span>)</span><br><span class="line">logFile = <span class="string">"file:///E://test.txt"</span></span><br><span class="line">logData = sc.textFile(logFile).cache()</span><br><span class="line">numAs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'a'</span> <span class="keyword">in</span> s).count()</span><br><span class="line">numBs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'b'</span> <span class="keyword">in</span> s).count()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Lines with a: %i, lines with b: %i"</span> % (numAs, numBs))</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lines with a: 2, lines with b: 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark读写数据</title>
      <link href="2020-Spark/spark-sql.html"/>
      <url>2020-Spark/spark-sql.html</url>
      
        <content type="html"><![CDATA[<h2 id="读Mysql作为DataFrame"><a href="#读Mysql作为DataFrame" class="headerlink" title="读Mysql作为DataFrame"></a>读Mysql作为DataFrame</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">Mysql</span></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">DataFrame</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.hive.<span class="type">HiveContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQL1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">s"<span class="subst">$&#123;this.getClass.getSimpleName&#125;</span>"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> sqlContext = <span class="keyword">new</span> <span class="type">HiveContext</span>(sc)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例代码</span></span><br><span class="line">    <span class="keyword">val</span> properties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">properties.put(<span class="string">"user"</span>,<span class="string">"xxx"</span>)</span><br><span class="line">properties.put(<span class="string">"password"</span>,<span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">val</span> url = <span class="string">"jdbc:mysql://192.168.11.26:3306/test_db"</span></span><br><span class="line"><span class="keyword">val</span> df: <span class="type">DataFrame</span> = sqlc.read.jdbc(url,<span class="string">"info_table"</span>,properties)</span><br><span class="line">df.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读CSV作为DataFrame"><a href="#读CSV作为DataFrame" class="headerlink" title="读CSV作为DataFrame"></a>读CSV作为DataFrame</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> data: <span class="type">DataFrame</span> = sqlc.read.format(<span class="string">"com.databricks.spark.csv"</span>)</span><br><span class="line">.option(<span class="string">"header"</span>, <span class="string">"true"</span>) <span class="comment">//在csv第一行有属性"true"，没有就是"false"</span></span><br><span class="line">.option(<span class="string">"inferSchema"</span>, <span class="literal">true</span>.toString) <span class="comment">//这是自动推断属性列的数据类型</span></span><br><span class="line">.load(<span class="string">"E:/test.csv"</span>)</span><br><span class="line">data.show</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[145]Binary Tree Postorder Traversal Python3实现</title>
      <link href="2020-LeetCode/leetcode-145.html"/>
      <url>2020-LeetCode/leetcode-145.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given the root of a binary tree, return the postorder traversal of its nodes' </span></span><br><span class="line"><span class="comment"># values. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [1,null,2,3]</span></span><br><span class="line"><span class="comment"># Output: [3,2,1]</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 2: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = []</span></span><br><span class="line"><span class="comment"># Output: []</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 3: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [1]</span></span><br><span class="line"><span class="comment"># Output: [1]</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 4: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [1,2]</span></span><br><span class="line"><span class="comment"># Output: [2,1]</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 5: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [1,null,2]</span></span><br><span class="line"><span class="comment"># Output: [2,1]</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Constraints: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The number of the nodes in the tree is in the range [0, 100]. </span></span><br><span class="line"><span class="comment">#  -100 &lt;= Node.val &lt;= 100 </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Follow up: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Recursive solution is trivial, could you do it iteratively? </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 栈 树 </span></span><br><span class="line"><span class="comment">#  👍 424 👎 0</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, left=None, right=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        s1 = [root]</span><br><span class="line">        s2 = []</span><br><span class="line">        state = &#123;&#125; <span class="comment"># none：not visited；1：right visited</span></span><br><span class="line">        <span class="keyword">while</span> s1:</span><br><span class="line">            top = s1[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> state.get(top):</span><br><span class="line">                s2.append(top.val)</span><br><span class="line">                <span class="keyword">if</span> top.right: s1.append(top.right)</span><br><span class="line">                state[top] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> top.left: s1[<span class="number">-1</span>] = top.left</span><br><span class="line">                <span class="keyword">else</span>: s1.pop()</span><br><span class="line">        s2.reverse()</span><br><span class="line">        <span class="keyword">return</span> s2</span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>后序遍历，要求非递归，琢磨了好久才写出来。</p><p>使用了两个栈+一个状态dict：<br><code>s1</code>：模拟递归函数栈<br><code>s2</code>：记录最终结果<br><code>state</code>：已访问过该节点的几个孩子，None：未访问过；1：已访问过右孩子；</p><p>结果不很理想：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行耗时:44 ms,击败了47.51% 的Python3用户</span><br><span class="line">内存消耗:13.4 MB,击败了21.18% 的Python3用户</span><br></pre></td></tr></table></figure></p><p>留个坑，后面学习大神解法。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql-grammar</title>
      <link href="2020-SQL/sql-grammar.html"/>
      <url>2020-SQL/sql-grammar.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>substring(str, pos);<br>substring(str, pos, len)<br>上面的表达式可以省略掉第三个参数，如：<br>substring(<code>station</code>,instr(<code>station</code>, ‘号线’)+2)<br>能正常运行。</p><h2 id="字符串合并"><a href="#字符串合并" class="headerlink" title="字符串合并"></a>字符串合并</h2><p>concat(str1, str2,…)<br>例如：concat(LINE_NO,’号线’,ST_NAME)</p><h2 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h2><p>select * from trajectory_copy<br>WHERE DATE_SUB(lastmodified_time, INTERVAL 8 HOUR) &gt;= DATE_SUB(NOW(), INTERVAL 2 MINUTE)</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>注意时间格式的区别：<br>yyyy/MM/dd HH:mm:ss<br>yyyy-MM-dd HH:mm:ss<br>防止出现意料之外的错误。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[117]Populating Next Right Pointers in Each Node II Python3实现</title>
      <link href="2020-LeetCode/leetcode-117.html"/>
      <url>2020-LeetCode/leetcode-117.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary tree </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># struct Node &#123;</span></span><br><span class="line"><span class="comment">#   int val;</span></span><br><span class="line"><span class="comment">#   Node *left;</span></span><br><span class="line"><span class="comment">#   Node *right;</span></span><br><span class="line"><span class="comment">#   Node *next;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Populate each next pointer to point to its next right node. If there is no ne</span></span><br><span class="line"><span class="comment"># xt right node, the next pointer should be set to NULL. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Initially, all next pointers are set to NULL. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Follow up: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  You may only use constant extra space. </span></span><br><span class="line"><span class="comment">#  Recursive approach is fine, you may assume implicit stack space does not coun</span></span><br><span class="line"><span class="comment"># t as extra space for this problem. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [1,2,3,4,5,null,7]</span></span><br><span class="line"><span class="comment"># Output: [1,#,2,3,#,4,5,7,#]</span></span><br><span class="line"><span class="comment"># Explanation: Given the above binary tree (Figure A), your function should popu</span></span><br><span class="line"><span class="comment"># late each next pointer to point to its next right node, just like in Figure B. T</span></span><br><span class="line"><span class="comment"># he serialized output is in level order as connected by the next pointers, with '</span></span><br><span class="line"><span class="comment"># #' signifying the end of each level.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Constraints: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The number of nodes in the given tree is less than 6000. </span></span><br><span class="line"><span class="comment">#  -100 &lt;= node.val &lt;= 100 </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 树 深度优先搜索 </span></span><br><span class="line"><span class="comment">#  👍 263 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        list = [root]</span><br><span class="line">        <span class="keyword">while</span> len(list) &gt; <span class="number">0</span>:</span><br><span class="line">            newList = []</span><br><span class="line">            <span class="keyword">if</span> list[<span class="number">0</span>].left : newList.append(list[<span class="number">0</span>].left)</span><br><span class="line">            <span class="keyword">if</span> list[<span class="number">0</span>].right : newList.append(list[<span class="number">0</span>].right)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">                list[i<span class="number">-1</span>].next = list[i]</span><br><span class="line">                <span class="keyword">if</span> list[i].left : newList.append(list[i].left)</span><br><span class="line">                <span class="keyword">if</span> list[i].right : newList.append(list[i].right)</span><br><span class="line">            list = newList</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>第一反应是层序遍历，将每层的节点前后连接起来，代码也能通过：</p><pre><code>解答成功:执行耗时:64 ms,击败了64.81% 的Python3用户内存消耗:14.5 MB,击败了50.95% 的Python3用户</code></pre><p>但显然没有达到题目要求，空间复杂度没有降下去。</p><hr><p>2020年9月29日更新。</p><p>如何将空间复杂度降至常数级别呢？</p><p>答案是利用已经建立的next指针：假如第n行已经建好了next指针，就可以通过next指针遍历这一行，同时把n+1层的子节点们串起来。这就省下了queue或list的空间。有点类似数学归纳法。</p><p>思路有了，实现起来不是那么容易，如何通过遍历第n层，建立起n+1层节点的连接呢？一开始写的代码有点复杂，几十分钟过去了，果断去看大佬们的题解，ColdMe利用<strong>虚节点</strong>的方式十分清晰易懂，仿照着写了下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        leftmost = root <span class="comment"># 第n层最左节点</span></span><br><span class="line">        <span class="keyword">while</span> leftmost:</span><br><span class="line">            head = Node(<span class="number">0</span>) <span class="comment"># 第n+1层的虚拟头结点</span></span><br><span class="line">            pre = head <span class="comment"># 第n+1层的当前节点</span></span><br><span class="line">            cur = leftmost <span class="comment"># 第n层当前节点</span></span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                <span class="keyword">if</span> cur.left:</span><br><span class="line">                    pre.next = cur.left</span><br><span class="line">                    pre = cur.left</span><br><span class="line">                <span class="keyword">if</span> cur.right:</span><br><span class="line">                    pre.next = cur.right</span><br><span class="line">                    pre = cur.right</span><br><span class="line">                cur = cur.next</span><br><span class="line">            leftmost = head.next <span class="comment"># leftmost指向第n+1层最左节点</span></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>搞懂几个变量的意义就明白算法思路了：<br><code>leftmost</code>：第n层最左节点；<br><code>cur</code>：第n层当前节点；<br><code>head</code>：第n+1层的虚拟头结点；<br><code>pre</code>：第n+1层的当前节点；</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo + Typora + Github/Gitee 搭建博客图床</title>
      <link href="2020-Hexo/picGo-github-image-bed.html"/>
      <url>2020-Hexo/picGo-github-image-bed.html</url>
      
        <content type="html"><![CDATA[<p>使用PicGo图片上传工具，能方便生成Markdown语法需要的图片链接。</p><p>图床可选择GitHub或Gitee，这里默认已经创建好了对应用于存储图片的仓库。</p><h2 id="GitHub图床配置"><a href="#GitHub图床配置" class="headerlink" title="GitHub图床配置"></a>GitHub图床配置</h2><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20201118114303368.png" alt="image-20201118114303368"></p><p>仓库名：用户名/仓库名</p><p>分支名：master</p><p>设定Token：Personal access token，获取方式见下图</p><p>指定存储路径：上传到仓库中的相对路径</p><p>设定自定义域名：<a href="https://cdn.jsdelivr.net/gh/用户名/仓库名" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></p><p>（由于国内访问GitHub速度慢，这里使用了jsdelivr加速，只需把上面URL中的用户名/仓库名替换为自己的图片仓库即可）</p><p>附：Token获取方式</p><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20201118114452786.png" alt="image-20201118114452786"></p><p>新建token时勾选一下repo即可：</p><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20201118114536214.png" alt="image-20201118114536214"></p><h2 id="Gitee图床配置"><a href="#Gitee图床配置" class="headerlink" title="Gitee图床配置"></a>Gitee图床配置</h2><p>安装Gitee插件：</p><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20201118115053392.png" alt="image-20201118115053392"></p><p>配置类似GitHub图床，只是不需要cdn加速了。</p><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20201118115202188.png" alt="image-20201118115202188"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p>最新版本的Typora支持定制上传服务。</p><p>在插入图片时设置”上传图片”；</p><p>在上传服务设定中，选PicGo，并指定程序安装路径。</p><p>点击验证图片上传选项，可以查看是否成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zhang35/Image@master/img/image-20200924142227688.png" alt="image-20200924142227688"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Typora图片上传失败"><a href="#Typora图片上传失败" class="headerlink" title="Typora图片上传失败"></a>Typora图片上传失败</h3><p>检查PicGo-Server的监听端口是否与Typora要求的一致，默认应为36677：</p><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20200927145016752.png" alt="image-20200927145016752"></p><h3 id="打开PicGo崩溃"><a href="#打开PicGo崩溃" class="headerlink" title="打开PicGo崩溃"></a>打开PicGo崩溃</h3><p>打开PicGo报以下错误：A JavaScript error occurred in the main process</p><p>解决方法：重装PicGo，并手动删除<code>%APPDATA%\picgo</code>目录</p><p><img src="https://gitee.com/zhang35/Pic/raw/master/blogImg/image-20201118114214399.png" alt="image-20201118114214399"></p>]]></content>
      
      
      <categories>
          
          <category> hexo个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> Typora </tag>
            
            <tag> Github </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[235]Lowest Common Ancestor of a Binary Search Tree Python3实现</title>
      <link href="2020-LeetCode/leetcode-235.html"/>
      <url>2020-LeetCode/leetcode-235.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary search tree (BST), find the lowest common ancestor (LCA) of two</span></span><br><span class="line"><span class="comment">#  given nodes in the BST. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  According to the definition of LCA on Wikipedia: “The lowest common ancestor </span></span><br><span class="line"><span class="comment"># is defined between two nodes p and q as the lowest node in T that has both p and</span></span><br><span class="line"><span class="comment">#  q as descendants (where we allow a node to be a descendant of itself).” </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5] </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span></span><br><span class="line"><span class="comment"># Output: 6</span></span><br><span class="line"><span class="comment"># Explanation: The LCA of nodes 2 and 8 is 6.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 2: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</span></span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line"><span class="comment"># Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant o</span></span><br><span class="line"><span class="comment"># f itself according to the LCA definition.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Constraints: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  All of the nodes' values will be unique. </span></span><br><span class="line"><span class="comment">#  p and q are different and both values will exist in the BST. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 427 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> root.val &lt; p.val <span class="keyword">and</span> root.val &lt; q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        <span class="keyword">if</span> root.val &gt; p.val <span class="keyword">and</span> root.val &gt; q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>从根节点向下查找，第一个值处于p、q之间的节点即为所求。</p><p>注意p、q的大小关系是未知的。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[106]从中序与后序遍历序列构造二叉树 Python3实现</title>
      <link href="2020-LeetCode/leetcode-106.html"/>
      <url>2020-LeetCode/leetcode-106.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary tree, we install cameras on the nodes of the tree. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Each camera at a node can monitor its parent, itself, and its immediate child</span></span><br><span class="line"><span class="comment"># ren. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Calculate the minimum number of cameras needed to monitor all nodes of the tr</span></span><br><span class="line"><span class="comment"># ee. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: [0,0,null,0,0]</span></span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line"><span class="comment"># Explanation: One camera is enough to monitor all nodes if placed as shown.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Example 2: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: [0,0,null,0,null,0,null,null,0]</span></span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line"><span class="comment"># Explanation: At least two cameras are needed to monitor all nodes of the tree.</span></span><br><span class="line"><span class="comment">#  The above image shows one of the valid configurations of camera placement.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Note: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The number of nodes in the given tree will be in the range [1, 1000]. </span></span><br><span class="line"><span class="comment">#  Every node has value 0. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 树 深度优先搜索 动态规划 </span></span><br><span class="line"><span class="comment">#  👍 171 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, inorder: List[int], postorder: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(root, l, r)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> l &gt; r : <span class="keyword">return</span></span><br><span class="line">            node = TreeNode(postorder[root])</span><br><span class="line">            k = inorder.index(postorder[root])</span><br><span class="line">            node.left = fun(root<span class="number">-1</span>-(r-k), l, k<span class="number">-1</span>)</span><br><span class="line">            node.right = fun(root<span class="number">-1</span>, k+<span class="number">1</span>, r)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        n = len(postorder)</span><br><span class="line">        <span class="keyword">return</span> fun(n<span class="number">-1</span>, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>定义了辅助函数</p><p><code>fun(root, l, r, inorder, postorder)</code></p><p>root代表postorder[]中的下标，指示树根；</p><p>l、r代表inorder[]中的下标，指示左右边界；</p><p>重点掌握：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k = inorder.index(postorder[root])</span><br><span class="line">node.left = fun(root<span class="number">-1</span>-(r-k), l, k<span class="number">-1</span>)</span><br><span class="line">node.right = fun(root<span class="number">-1</span>, k+<span class="number">1</span>, r)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[113]路径总和 II Python3实现</title>
      <link href="2020-LeetCode/leetcode-113.html"/>
      <url>2020-LeetCode/leetcode-113.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  说明: 叶子节点是指没有子节点的节点。 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  示例: </span></span><br><span class="line"><span class="comment"># 给定如下二叉树，以及目标和 sum = 22， </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#                5</span></span><br><span class="line"><span class="comment">#              / \</span></span><br><span class="line"><span class="comment">#             4   8</span></span><br><span class="line"><span class="comment">#            /   / \</span></span><br><span class="line"><span class="comment">#           11  13  4</span></span><br><span class="line"><span class="comment">#          /  \    / \</span></span><br><span class="line"><span class="comment">#         7    2  5   1</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  返回: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  [</span></span><br><span class="line"><span class="comment">#    [5,4,11,2],</span></span><br><span class="line"><span class="comment">#    [5,8,4,5]</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 树 深度优先搜索 </span></span><br><span class="line"><span class="comment">#  👍 329 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        list = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node, curSum)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span></span><br><span class="line">            curSum += node.val</span><br><span class="line">            path.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right <span class="keyword">and</span> curSum==sum:  <span class="comment">#leave node</span></span><br><span class="line">                list.append(path[:])  <span class="comment">#复制出整个序列,否则是传引用，后面修改path会影响list里的值</span></span><br><span class="line">            <span class="keyword">if</span> node.left: dfs(node.left, curSum)</span><br><span class="line">            <span class="keyword">if</span> node.right: dfs(node.right, curSum)</span><br><span class="line">            path.pop() <span class="comment">#注意恢复path</span></span><br><span class="line">        dfs(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.append(path[:])  <span class="comment">#复制出整个序列,否则是传引用，后面修改path会影响list里的值</span></span><br></pre></td></tr></table></figure><p>python的传值和传址是根据传入参数的类型来选择的：</p><p><strong>传值的参数类型：数字，字符串，元组（immutable）<br>传址的参数类型：列表，字典（mutable）</strong></p><p>对于list默认会传地址。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[501]Find Mode in Binary Search Tree Python3实现</title>
      <link href="2020-LeetCode/leetcode-501.html"/>
      <url>2020-LeetCode/leetcode-501.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary search tree (BST) with duplicates, find all the mode(s) (the mo</span></span><br><span class="line"><span class="comment"># st frequently occurred element) in the given BST. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Assume a BST is defined as follows: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The left subtree of a node contains only nodes with keys less than or equal t</span></span><br><span class="line"><span class="comment"># o the node's key. </span></span><br><span class="line"><span class="comment">#  The right subtree of a node contains only nodes with keys greater than or equ</span></span><br><span class="line"><span class="comment"># al to the node's key. </span></span><br><span class="line"><span class="comment">#  Both the left and right subtrees must also be binary search trees. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  For example: </span></span><br><span class="line"><span class="comment"># Given BST [1,null,2,2], </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#    1</span></span><br><span class="line"><span class="comment">#     \</span></span><br><span class="line"><span class="comment">#      2</span></span><br><span class="line"><span class="comment">#     /</span></span><br><span class="line"><span class="comment">#    2</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  return [2]. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Note: If a tree has more than one mode, you can return them in any order. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Follow up: Could you do that without using any extra space? (Assume that the </span></span><br><span class="line"><span class="comment"># implicit stack space incurred due to recursion does not count). </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 163 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        count = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root, count)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> root): <span class="keyword">return</span></span><br><span class="line">            count[root.val] = count.get(root.val, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            dfs(root.left, count)</span><br><span class="line">            dfs(root.right, count)</span><br><span class="line">        dfs(root, count)</span><br><span class="line">        maxNum = <span class="number">0</span></span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> count.items():</span><br><span class="line">            <span class="keyword">if</span> item[<span class="number">1</span>] &gt; maxNum:</span><br><span class="line">                list.clear();</span><br><span class="line">                list.append(item[<span class="number">0</span>])</span><br><span class="line">                maxNum = item[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> item[<span class="number">1</span>] == maxNum:</span><br><span class="line">                list.append(item[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行耗时:76 ms,击败了46.02% 的Python3用户</span></span><br><span class="line"><span class="comment">#内存消耗:17.2 MB,击败了58.56% 的Python3用户</span></span><br></pre></td></tr></table></figure><p>也可以用简洁的写法生成list，但效率很低：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      maxValue = max(count.values())</span><br><span class="line">      <span class="keyword">return</span> [key <span class="keyword">for</span> key <span class="keyword">in</span> count.keys() <span class="keyword">if</span> count[key]==maxValue]</span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 执行耗时:84 ms,击败了25.66% 的Python3用户</span></span><br><span class="line"><span class="comment">#内存消耗:17.2 MB,击败了48.66% 的Python3用户</span></span><br></pre></td></tr></table></figure><p>上面是最笨的想法，直接遍历节点并计数，但没有用到二分查找树的特性，也没能做到”不用额外空间“。</p><h3 id="改进做法"><a href="#改进做法" class="headerlink" title="改进做法"></a>改进做法</h3><p>二分查找树 =&gt; 中序遍历得到递增数列</p><p>问题可转化成在递增数列中找众数，空间复杂度可降为O(1)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        cur = <span class="keyword">None</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        maxCount = <span class="number">0</span></span><br><span class="line">        list = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> cur, count, maxCount, list</span><br><span class="line">            <span class="keyword">if</span> root.left: inorder(root.left)</span><br><span class="line">            <span class="keyword">if</span> (root.val == cur):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = root.val</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; maxCount:</span><br><span class="line">                maxCount = count</span><br><span class="line">                list = [cur]</span><br><span class="line">            <span class="keyword">elif</span> count == maxCount:</span><br><span class="line">                list.append(cur)</span><br><span class="line">            <span class="keyword">if</span> root.right: inorder(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root: inorder(root)</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行耗时:80 ms,击败了33.08% 的Python3用户</span></span><br><span class="line"><span class="comment">#内存消耗:17.2 MB,击败了63.71% 的Python3用户</span></span><br></pre></td></tr></table></figure><h3 id="终极方法：Morris中序遍历"><a href="#终极方法：Morris中序遍历" class="headerlink" title="终极方法：Morris中序遍历"></a>终极方法：Morris中序遍历</h3><p>KMP算法的发明者之一Morris设计的神级遍历方法。</p><p>可将非递归遍历中的空间复杂度降为O(1)，从而实现时间复杂度为O(N)，而空间复杂度为O(1)的精妙算法。（普通递归算法要算上栈的空间，复杂度是O(n)）</p><p>morris遍历利用的是树的叶节点左右孩子为空（树的大量空闲指针），实现空间开销的极限缩减。</p><p>本题在遍历时若使用Morris算法，能将空间复杂度降到O(1)。</p><p>待学习，留个坑这周补上。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础语法</title>
      <link href="2020-Python/python-grammar.html"/>
      <url>2020-Python/python-grammar.html</url>
      
        <content type="html"><![CDATA[<h2 id="列表推导式生成list"><a href="#列表推导式生成list" class="headerlink" title="列表推导式生成list"></a>列表推导式生成list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in后面跟其他可迭代对象,如字符串</span></span><br><span class="line">list_c = [<span class="number">7</span> * c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"python"</span>]</span><br><span class="line">print(list_c) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 带if条件语句的列表推导式</span></span><br><span class="line">list_d = [d <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">6</span>) <span class="keyword">if</span> d % <span class="number">2</span> != <span class="number">0</span>]</span><br><span class="line">print(list_d) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个for循环</span></span><br><span class="line">list_e = [(e, f * f) <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>)]</span><br><span class="line">print(list_e) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套列表推导式,多个并列条件</span></span><br><span class="line">list_g = [[x <span class="keyword">for</span> x <span class="keyword">in</span> range(g - <span class="number">3</span>, g)] <span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">22</span>) <span class="keyword">if</span> g % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> g != <span class="number">0</span>]</span><br><span class="line">print(list_g)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'ppppppp'</span>, <span class="string">'yyyyyyy'</span>, <span class="string">'ttttttt'</span>, <span class="string">'hhhhhhh'</span>, <span class="string">'ooooooo'</span>, <span class="string">'nnnnnnn'</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">[(<span class="number">0</span>, <span class="number">25</span>), (<span class="number">0</span>, <span class="number">100</span>), (<span class="number">1</span>, <span class="number">25</span>), (<span class="number">1</span>, <span class="number">100</span>), (<span class="number">2</span>, <span class="number">25</span>), (<span class="number">2</span>, <span class="number">100</span>)]</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>], [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>], [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>], [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/weixin_43790276/article/details/90247423" target="_blank" rel="noopener">Python列表推导式_weixin_43790276的博客-CSDN博客</a></p><h2 id="Dict操作"><a href="#Dict操作" class="headerlink" title="Dict操作"></a>Dict操作</h2><h3 id="找出最大值"><a href="#找出最大值" class="headerlink" title="找出最大值"></a>找出最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sampleDict = &#123;<span class="string">'Ritika'</span>: <span class="number">5</span>, <span class="string">'Sam'</span>: <span class="number">27</span>, <span class="string">'John'</span>: <span class="number">12</span>, <span class="string">'Sachin'</span>: <span class="number">14</span>, <span class="string">'Mark'</span>: <span class="number">19</span>, <span class="string">'Shaun'</span> : <span class="number">27</span>&#125;</span><br><span class="line">itemMaxValue = max(sampleDict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">maxValue = max(sampleDict.values())</span><br><span class="line">print(itemMaxValue[<span class="number">0</span>], maxValue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># Sam 27</span></span><br></pre></td></tr></table></figure><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>层序遍历二叉树：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line">s = Solution()</span><br><span class="line">q = Queue()</span><br><span class="line">q.put(root)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    node = q.get()</span><br><span class="line">    print(node.val)</span><br><span class="line">    <span class="keyword">if</span> node.left: q.put(node.left)</span><br><span class="line">    <span class="keyword">if</span> node.right: q.put(node.right)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark核心概念RDD</title>
      <link href="2020-Spark/spark-rdd.html"/>
      <url>2020-Spark/spark-rdd.html</url>
      
        <content type="html"><![CDATA[<p>RDD（Resilient Distributed Datasets）弹性分布式数据集 ，是Spark中最基本的抽象，在 RDD 源码中这样来描述 RDD：</p><ul><li><p>A list of partitions</p></li><li><p>A function for computing each split</p></li><li><p>A list of dependencies on other RDDs</p></li><li><p>Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</p></li><li><p>Optionally, a list of preferred locations to compute each split on (e.g. block locations for an HDFS file)</p></li></ul><p>个人理解，RDD可并行化数据集的抽象，对它的操作能自动分发到集群上处理。</p><p>RDD支持两种操作：转换（transformation）从现有的数据集创建一个新的数据集；而动作（actions）在数据集上运行计算后，返回一个值给驱动程序。</p><p>经典的WordCount例子，同时包含了actions和transformation，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200924133739758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><p>其中hello.txt如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200924133739657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="请添加图片描述"></p><p>下面是transformation和actions的常用算子介绍。</p><h2 id="一、Transformation"><a href="#一、Transformation" class="headerlink" title="一、Transformation"></a>一、Transformation</h2><p>spark 常用的 Transformation 算子如下表：</p><table><thead><tr><th>Transformation 算子</th><th>Meaning（含义）</th></tr></thead><tbody><tr><td><strong>map</strong>(<em>func</em>)</td><td>对原 RDD 中每个元素运用 <em>func</em> 函数，并生成新的 RDD</td></tr><tr><td><strong>filter</strong>(<em>func</em>)</td><td>对原 RDD 中每个元素使用<em>func</em> 函数进行过滤，并生成新的 RDD</td></tr><tr><td><strong>flatMap</strong>(<em>func</em>)</td><td>与 map 类似，但是每一个输入的 item 被映射成 0 个或多个输出的 items（ <em>func</em> 返回类型需要为 Seq ）。</td></tr><tr><td><strong>mapPartitions</strong>(<em>func</em>)</td><td>与 map 类似，但函数单独在 RDD 的每个分区上运行， <em>func</em>函数的类型为 Iterator<t> =&gt; Iterator<u> ，其中 T 是 RDD 的类型，即 RDD[T]</u></t></td></tr><tr><td><strong>mapPartitionsWithIndex</strong>(<em>func</em>)</td><td>与 mapPartitions 类似，但 <em>func</em> 类型为 (Int, Iterator<t>) =&gt; Iterator<u> ，其中第一个参数为分区索引</u></t></td></tr><tr><td><strong>sample</strong>(<em>withReplacement</em>, <em>fraction</em>, <em>seed</em>)</td><td>数据采样，有三个可选参数：设置是否放回（withReplacement）、采样的百分比（<em>fraction</em>）、随机数生成器的种子（seed）；</td></tr><tr><td><strong>union</strong>(<em>otherDataset</em>)</td><td>合并两个 RDD</td></tr><tr><td><strong>intersection</strong>(<em>otherDataset</em>)</td><td>求两个 RDD 的交集</td></tr><tr><td><strong>distinct</strong>([<em>numTasks</em>]))</td><td>去重</td></tr><tr><td><strong>groupByKey</strong>([<em>numTasks</em>])</td><td>按照 key 值进行分区，即在一个 (K, V) 对的 dataset 上调用时，返回一个 (K, Iterable<v>) <strong>Note:</strong> 如果分组是为了在每一个 key 上执行聚合操作（例如，sum 或 average)，此时使用 <code>reduceByKey</code> 或 <code>aggregateByKey</code> 性能会更好 <strong>Note:</strong> 默认情况下，并行度取决于父 RDD 的分区数。可以传入 <code>numTasks</code> 参数进行修改。</v></td></tr><tr><td><strong>reduceByKey</strong>(<em>func</em>, [<em>numTasks</em>])</td><td>按照 key 值进行分组，并对分组后的数据执行归约操作。</td></tr><tr><td><strong>aggregateByKey</strong>(<em>zeroValue</em>,<em>numPartitions</em>)(<em>seqOp</em>, <em>combOp</em>, [<em>numTasks</em>])</td><td>当调用（K，V）对的数据集时，返回（K，U）对的数据集，其中使用给定的组合函数和 zeroValue 聚合每个键的值。与 groupByKey 类似，reduce 任务的数量可通过第二个参数进行配置。</td></tr><tr><td><strong>sortByKey</strong>([<em>ascending</em>], [<em>numTasks</em>])</td><td>按照 key 进行排序，其中的 key 需要实现 Ordered 特质，即可比较</td></tr><tr><td><strong>join</strong>(<em>otherDataset</em>, [<em>numTasks</em>])</td><td>在一个 (K, V) 和 (K, W) 类型的 dataset 上调用时，返回一个 (K, (V, W)) pairs 的 dataset，等价于内连接操作。如果想要执行外连接，可以使用 <code>leftOuterJoin</code>, <code>rightOuterJoin</code> 和 <code>fullOuterJoin</code> 等算子。</td></tr><tr><td><strong>cogroup</strong>(<em>otherDataset</em>, [<em>numTasks</em>])</td><td>在一个 (K, V) 对的 dataset 上调用时，返回一个 (K, (Iterable<v>, Iterable<w>)) tuples 的 dataset。</w></v></td></tr><tr><td><strong>cartesian</strong>(<em>otherDataset</em>)</td><td>在一个 T 和 U 类型的 dataset 上调用时，返回一个 (T, U) 类型的 dataset（即笛卡尔积）。</td></tr><tr><td><strong>coalesce</strong>(<em>numPartitions</em>)</td><td>将 RDD 中的分区数减少为 numPartitions。</td></tr><tr><td><strong>repartition</strong>(<em>numPartitions</em>)</td><td>随机重新调整 RDD 中的数据以创建更多或更少的分区，并在它们之间进行平衡。</td></tr><tr><td><strong>repartitionAndSortWithinPartitions</strong>(<em>partitioner</em>)</td><td>根据给定的 partitioner（分区器）对 RDD 进行重新分区，并对分区中的数据按照 key 值进行排序。这比调用 <code>repartition</code> 然后再 sorting（排序）效率更高，因为它可以将排序过程推送到 shuffle 操作所在的机器。</td></tr></tbody></table><p>下面分别给出这些算子的基本使用示例：</p><h3 id="1-1-map"><a href="#1-1-map" class="headerlink" title="1.1 map"></a>1.1 map</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">sc.parallelize(list).map(_ * <span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果： 10 20 30 （这里为了节省篇幅去掉了换行,后文亦同）</span></span><br></pre></td></tr></table></figure><h3 id="1-2-filter"><a href="#1-2-filter" class="headerlink" title="1.2 filter"></a>1.2 filter</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">21</span>)</span><br><span class="line">sc.parallelize(list).filter(_ &gt;= <span class="number">10</span>).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： 10 12 21</span></span><br></pre></td></tr></table></figure><h3 id="1-3-flatMap"><a href="#1-3-flatMap" class="headerlink" title="1.3 flatMap"></a>1.3 flatMap</h3><p><code>flatMap(func)</code> 与 <code>map</code> 类似，但每一个输入的 item 会被映射成 0 个或多个输出的 items（ <em>func</em> 返回类型需要为 <code>Seq</code>）。</p><p>二者的区别如图：</p><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p><img src="https://img-blog.csdnimg.cn/20200924133915342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p><img src="https://img-blog.csdnimg.cn/2020092413392219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val list = List(List(1, 2), List(3), List(), List(4, 5))</span><br><span class="line">sc.parallelize(list).flatMap(_.toList).map(_ * 10).foreach(println)</span><br><span class="line"></span><br><span class="line">// 输出结果 ： 10 20 30 40 50</span><br></pre></td></tr></table></figure><p>flatMap 这个算子在日志分析中使用概率非常高，这里进行一下演示：拆分输入的每行数据为单个单词，并赋值为 1，代表出现一次，之后按照单词分组并统计其出现总次数，代码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lines = <span class="type">List</span>(<span class="string">"spark flume spark"</span>,</span><br><span class="line">                 <span class="string">"hadoop flume hive"</span>)</span><br><span class="line">sc.parallelize(lines).flatMap(line =&gt; line.split(<span class="string">" "</span>)).</span><br><span class="line">map(word=&gt;(word,<span class="number">1</span>)).reduceByKey(_+_).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hive,<span class="number">1</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(flume,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="1-4-mapPartitions"><a href="#1-4-mapPartitions" class="headerlink" title="1.4 mapPartitions"></a>1.4 mapPartitions</h3><p>与 map 类似，但函数单独在 RDD 的每个分区上运行， <em>func</em>函数的类型为 <code>Iterator&lt;T&gt; =&gt; Iterator&lt;U&gt;</code> (其中 T 是 RDD 的类型)，即输入和输出都必须是可迭代类型。</p><p>map是对rdd中的每一个元素进行操作；</p><p>mapPartitions则是对rdd中的每个分区的迭代器进行操作，优点是快，缺点是可能内存溢出（map会自动回收内存）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list, <span class="number">3</span>).mapPartitions(iterator =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">Int</span>]</span><br><span class="line">  <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">    buffer.append(iterator.next() * <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  buffer.toIterator</span><br><span class="line">&#125;).foreach(println)</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">100</span> <span class="number">200</span> <span class="number">300</span> <span class="number">400</span> <span class="number">500</span> <span class="number">600</span></span><br></pre></td></tr></table></figure><h3 id="1-5-mapPartitionsWithIndex"><a href="#1-5-mapPartitionsWithIndex" class="headerlink" title="1.5 mapPartitionsWithIndex"></a>1.5 mapPartitionsWithIndex</h3><p>与 mapPartitions 类似，但 <em>func</em> 类型为 <code>(Int, Iterator&lt;T&gt;) =&gt; Iterator&lt;U&gt;</code> ，其中第一个参数为分区索引。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list, <span class="number">3</span>).mapPartitionsWithIndex((index, iterator) =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> buffer = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">String</span>]</span><br><span class="line">  <span class="keyword">while</span> (iterator.hasNext) &#123;</span><br><span class="line">    buffer.append(index + <span class="string">"分区:"</span> + iterator.next() * <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  buffer.toIterator</span><br><span class="line">&#125;).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整输出</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">DAGScheduler</span>: <span class="type">Submitting</span> <span class="number">3</span> missing tasks from <span class="type">ResultStage</span> <span class="number">0</span> (<span class="type">MapPartitionsRDD</span>[<span class="number">1</span>] at mapPartitionsWithIndex at <span class="type">App</span>.scala:<span class="number">15</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">TaskSchedulerImpl</span>: <span class="type">Adding</span> task set <span class="number">0.0</span> <span class="keyword">with</span> <span class="number">3</span> tasks</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Starting</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>, localhost, partition <span class="number">0</span>, <span class="type">PROCESS_LOCAL</span>, <span class="number">5321</span> bytes)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">44</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Running</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span>分区:<span class="number">100</span></span><br><span class="line"><span class="number">0</span>分区:<span class="number">200</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Finished</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>). <span class="number">843</span> bytes result sent to driver</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Starting</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>, localhost, partition <span class="number">1</span>, <span class="type">PROCESS_LOCAL</span>, <span class="number">5321</span> bytes)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Running</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Finished</span> task <span class="number">0.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">0</span>) in <span class="number">140</span> ms on localhost (<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Finished</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>). <span class="number">756</span> bytes result sent to driver</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Starting</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>, localhost, partition <span class="number">2</span>, <span class="type">PROCESS_LOCAL</span>, <span class="number">5321</span> bytes)</span><br><span class="line"><span class="number">1</span>分区:<span class="number">300</span></span><br><span class="line"><span class="number">1</span>分区:<span class="number">400</span></span><br><span class="line"><span class="number">2</span>分区:<span class="number">500</span></span><br><span class="line"><span class="number">2</span>分区:<span class="number">600</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Running</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">Executor</span>: <span class="type">Finished</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>). <span class="number">756</span> bytes result sent to driver</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Finished</span> task <span class="number">1.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">1</span>) in <span class="number">26</span> ms on localhost (<span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSetManager</span>: <span class="type">Finished</span> task <span class="number">2.0</span> in stage <span class="number">0.0</span> (<span class="type">TID</span> <span class="number">2</span>) in <span class="number">20</span> ms on localhost (<span class="number">3</span>/<span class="number">3</span>)</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">DAGScheduler</span>: <span class="type">ResultStage</span> <span class="number">0</span> (foreach at <span class="type">App</span>.scala:<span class="number">21</span>) finished in <span class="number">0.196</span> s</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">TaskSchedulerImpl</span>: <span class="type">Removed</span> <span class="type">TaskSet</span> <span class="number">0.0</span>, whose tasks have all completed, from pool </span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">DAGScheduler</span>: <span class="type">Job</span> <span class="number">0</span> finished: foreach at <span class="type">App</span>.scala:<span class="number">21</span>, took <span class="number">0.427307</span> s</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">SparkContext</span>: <span class="type">Invoking</span> stop() from shutdown hook</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">SparkUI</span>: <span class="type">Stopped</span> <span class="type">Spark</span> web <span class="type">UI</span> at http:<span class="comment">//192.168.15.16:4040</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">MapOutputTrackerMasterEndpoint</span>: <span class="type">MapOutputTrackerMasterEndpoint</span> stopped!</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">MemoryStore</span>: <span class="type">MemoryStore</span> cleared</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">BlockManager</span>: <span class="type">BlockManager</span> stopped</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">BlockManagerMaster</span>: <span class="type">BlockManagerMaster</span> stopped</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">OutputCommitCoordinator</span>$<span class="type">OutputCommitCoordinatorEndpoint</span>: <span class="type">OutputCommitCoordinator</span> stopped!</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">SparkContext</span>: <span class="type">Successfully</span> stopped <span class="type">SparkContext</span></span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">ShutdownHookManager</span>: <span class="type">Shutdown</span> hook called</span><br><span class="line"><span class="number">20</span>/<span class="number">09</span>/<span class="number">23</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">45</span> <span class="type">INFO</span> <span class="type">ShutdownHookManager</span>: <span class="type">Deleting</span> directory <span class="type">C</span>:\<span class="type">Users</span>\<span class="type">Administrator</span>\<span class="type">AppData</span>\<span class="type">Local</span>\<span class="type">Temp</span>\spark<span class="number">-651</span>a1d82-f2c2<span class="number">-4</span>d0e<span class="number">-92</span>de-e838cef3ad3c</span><br></pre></td></tr></table></figure><h3 id="1-6-sample"><a href="#1-6-sample" class="headerlink" title="1.6 sample"></a>1.6 sample</h3><p>数据采样。有三个可选参数：设置是否放回 (withReplacement)、采样的百分比 (fraction)、随机数生成器的种子 (seed) 。</p><p>其中<code>fraction</code>参数在<code>withReplacement</code>不同时的含义不同：</p><ul><li>当<code>withReplacement=false</code>时：表示每个元素被抽到的概率，分数一定是[0,1] ；</li><li>当<code>withReplacement=true</code>时：表示选择每个元素的期望次数，分数必须大于等于0。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">sc.parallelize(list).sample(withReplacement = <span class="literal">false</span>, fraction = <span class="number">0.5</span>).foreach(println)</span><br><span class="line"><span class="comment">// 输出：2 4 5 6</span></span><br></pre></td></tr></table></figure><h3 id="1-7-union"><a href="#1-7-union" class="headerlink" title="1.7 union"></a>1.7 union</h3><p>合并两个 RDD：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val list1 = List(1, 2, 3)</span><br><span class="line">val list2 = List(4, 5, 6)</span><br><span class="line">sc.parallelize(list1).union(sc.parallelize(list2)).foreach(println)</span><br><span class="line">// 输出: 1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h3 id="1-8-intersection"><a href="#1-8-intersection" class="headerlink" title="1.8 intersection"></a>1.8 intersection</h3><p>求两个 RDD 的交集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val list1 = List(1, 2, 3, 4, 5)</span><br><span class="line">val list2 = List(4, 5, 6)</span><br><span class="line">sc.parallelize(list1).intersection(sc.parallelize(list2)).foreach(println)</span><br><span class="line">// 输出:  4 5</span><br></pre></td></tr></table></figure><h3 id="1-9-distinct"><a href="#1-9-distinct" class="headerlink" title="1.9 distinct"></a>1.9 distinct</h3><p>去重：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val list = List(1, 2, 2, 4, 4)</span><br><span class="line">sc.parallelize(list).distinct().foreach(println)</span><br><span class="line">// 输出: 4 1 2</span><br></pre></td></tr></table></figure><h3 id="1-10-groupByKey"><a href="#1-10-groupByKey" class="headerlink" title="1.10 groupByKey"></a>1.10 groupByKey</h3><p>按照键进行分组：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">2</span>), (<span class="string">"spark"</span>, <span class="number">3</span>), (<span class="string">"spark"</span>, <span class="number">5</span>), (<span class="string">"storm"</span>, <span class="number">6</span>), (<span class="string">"hadoop"</span>, <span class="number">2</span>))</span><br><span class="line">sc.parallelize(list).groupByKey().map(x =&gt; (x._1, x._2.toList)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">(spark,<span class="type">List</span>(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">(hadoop,<span class="type">List</span>(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">(storm,<span class="type">List</span>(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>注：<code>groupByKey</code>返回类型为<code>CompactBuffer</code>（<code>ArrayBuffer</code>的替代选择，占用内存更少），直接打印结果如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sc.parallelize(list).groupByKey.foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line">(spark,<span class="type">CompactBuffer</span>(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">(hadoop,<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">(storm,<span class="type">CompactBuffer</span>(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h3 id="1-11-reduceByKey"><a href="#1-11-reduceByKey" class="headerlink" title="1.11 reduceByKey"></a>1.11 reduceByKey</h3><p>按照键进行归约操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">2</span>), (<span class="string">"spark"</span>, <span class="number">3</span>), (<span class="string">"spark"</span>, <span class="number">5</span>), (<span class="string">"storm"</span>, <span class="number">6</span>), (<span class="string">"hadoop"</span>, <span class="number">2</span>))</span><br><span class="line">sc.parallelize(list).reduceByKey(_ + _).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">(spark,<span class="number">8</span>)</span><br><span class="line">(hadoop,<span class="number">4</span>)</span><br><span class="line">(storm,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>经典WordCount算子。</p><h3 id="1-12-sortBy-amp-sortByKey"><a href="#1-12-sortBy-amp-sortByKey" class="headerlink" title="1.12 sortBy &amp; sortByKey"></a>1.12 sortBy &amp; sortByKey</h3><p>按照键（100、）进行排序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>((<span class="number">100</span>, <span class="string">"hadoop"</span>), (<span class="number">90</span>, <span class="string">"spark"</span>), (<span class="number">120</span>, <span class="string">"storm"</span>))</span><br><span class="line">sc.parallelize(list01).sortByKey(ascending = <span class="literal">false</span>).foreach(println)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">(<span class="number">120</span>,storm)</span><br><span class="line">(<span class="number">100</span>,hadoop)</span><br><span class="line">(<span class="number">90</span>,spark)</span><br></pre></td></tr></table></figure><p>按照指定元素进行排序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list02 = <span class="type">List</span>((<span class="string">"hadoop"</span>,<span class="number">100</span>), (<span class="string">"spark"</span>,<span class="number">90</span>), (<span class="string">"storm"</span>,<span class="number">120</span>))</span><br><span class="line">sc.parallelize(list02).sortBy(x=&gt;x._2,ascending=<span class="literal">false</span>).foreach(println)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">(storm,<span class="number">120</span>)</span><br><span class="line">(hadoop,<span class="number">100</span>)</span><br><span class="line">(spark,<span class="number">90</span>)</span><br></pre></td></tr></table></figure><h3 id="1-13-join"><a href="#1-13-join" class="headerlink" title="1.13 join"></a>1.13 join</h3><p>在一个 (K, V) 和 (K, W) 类型的 Dataset 上调用时，返回一个 (K, (V, W)) 的 Dataset，等价于内连接操作。如果想要执行外连接，可以使用 <code>leftOuterJoin</code>, <code>rightOuterJoin</code> 和 <code>fullOuterJoin</code> 等算子。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"student01"</span>), (<span class="number">2</span>, <span class="string">"student02"</span>), (<span class="number">3</span>, <span class="string">"student03"</span>))</span><br><span class="line"><span class="keyword">val</span> list02 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"teacher01"</span>), (<span class="number">2</span>, <span class="string">"teacher02"</span>), (<span class="number">3</span>, <span class="string">"teacher03"</span>))</span><br><span class="line">sc.parallelize(list01).join(sc.parallelize(list02)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">(<span class="number">1</span>,(student01,teacher01))</span><br><span class="line">(<span class="number">3</span>,(student03,teacher03))</span><br><span class="line">(<span class="number">2</span>,(student02,teacher02))</span><br></pre></td></tr></table></figure><h3 id="1-14-cogroup"><a href="#1-14-cogroup" class="headerlink" title="1.14 cogroup"></a>1.14 cogroup</h3><p>在一个 (K, V) 对的 Dataset 上调用时，返回多个类型为 (K, (Iterable<v>, Iterable<w>)) 的元组所组成的 Dataset。</w></v></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"a"</span>),(<span class="number">1</span>, <span class="string">"a"</span>), (<span class="number">2</span>, <span class="string">"b"</span>), (<span class="number">3</span>, <span class="string">"e"</span>))</span><br><span class="line"><span class="keyword">val</span> list02 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"A"</span>), (<span class="number">2</span>, <span class="string">"B"</span>), (<span class="number">3</span>, <span class="string">"E"</span>))</span><br><span class="line"><span class="keyword">val</span> list03 = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"[ab]"</span>), (<span class="number">2</span>, <span class="string">"[bB]"</span>), (<span class="number">3</span>, <span class="string">"eE"</span>),(<span class="number">3</span>, <span class="string">"eE"</span>))</span><br><span class="line">sc.parallelize(list01).cogroup(sc.parallelize(list02),sc.parallelize(list03)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： 同一个 RDD 中的元素先按照 key 进行分组，然后再对不同 RDD 中的元素按照 key 进行分组</span></span><br><span class="line">(<span class="number">1</span>,(<span class="type">CompactBuffer</span>(a, a),<span class="type">CompactBuffer</span>(<span class="type">A</span>),<span class="type">CompactBuffer</span>([ab])))</span><br><span class="line">(<span class="number">3</span>,(<span class="type">CompactBuffer</span>(e),<span class="type">CompactBuffer</span>(<span class="type">E</span>),<span class="type">CompactBuffer</span>(eE, eE)))</span><br><span class="line">(<span class="number">2</span>,(<span class="type">CompactBuffer</span>(b),<span class="type">CompactBuffer</span>(<span class="type">B</span>),<span class="type">CompactBuffer</span>([bB])))</span><br></pre></td></tr></table></figure><h3 id="1-15-cartesian"><a href="#1-15-cartesian" class="headerlink" title="1.15 cartesian"></a>1.15 cartesian</h3><p>计算笛卡尔积：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">sc.parallelize(list1).cartesian(sc.parallelize(list2)).foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出笛卡尔积</span></span><br><span class="line">(<span class="type">A</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="type">A</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="type">A</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="type">B</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="type">B</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="type">B</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="type">C</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="type">C</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="type">C</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="1-16-aggregateByKey"><a href="#1-16-aggregateByKey" class="headerlink" title="1.16 aggregateByKey"></a>1.16 aggregateByKey</h3><p>当调用（K，V）对的数据集时，返回（K，U）对的数据集，其中使用给定的组合函数和 zeroValue 聚合每个键的值。与 <code>groupByKey</code> 类似，reduce 任务的数量可通过第二个参数 <code>numPartitions</code> 进行配置。示例如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了清晰，以下所有参数均使用具名传参</span></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">3</span>), (<span class="string">"hadoop"</span>, <span class="number">2</span>), (<span class="string">"spark"</span>, <span class="number">4</span>), (<span class="string">"spark"</span>, <span class="number">3</span>), (<span class="string">"storm"</span>, <span class="number">6</span>), (<span class="string">"storm"</span>, <span class="number">8</span>))</span><br><span class="line">sc.parallelize(list,numSlices = <span class="number">2</span>).aggregateByKey(zeroValue = <span class="number">0</span>,numPartitions = <span class="number">3</span>)(</span><br><span class="line">      seqOp = math.max(_, _),</span><br><span class="line">      combOp = _ + _</span><br><span class="line">    ).collect.foreach(println)</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">(hadoop,<span class="number">3</span>)</span><br><span class="line">(storm,<span class="number">8</span>)</span><br><span class="line">(spark,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>这里使用了 <code>numSlices = 2</code> 指定 aggregateByKey 父操作 parallelize 的分区数量为 2，其执行流程如下：</p><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/pictures/spark-aggregateByKey.png" target="_blank" rel="noopener"><img src="https://github.com/wangzhiwubigdata/God-Of-BigData/raw/master/pictures/spark-aggregateByKey.png" alt="img"></a></p><p>基于同样的执行流程，如果 <code>numSlices = 1</code>，则意味着只有输入一个分区，则其最后一步 combOp 相当于是无效的，执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(hadoop,3)</span><br><span class="line">(storm,8)</span><br><span class="line">(spark,4)</span><br></pre></td></tr></table></figure><p>同样的，如果每个单词对一个分区，即 <code>numSlices = 6</code>，此时相当于求和操作，执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(hadoop,5)</span><br><span class="line">(storm,14)</span><br><span class="line">(spark,7)</span><br></pre></td></tr></table></figure><p><code>aggregateByKey(zeroValue = 0,numPartitions = 3)</code> 的第二个参数 <code>numPartitions</code> 决定的是输出 RDD 的分区数量，想要验证这个问题，可以对上面代码进行改写，使用 <code>getNumPartitions</code> 方法获取分区数量：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sc.parallelize(list,numSlices = <span class="number">6</span>).aggregateByKey(zeroValue = <span class="number">0</span>,numPartitions = <span class="number">3</span>)(</span><br><span class="line">  seqOp = math.max(_, _),</span><br><span class="line">  combOp = _ + _</span><br><span class="line">).getNumPartitions</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/pictures/spark-getpartnum.png" target="_blank" rel="noopener"><img src="https://github.com/wangzhiwubigdata/God-Of-BigData/raw/master/pictures/spark-getpartnum.png" alt="img"></a></p><h2 id="二、Action"><a href="#二、Action" class="headerlink" title="二、Action"></a>二、Action</h2><p>Spark 常用的 Action 算子如下：</p><table><thead><tr><th>Action（动作）</th><th>Meaning（含义）</th></tr></thead><tbody><tr><td><strong>reduce</strong>(<em>func</em>)</td><td>使用函数<em>func</em>执行归约操作</td></tr><tr><td><strong>collect</strong>()</td><td>以一个 array 数组的形式返回 dataset 的所有元素，适用于小结果集。</td></tr><tr><td><strong>count</strong>()</td><td>返回 dataset 中元素的个数。</td></tr><tr><td><strong>first</strong>()</td><td>返回 dataset 中的第一个元素，等价于 take(1)。</td></tr><tr><td><strong>take</strong>(<em>n</em>)</td><td>将数据集中的前 <em>n</em> 个元素作为一个 array 数组返回。</td></tr><tr><td><strong>takeSample</strong>(<em>withReplacement</em>, <em>num</em>, [<em>seed</em>])</td><td>对一个 dataset 进行随机抽样</td></tr><tr><td><strong>takeOrdered</strong>(<em>n</em>, <em>[ordering]</em>)</td><td>按自然顺序（natural order）或自定义比较器（custom comparator）排序后返回前 <em>n</em> 个元素。只适用于小结果集，因为所有数据都会被加载到驱动程序的内存中进行排序。</td></tr><tr><td><strong>saveAsTextFile</strong>(<em>path</em>)</td><td>将 dataset 中的元素以文本文件的形式写入本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。Spark 将对每个元素调用 toString 方法，将元素转换为文本文件中的一行记录。</td></tr><tr><td><strong>saveAsSequenceFile</strong>(<em>path</em>)</td><td>将 dataset 中的元素以 Hadoop SequenceFile 的形式写入到本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。该操作要求 RDD 中的元素需要实现 Hadoop 的 Writable 接口。对于 Scala 语言而言，它可以将 Spark 中的基本数据类型自动隐式转换为对应 Writable 类型。(目前仅支持 Java and Scala)</td></tr><tr><td><strong>saveAsObjectFile</strong>(<em>path</em>)</td><td>使用 Java 序列化后存储，可以使用 <code>SparkContext.objectFile()</code> 进行加载。(目前仅支持 Java and Scala)</td></tr><tr><td><strong>countByKey</strong>()</td><td>计算每个键出现的次数。</td></tr><tr><td><strong>foreach</strong>(<em>func</em>)</td><td>遍历 RDD 中每个元素，并对其执行<em>fun</em>函数</td></tr></tbody></table><h3 id="2-1-reduce"><a href="#2-1-reduce" class="headerlink" title="2.1 reduce"></a>2.1 reduce</h3><p>使用函数<em>func</em>执行归约操作：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">sc.parallelize(list).reduce((x, y) =&gt; x + y)</span><br><span class="line">sc.parallelize(list).reduce(_ + _)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><h3 id="2-2-takeOrdered"><a href="#2-2-takeOrdered" class="headerlink" title="2.2 takeOrdered"></a>2.2 takeOrdered</h3><p>按自然顺序（natural order）或自定义比较器（custom comparator）排序后返回前 <em>n</em> 个元素。需要注意的是 <code>takeOrdered</code> 使用隐式参数进行隐式转换，以下为其源码。所以在使用自定义排序时，需要继承 <code>Ordering[T]</code> 实现自定义比较器，然后将其作为隐式参数引入。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeOrdered</span></span>(num: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>]): <span class="type">Array</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  .........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义规则排序：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承 Ordering[T],实现自定义比较器，按照 value 值的长度进行排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomOrdering</span> <span class="keyword">extends</span> <span class="title">Ordering</span>[(<span class="type">Int</span>, <span class="type">String</span>)] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(x: (<span class="type">Int</span>, <span class="type">String</span>), y: (<span class="type">Int</span>, <span class="type">String</span>)): <span class="type">Int</span></span><br><span class="line">    = <span class="keyword">if</span> (x._2.length &gt; y._2.length) <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="number">1</span>, <span class="string">"hadoop"</span>), (<span class="number">1</span>, <span class="string">"storm"</span>), (<span class="number">1</span>, <span class="string">"azkaban"</span>), (<span class="number">1</span>, <span class="string">"hive"</span>))</span><br><span class="line"><span class="comment">//  引入隐式默认值</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> implicitOrdering = <span class="keyword">new</span> <span class="type">CustomOrdering</span></span><br><span class="line">sc.parallelize(list).takeOrdered(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： Array((1,hive), (1,storm), (1,hadoop), (1,azkaban)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-countByKey"><a href="#2-3-countByKey" class="headerlink" title="2.3 countByKey"></a>2.3 countByKey</h3><p>计算每个键出现的次数：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"azkaban"</span>, <span class="number">1</span>))</span><br><span class="line">sc.parallelize(list).countByKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： Map(hadoop -&gt; 2, storm -&gt; 2, azkaban -&gt; 1)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-saveAsTextFile"><a href="#2-4-saveAsTextFile" class="headerlink" title="2.4 saveAsTextFile"></a>2.4 saveAsTextFile</h3><p>将 dataset 中的元素以文本文件的形式写入本地文件系统、HDFS 或其它 Hadoop 支持的文件系统中。Spark 将对每个元素调用 toString 方法，将元素转换为文本文件中的一行记录。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>((<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"hadoop"</span>, <span class="number">10</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"storm"</span>, <span class="number">3</span>), (<span class="string">"azkaban"</span>, <span class="number">1</span>))</span><br><span class="line">sc.parallelize(list).saveAsTextFile(<span class="string">"/usr/file/temp"</span>)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-programming-guide" target="_blank" rel="noopener">RDD Programming Guide</a></p><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/大数据框架学习/Spark_Transformation和Action算子.md" target="_blank" rel="noopener">RDD 常用算子详解</a></p><p><a href="https://www.cnblogs.com/qingyunzong/p/8899715.html" target="_blank" rel="noopener">Spark学习之路（三）Spark之RDD - 扎心了，老铁- 博客园</a></p><p><a href="https://juejin.im/post/6844903846066520071" target="_blank" rel="noopener">到处是map、flatMap，啥意思？ - 掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[617] Merge Two Binary Trees Python3实现</title>
      <link href="2020-LeetCode/leetcode-617.html"/>
      <url>2020-LeetCode/leetcode-617.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given two binary trees and imagine that when you put one of them to cover the </span></span><br><span class="line"><span class="comment"># other, some nodes of the two trees are overlapped while the others are not. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  You need to merge them into a new binary tree. The merge rule is that if two </span></span><br><span class="line"><span class="comment"># nodes overlap, then sum node values up as the new value of the merged node. Othe</span></span><br><span class="line"><span class="comment"># rwise, the NOT null node will be used as the node of new tree. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: </span></span><br><span class="line"><span class="comment"># Tree 1                     Tree 2                  </span></span><br><span class="line"><span class="comment">#           1                         2                             </span></span><br><span class="line"><span class="comment">#          / \                       / \                            </span></span><br><span class="line"><span class="comment">#         3   2                     1   3                        </span></span><br><span class="line"><span class="comment">#        /                           \   \                      </span></span><br><span class="line"><span class="comment">#       5                             4   7                  </span></span><br><span class="line"><span class="comment"># Output: </span></span><br><span class="line"><span class="comment"># Merged tree:</span></span><br><span class="line"><span class="comment">#      3</span></span><br><span class="line"><span class="comment">#     / \</span></span><br><span class="line"><span class="comment">#    4   5</span></span><br><span class="line"><span class="comment">#   / \   \ </span></span><br><span class="line"><span class="comment">#  5   4   7</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Note: The merging process must start from the root nodes of both trees. </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 486 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1: TreeNode, t2: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 如果某棵树的当前节点为空则返回另一棵树的当前节点；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> t1): <span class="keyword">return</span> t2</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> t2): <span class="keyword">return</span> t1</span><br><span class="line">        <span class="comment"># 将t2合并到t1上</span></span><br><span class="line">        t1.val += t2.val</span><br><span class="line">        <span class="comment"># 递归处理当前节点的左、右子树</span></span><br><span class="line">        t1.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">        t1.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br><span class="line"><span class="comment"># test case</span></span><br><span class="line">t1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">t2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">t1.left = TreeNode(<span class="number">3</span>)</span><br><span class="line">t2.right = TreeNode(<span class="number">4</span>)</span><br><span class="line">t2.right.left = TreeNode(<span class="number">5</span>)</span><br><span class="line">t2.right.right = TreeNode(<span class="number">6</span>)</span><br><span class="line">s = Solution()</span><br><span class="line">t = s.mergeTrees(t1, t2)</span><br><span class="line">print(t.val, t.left.val, t.right.val)</span><br></pre></td></tr></table></figure><p>第一反应是用两个队列同步bfs，写了一半放弃了…因为对Python3语法太不熟练了，需要补一补先。</p><p>参考官方题解，使用先序遍历（中-左-右），最终返回t1即可。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode[968] Binary Tree Cameras Python3实现</title>
      <link href="2020-LeetCode/leetcode-968.html"/>
      <url>2020-LeetCode/leetcode-968.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Given a binary tree, we install cameras on the nodes of the tree. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Each camera at a node can monitor its parent, itself, and its immediate child</span></span><br><span class="line"><span class="comment"># ren. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Calculate the minimum number of cameras needed to monitor all nodes of the tr</span></span><br><span class="line"><span class="comment"># ee. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  Example 1: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: [0,0,null,0,0]</span></span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line"><span class="comment"># Explanation: One camera is enough to monitor all nodes if placed as shown.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Example 2: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Input: [0,0,null,0,null,0,null,null,0]</span></span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line"><span class="comment"># Explanation: At least two cameras are needed to monitor all nodes of the tree.</span></span><br><span class="line"><span class="comment">#  The above image shows one of the valid configurations of camera placement.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Note: </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  The number of nodes in the given tree will be in the range [1, 1000]. </span></span><br><span class="line"><span class="comment">#  Every node has value 0. </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  Related Topics 树 深度优先搜索 动态规划 </span></span><br><span class="line"><span class="comment">#  👍 171 👎 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方题解…</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minCameraCover</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">         <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                 <span class="keyword">return</span> [float(<span class="string">"inf"</span>), <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">             la, lb, lc = dfs(root.left)</span><br><span class="line">             ra, rb, rc = dfs(root.right)</span><br><span class="line">             a = lc + rc + <span class="number">1</span></span><br><span class="line">             b = min(a, la + rb, ra + lb)</span><br><span class="line">             c = min(a, lb + rb)</span><br><span class="line">             <span class="keyword">return</span> [a, b, c]</span><br><span class="line">         a, b, c = dfs(root)</span><br><span class="line">         <span class="keyword">return</span> b</span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>dfs返回三个值：</p><p>a：root放置摄像头，覆盖整棵树需要的最少摄像头数量</p><p>b：覆盖整棵树需要的最少摄像头数量</p><p>c：覆盖左右子树需要的最少摄像头数量</p><p>根据定义可得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root放1个，那么root.left 和 root.right都不需要了，只需把root.left的左右子树和root.right的左右子树覆盖掉就ok了。</span></span><br><span class="line"><span class="comment"># 总数 = root.left的俩子树需要的数量 + root.right的俩子树需要的数量 + root上的1个</span></span><br><span class="line">a = lc + rc + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3种情况取最小</span></span><br><span class="line"><span class="comment"># a：root放1个时</span></span><br><span class="line"><span class="comment"># la + rb: root不放时，root.left放1个 + root.right所需的最小数量 </span></span><br><span class="line"><span class="comment"># ra + lb: root不放时，root.right放1个 + root.left所需的最小数量 </span></span><br><span class="line">b = min(a, la + rb, ra + lb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2种情况取最小</span></span><br><span class="line"><span class="comment"># a: root放1个时，</span></span><br><span class="line"><span class="comment"># lb + rb: root不放时，覆盖左子树需要的数量 +覆盖右子树需要的数量</span></span><br><span class="line">c = min(a, lb + rb)</span><br></pre></td></tr></table></figure><p>通过dfs递归，自下而上得出root的a、b、c，其中b即为所求。</p><hr><p>该题目还有贪心解法，待学习。</p><p><a href="https://leetcode-cn.com/problems/binary-tree-cameras/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-cameras/</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode[538]把二叉搜索树转换为累加树 Python3实现</title>
      <link href="2020-LeetCode/leetcode-538.html"/>
      <url>2020-LeetCode/leetcode-538.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节</span></span><br><span class="line"><span class="comment"># 点值之和。 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  例如： </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  输入: 原始二叉搜索树:</span></span><br><span class="line"><span class="comment">#               5</span></span><br><span class="line"><span class="comment">#             /   \</span></span><br><span class="line"><span class="comment">#            2     13</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 输出: 转换为累加树:</span></span><br><span class="line"><span class="comment">#              18</span></span><br><span class="line"><span class="comment">#             /   \</span></span><br><span class="line"><span class="comment">#           20     13</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  注意：本题和 1038: https://leetcode-cn.com/problems/binary-search-tree-to-greater-s</span></span><br><span class="line"><span class="comment"># um-tree/ 相同 </span></span><br><span class="line"><span class="comment">#  Related Topics 树 </span></span><br><span class="line"><span class="comment">#  👍 368 👎 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> sum;</span><br><span class="line">            <span class="keyword">if</span> node.right: dfs(node.right)</span><br><span class="line">            node.val += sum</span><br><span class="line">            sum = node.val</span><br><span class="line">            <span class="keyword">if</span> node.left: dfs(node.left)</span><br><span class="line">        <span class="keyword">if</span> root: dfs(root)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure><p>开始刷LeetCode每日一题，这是第一道。</p><p>准备放弃C艹拥抱Python，以后就用Python3刷题，顺便学语法。</p><p>这个题目倒是不难：</p><p>按照<strong>“右-中-左”</strong>的顺序中序遍历，用<code>sum</code>记录到达当前节点时已有的累加值，加到这个节点上，更新<code>sum</code>即可。</p><p>注意下<code>nonlocal</code>的用法，它是Python3.2之后引入的一个关键字，简单来说：</p><p><code>nonlocal</code>使用在闭包中，能使内部变量操纵外层的同名变量</p><p>详见：</p><p><a href="https://www.w3schools.com/python/ref_keyword_nonlocal.asp" target="_blank" rel="noopener">Python nonlocal Keyword</a></p><p><a href="https://zhuanlan.zhihu.com/p/41030153" target="_blank" rel="noopener">Python中global和nonlocal区别</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我回来了</title>
      <link href="2020-Notes/return-to-blog.html"/>
      <url>2020-Notes/return-to-blog.html</url>
      
        <content type="html"><![CDATA[<p>距离上次发表个人博客，差不2年了。那是离开涿州的前夕，命运在那时发生了巨变。</p><p>这两年来尝到了“钱多事少离家近”的安逸，也尝到了失去一切的落差；得到了梦寐以求的自由，也体会到了自由的代价。</p><p>但无论如何，我去到了理想的城市，开始从事理想的工作，还好一切都来得及。</p><p>写博客对于学习积累至关重要，有个个人主页方能彰显程序员的逼格，于是又拾起了荒废已久的gitpage。</p><p>不出所料，遇到一堆神奇的bug，足足花了约5个小时才成功解决。下面记录一下回归历程。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>大道至简，选择了<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a>主题。直接git clone到theme文件夹，更改<code>_config</code>文件即可，本地预览效果良好。</p><p>相比CSDN、简书等博客站点的优点有：</p><ol><li>无广告</li><li>可定制</li><li>有一个search框，方便检索文章</li></ol><p>本地<code>hexo g</code>生成，<code>hexo s</code>开启本地服务查看，效果不错。</p><h2 id="部署到GitPage报错的Bug解决之路"><a href="#部署到GitPage报错的Bug解决之路" class="headerlink" title="部署到GitPage报错的Bug解决之路"></a>部署到GitPage报错的Bug解决之路</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>hexo源文件仓库名：<code>gitpage</code></p><p>gitpage主页仓库名：<code>zhang35.github.io</code></p><h3 id="部署到git的Bug"><a href="#部署到git的Bug" class="headerlink" title="部署到git的Bug"></a>部署到git的Bug</h3><p>本地网页预览的好好的，执行<code>hexo d</code>部署到git上后，发现gitpage直接刷不出来了，很快就收到了Github的邮件报错：</p><p>第一个：</p><h4 id="You-are-attempting-to-use-a-Jekyll-theme-“maupassant”-which-is-not-supported-by-GitHub-Pages"><a href="#You-are-attempting-to-use-a-Jekyll-theme-“maupassant”-which-is-not-supported-by-GitHub-Pages" class="headerlink" title="You are attempting to use a Jekyll theme, “maupassant”, which is not supported by GitHub Pages"></a>You are attempting to use a Jekyll theme, “maupassant”, which is not supported by GitHub Pages</h4><p>主题问题？</p><p>网上查到的解决方法：手动修改了<code>github.io</code>仓库里<code>_config</code>，去掉theme:maupassant`一行；</p><p>然后迎来第二个报错：</p><h4 id="The-value-‘-’-was-passed-to-a-date-related-filter-that-expects-valid-dates-in-layouts-default-html-or-one-of-its-layouts-For-more-information-see-https-docs-github-com-github-working-with-github-pages-troubleshooting-jekyll-build-errors-for-github-pages-sites-date-is-not-a-valid-datetime"><a href="#The-value-‘-’-was-passed-to-a-date-related-filter-that-expects-valid-dates-in-layouts-default-html-or-one-of-its-layouts-For-more-information-see-https-docs-github-com-github-working-with-github-pages-troubleshooting-jekyll-build-errors-for-github-pages-sites-date-is-not-a-valid-datetime" class="headerlink" title="The value ‘{}’ was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. For more information, see https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime."></a>The value ‘{}’ was passed to a date-related filter that expects valid dates in <code>/_layouts/default.html</code> or one of its layouts. For more information, see <a href="https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime" target="_blank" rel="noopener">https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime</a>.</h4><p>解决方法：</p><p>网上查到的解决方法：没有用jekyll时，在<code>github.io</code>仓库根目录建立名为<code>.nojekyll</code>的空文件，以跳过jekyll检查。</p><p>然后没有报错了，取而代之的是：</p><h4 id="404-not-found：找不到index-html"><a href="#404-not-found：找不到index-html" class="headerlink" title="404 not found：找不到index.html"></a>404 not found：找不到index.html</h4><p>查看了<code>github.io</code>仓库，发现的确没有index.html，里面存的是<code>gitpage</code>仓库的源文件，而不是生成的html页面。</p><p>找遍了网上答案，无果。</p><p>直到尝试直接把hexo生成的public文件夹的内容手工上传到github.io，发现是可以访问的！</p><p>那么问题就出在hexo的deploy了。</p><p>直接谷歌hexo deploy，在hexo官网上找到了答案：</p><p><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">hexo gitpage 部署</a></p><p>写的很清楚：</p><ol><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>.</p></li><li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:  type: git  repo: https://github.com/&lt;username&gt;/&lt;project&gt;  # example, https://github.com/hexojs/hexojs.github.io  branch: gh-pages</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p></li><li><p>查看 <em>username</em>.github.io 上的网页是否部署成功。</p></li></ol><p>对比自己的<code>_config</code>文件，发现语法格式貌似不大对，以前的写法可能过时了。</p><p>于是将<code>deploy</code>标签内的<code>repository</code>改成了<code>repo</code>，<code>branch</code>另起一行，修改如下：</p><p>重新hexo g -d，成功向Github上传了生成的html文件，gitpage终于正常了！！！</p><p>经验教训是：<strong>多看官方文档，注意版本变化</strong>。</p><h2 id="Typora编辑器"><a href="#Typora编辑器" class="headerlink" title="Typora编辑器"></a>Typora编辑器</h2><p>为了更好地写博客，找到了能方便插图的Markdown编辑器——Typora，支持CTRL+V将图片粘贴为Markdown格式。</p><p>首先在设置中勾上“优先使用相对路径”：</p><p>在Hexo根目录_config.yml中启用<code>post_asset_folder: true</code>选项，以便执行<code>hexo new</code>能自动为文章创建同名文件夹，用来存放图片等：</p><p>在Typora中粘贴图片后选择“复制图片到”文章同名文件夹中，使用如下相对路径：xxx/yyy.png</p><p>再使用<a href="https://github.com/cocowool/hexo-image-link" target="_blank" rel="noopener">hexo-image-link</a>，可以在执行<code>hexo g</code>时，将Markdown语法的图片路径转换为<code>asset_img</code>的方式，使图片能够在使用typora编辑和hexo预览发布时都能正常显示。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>按上面步骤编辑好新的带有图片的Markdown文章后，执行<code>hexo g</code>生成；</p><p>执行<code>hexo s</code>打开本地服务器预览；</p><p>能看到以下提示：</p><p>以后每当新插入图片，保存编辑时，也能看到打印如上图信息，预览网站也会实时变化。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>开始重新更新个人博客，每周至少一篇，看能坚持多久。</p><p><a href="https://zhang35.github.io/">https://zhang35.github.io/</a></p><p>距离上次在发表个人博客，差不2年了。那是离开涿州的前夕，命运在那时发生了巨变。</p><p>这两年来尝到了“钱多事少离家近”的安逸，也尝到了失去一切的落差；得到了梦寐以求的自由，也体会到了自由的代价。</p><p>但无论如何，我去到了理想的城市，开始从事理想的工作，还好一切都来得及。</p><p>写博客对于学习积累至关重要，有个个人主页方能彰显程序员的逼格，于是又拾起了荒废已久的gitpage。</p><p>不出所料，遇到一堆神奇的bug，足足花了约5个小时才成功解决。下面记录一下回归历程。</p><h2 id="更换主题-1"><a href="#更换主题-1" class="headerlink" title="更换主题"></a>更换主题</h2><p>大道至简，选择了<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a>主题。直接git clone到theme文件夹，更改<code>_config</code>文件即可，本地预览效果良好。</p><p>相比CSDN、简书等博客站点的优点有：</p><ol><li>无广告</li><li>可定制</li><li>有一个search框，方便检索文章</li></ol><p>本地<code>hexo g</code>生成，<code>hexo s</code>开启本地服务查看，效果不错。</p><h2 id="部署到GitPage报错的Bug解决之路-1"><a href="#部署到GitPage报错的Bug解决之路-1" class="headerlink" title="部署到GitPage报错的Bug解决之路"></a>部署到GitPage报错的Bug解决之路</h2><h3 id="环境介绍-1"><a href="#环境介绍-1" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>hexo源文件仓库名：<code>gitpage</code></p><p>gitpage主页仓库名：<code>zhang35.github.io</code></p><h3 id="部署到git的Bug-1"><a href="#部署到git的Bug-1" class="headerlink" title="部署到git的Bug"></a>部署到git的Bug</h3><p>本地网页预览的好好的，执行<code>hexo d</code>部署到git上后，发现gitpage直接刷不出来了，很快就收到了Github的邮件报错：</p><p>第一个：</p><h4 id="You-are-attempting-to-use-a-Jekyll-theme-“maupassant”-which-is-not-supported-by-GitHub-Pages-1"><a href="#You-are-attempting-to-use-a-Jekyll-theme-“maupassant”-which-is-not-supported-by-GitHub-Pages-1" class="headerlink" title="You are attempting to use a Jekyll theme, “maupassant”, which is not supported by GitHub Pages"></a>You are attempting to use a Jekyll theme, “maupassant”, which is not supported by GitHub Pages</h4><p>主题问题？</p><p>网上查到的解决方法：手动修改了<code>github.io</code>仓库里<code>_config</code>，去掉theme:maupassant`一行；</p><p>然后迎来第二个报错：</p><h4 id="The-value-‘-’-was-passed-to-a-date-related-filter-that-expects-valid-dates-in-layouts-default-html-or-one-of-its-layouts-For-more-information-see-https-docs-github-com-github-working-with-github-pages-troubleshooting-jekyll-build-errors-for-github-pages-sites-date-is-not-a-valid-datetime-1"><a href="#The-value-‘-’-was-passed-to-a-date-related-filter-that-expects-valid-dates-in-layouts-default-html-or-one-of-its-layouts-For-more-information-see-https-docs-github-com-github-working-with-github-pages-troubleshooting-jekyll-build-errors-for-github-pages-sites-date-is-not-a-valid-datetime-1" class="headerlink" title="The value ‘{}’ was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. For more information, see https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime."></a>The value ‘{}’ was passed to a date-related filter that expects valid dates in <code>/_layouts/default.html</code> or one of its layouts. For more information, see <a href="https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime" target="_blank" rel="noopener">https://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#date-is-not-a-valid-datetime</a>.</h4><p>解决方法：</p><p>网上查到的解决方法：没有用jekyll时，在<code>github.io</code>仓库根目录建立名为<code>.nojekyll</code>的空文件，以跳过jekyll检查。</p><p>然后没有报错了，取而代之的是：</p><h4 id="404-not-found：找不到index-html-1"><a href="#404-not-found：找不到index-html-1" class="headerlink" title="404 not found：找不到index.html"></a>404 not found：找不到index.html</h4><p>查看了<code>github.io</code>仓库，发现的确没有index.html，里面存的是<code>gitpage</code>仓库的源文件，而不是生成的html页面。</p><p>找遍了网上答案，无果。</p><p>直到尝试直接把hexo生成的public文件夹的内容手工上传到github.io，发现是可以访问的！</p><p>那么问题就出在hexo的deploy了。</p><p>直接谷歌hexo deploy，在hexo官网上找到了答案：</p><p><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">hexo gitpage 部署</a></p><p>写的很清楚：</p><ol><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>.</p></li><li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:  type: git  repo: https://github.com/&lt;username&gt;/&lt;project&gt;  # example, https://github.com/hexojs/hexojs.github.io  branch: gh-pages</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p></li><li><p>查看 <em>username</em>.github.io 上的网页是否部署成功。</p></li></ol><p>对比自己的<code>_config</code>文件，发现语法格式貌似不大对，以前的写法可能过时了。</p><p>于是将<code>deploy</code>标签内的<code>repository</code>改成了<code>repo</code>，<code>branch</code>另起一行，修改如下：<br><img src="https://img-blog.csdnimg.cn/2020092413015269.png#pic_center" alt="在这里插入图片描述"></p><p>重新hexo g -d，成功向Github上传了生成的html文件，gitpage终于正常了！！！</p><p><img src="https://img-blog.csdnimg.cn/20200924130201355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>经验教训是：<strong>多看官方文档，注意版本变化</strong>。</p><h2 id="Typora编辑器-1"><a href="#Typora编辑器-1" class="headerlink" title="Typora编辑器"></a>Typora编辑器</h2><p>为了更好地写博客，找到了能方便插图的Markdown编辑器——Typora，支持CTRL+V将图片粘贴为Markdown格式。</p><p>首先在设置中勾上“优先使用相对路径”：</p><p><img src="https://img-blog.csdnimg.cn/20200924130216538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在Hexo根目录_config.yml中启用<code>post_asset_folder: true</code>选项，以便执行<code>hexo new</code>能自动为文章创建同名文件夹，用来存放图片等：</p><p><img src="https://img-blog.csdnimg.cn/2020092413022422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在Typora中粘贴图片后选择“复制图片到”文章同名文件夹中，使用如下相对路径：xxx/yyy.png</p><p><img src="https://img-blog.csdnimg.cn/20200924130230160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nMzU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再使用<a href="https://github.com/cocowool/hexo-image-link" target="_blank" rel="noopener">hexo-image-link</a>，可以在执行<code>hexo g</code>时，将Markdown语法的图片路径转换为<code>asset_img</code>的方式，使图片能够在使用typora编辑和hexo预览发布时都能正常显示。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>按上面步骤编辑好新的带有图片的Markdown文章后，执行<code>hexo g</code>生成；</p><p>执行<code>hexo s</code>打开本地服务器预览；</p><p>能看到以下提示：</p><p><img src="https://img-blog.csdnimg.cn/20200924130241759.png#pic_center" alt="在这里插入图片描述"></p><p>以后每当新插入图片，保存编辑时，也能看到打印如上图信息，预览网站也会实时变化。</p><h2 id="结语-1"><a href="#结语-1" class="headerlink" title="结语"></a>结语</h2><p>开始重新更新个人博客，每周至少一篇，看能坚持多久。</p>]]></content>
      
      
      <categories>
          
          <category> hexo个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitpage </tag>
            
            <tag> maupassant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode[5473] 灯泡开关 IV medium C++实现（周赛题）</title>
      <link href="2020-LeetCode/leetcode-5473.html"/>
      <url>2020-LeetCode/leetcode-5473.html</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/bulb-switcher-iv/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/bulb-switcher-iv/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">房间中有 n 个灯泡，编号从 <span class="number">0</span> 到 n<span class="number">-1</span> ，自左向右排成一行。最开始的时候，所有的灯泡都是 关 着的。</span><br><span class="line"></span><br><span class="line">请你设法使得灯泡的开关状态和 target 描述的状态一致，其中 target[i] 等于 <span class="number">1</span> 第 i 个灯泡是开着的，等于 <span class="number">0</span> 意味着第 i 个灯是关着的。</span><br><span class="line"></span><br><span class="line">有一个开关可以用于翻转灯泡的状态，翻转操作定义如下：</span><br><span class="line"></span><br><span class="line">选择当前配置下的任意一个灯泡（下标为 i ）</span><br><span class="line">翻转下标从 i 到 n<span class="number">-1</span> 的每个灯泡</span><br><span class="line">翻转时，如果灯泡的状态为 <span class="number">0</span> 就变为 <span class="number">1</span>，为 <span class="number">1</span> 就变为 <span class="number">0</span> 。</span><br><span class="line"></span><br><span class="line">返回达成 target 描述的状态所需的 最少 翻转次数。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：target = <span class="string">"10111"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：初始配置 <span class="string">"00000"</span>.</span><br><span class="line">从第 3 个灯泡（下标为 2）开始翻转 "00000" -&gt; "00111"</span><br><span class="line">从第 1 个灯泡（下标为 0）开始翻转 "00111" -&gt; "11000"</span><br><span class="line">从第 2 个灯泡（下标为 1）开始翻转 "11000" -&gt; "10111"</span><br><span class="line">至少需要翻转 <span class="number">3</span> 次才能达成 target 描述的状态</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：target = <span class="string">"101"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释："000" -&gt; "111" -&gt; "100" -&gt; "101".</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：target = <span class="string">"00000"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：target = <span class="string">"001011101"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &lt;= target.length &lt;= <span class="number">10</span>^<span class="number">5</span></span><br><span class="line">target[i] == <span class="string">'0'</span> 或者 target[i] == <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/bulb-switcher-iv</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一开始真的在傻傻地反转字符串，果断超时。</p><p>后来终于摸索出规律：</p><p><strong>连续的0可以视为1个0，连续的1可以视为1个1</strong></p><p>比如：<br>001011101<br>可以视为<br>010101</p><p>因为连续相同的0或1，在反转的时候可以顺便全部反转了。</p><p>然后可以从最后一位开始反转，得到：<br>010100</p><p>合并最后两个0，变成了：<br>01010</p><p>这就又得到下面的规律：</p><p><strong>一次反转，可以解决一位。</strong></p><p>那么就看合并后的字符串中，第一个’1’后面总共多少位就可以了。若第一位是1，需要额外反转1次，可以直接前面加个’0’统一化处理。</p><p>代码实现上，只要统计出从前向后0-1变化次数即可。</p><p>下面是大神liouzhou_101的代码。（本人的代码实在不够简洁…）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        s = <span class="string">"0"</span>+s;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.size(); ++i)</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[i<span class="number">-1</span>]) ++res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freecodecamp 刷题记录——前端基础算法</title>
      <link href="2018-Web/Freecodecamp-Basic-Front-End-Algorithm.html"/>
      <url>2018-Web/Freecodecamp-Basic-Front-End-Algorithm.html</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-Front-End-Development-Projects"><a href="#Basic-Front-End-Development-Projects" class="headerlink" title="Basic Front End Development Projects"></a><a href="https://www.freecodecamp.cn/map-aside#nested-collapseBasicFrontEndDevelopmentProjects" target="_blank" rel="noopener">Basic Front End Development Projects</a></h2><h3 id="Reverse-a-String"><a href="#Reverse-a-String" class="headerlink" title="Reverse a String"></a>Reverse a String</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function reverseString(str) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var array = str.split(&apos;&apos;);</span><br><span class="line">  array.reverse();</span><br><span class="line">  console.log(array);</span><br><span class="line">  str = array.join(&apos;&apos;);</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reverseString(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><h3 id="Factorialize-a-Number"><a href="#Factorialize-a-Number" class="headerlink" title="Factorialize a Number"></a>Factorialize a Number</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function factorialize(num) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  if (num === 0)&#123;</span><br><span class="line">    num = 1;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    for (var i=num-1; i&gt;1; i--)&#123;</span><br><span class="line">     num = num * i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorialize(5);</span><br></pre></td></tr></table></figure><h3 id="Check-for-Palindromes"><a href="#Check-for-Palindromes" class="headerlink" title="Check for Palindromes"></a>Check for Palindromes</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function palindrome(str) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  str = str.toLowerCase();</span><br><span class="line">  str = str.replace(/[\W\s_]/g,&apos;&apos;);</span><br><span class="line">  </span><br><span class="line">  console.log(str);</span><br><span class="line">  </span><br><span class="line">  n = str.length;</span><br><span class="line">  for (i=0; i&lt;n/2; i++)&#123;</span><br><span class="line">    if (str[i] != str[n-i-1])&#123;</span><br><span class="line">       return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">palindrome(&quot;eye&quot;);</span><br></pre></td></tr></table></figure><h3 id="Find-the-Longest-Word-in-a-String"><a href="#Find-the-Longest-Word-in-a-String" class="headerlink" title="Find the Longest Word in a String"></a>Find the Longest Word in a String</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function findLongestWord(str) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var array = str.split(&apos; &apos;);</span><br><span class="line">  var length = 0;</span><br><span class="line">  array.forEach(function(word)&#123;</span><br><span class="line">    if  (word.length&gt;length) &#123;</span><br><span class="line">      length = word.length;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;);</span><br></pre></td></tr></table></figure><h3 id="Title-Case-a-Sentence"><a href="#Title-Case-a-Sentence" class="headerlink" title="Title Case a Sentence"></a>Title Case a Sentence</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function titleCase(str) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var array = str.split(&apos; &apos;);</span><br><span class="line">  array.forEach(function(word, i)&#123;</span><br><span class="line">        array[i] = word[0].toUpperCase() + word.substring(1).toLowerCase();</span><br><span class="line">  &#125;);</span><br><span class="line">  str = array.join(&apos; &apos;);</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(&quot;I&apos;m a little tea pot&quot;);</span><br></pre></td></tr></table></figure><h3 id="Return-Largest-Numbers-in-Arrays"><a href="#Return-Largest-Numbers-in-Arrays" class="headerlink" title="Return Largest Numbers in Arrays"></a>Return Largest Numbers in Arrays</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function largestOfFour(arr) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  arr.forEach(function(a, i)&#123;</span><br><span class="line">    var m = a[0];</span><br><span class="line">    for (var j=1; j&lt;a.length; j++)&#123;</span><br><span class="line">      if (a[j]&gt;m)&#123;</span><br><span class="line">        m = a[j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = m;</span><br><span class="line">  &#125;);</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);</span><br></pre></td></tr></table></figure><h3 id="Confirm-the-Ending"><a href="#Confirm-the-Ending" class="headerlink" title="Confirm the Ending"></a>Confirm the Ending</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function confirmEnding(str, target) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var pos = str.length - target.length;</span><br><span class="line">    if (pos &lt; 0)&#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    if (str.substring(pos) == target)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      return false;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(&quot;Bastian&quot;, &quot;n&quot;);</span><br></pre></td></tr></table></figure><h3 id="Repeat-a-string-repeat-a-string"><a href="#Repeat-a-string-repeat-a-string" class="headerlink" title="Repeat a string repeat a string"></a>Repeat a string repeat a string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function repeat(str, num) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var retStr = str;</span><br><span class="line">  if (num &lt; 0)&#123;</span><br><span class="line">    retStr = &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    for (var i=1; i&lt;num; i++)&#123;</span><br><span class="line">      retStr += str;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return retStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(&quot;abc&quot;, 3);</span><br></pre></td></tr></table></figure><h3 id="Truncate-a-string"><a href="#Truncate-a-string" class="headerlink" title="Truncate a string"></a>Truncate a string</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function truncate(str, num) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  if (str.length &gt; num)&#123;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  if (num &lt;= 3)&#123;</span><br><span class="line">    str = str.substring(0, num) + &quot;...&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    str = str.substring(0, num - 3) + &quot;...&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">truncate(&quot;A-tisket a-tasket A green and yellow basket&quot;, 11);</span><br></pre></td></tr></table></figure><h3 id="Chunky-Monkey"><a href="#Chunky-Monkey" class="headerlink" title="Chunky Monkey"></a>Chunky Monkey</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function chunk(arr, size) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var retArr = [];</span><br><span class="line">  </span><br><span class="line">  for (var i=0; i&lt;arr.length; i+=size)&#123;</span><br><span class="line">    retArr.push(arr.slice(i, i+size));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return retArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], 2);</span><br></pre></td></tr></table></figure><h3 id="Slasher-Flick-Incomplete"><a href="#Slasher-Flick-Incomplete" class="headerlink" title="Slasher Flick Incomplete"></a>Slasher Flick Incomplete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function slasher(arr, howMany) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  if (howMany &gt;= 0)&#123;</span><br><span class="line">    if(howMany &gt;= arr.length)&#123;</span><br><span class="line">      arr = [];</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      return arr.slice(howMany);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slasher([1, 2, 3], 2);</span><br></pre></td></tr></table></figure><h3 id="Mutations-Incomplete"><a href="#Mutations-Incomplete" class="headerlink" title="Mutations Incomplete"></a>Mutations Incomplete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function mutation(arr) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  //原生js获取的DOM集合是一个类数组对象，所以不能直接利用数组的方法（例如：forEach，map等），需要进行转换为数组后，才能用数组的方法！</span><br><span class="line">  //https://blog.csdn.net/m0_38082783/article/details/78131036?locationNum=10&amp;fps=1</span><br><span class="line">  var patStr = Array.from(arr[1]);</span><br><span class="line">  var str = Array.from(arr[0]);</span><br><span class="line">  for (var i=0; i&lt;patStr.length; i++)&#123;</span><br><span class="line">    var patt = new RegExp(patStr[i], &quot;i&quot;);</span><br><span class="line">    if (!patt.test(str))&#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation([&quot;hello&quot;, &quot;hey&quot;]);</span><br></pre></td></tr></table></figure><h3 id="Falsy-Bouncer-Incomplete"><a href="#Falsy-Bouncer-Incomplete" class="headerlink" title="Falsy Bouncer Incomplete"></a>Falsy Bouncer Incomplete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function bouncer(arr) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  </span><br><span class="line">  return arr.filter(function(word)&#123;</span><br><span class="line">    return Boolean(word);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([7, &quot;ate&quot;, &quot;&quot;, false, 9]);</span><br></pre></td></tr></table></figure><h3 id="Seek-and-Destroy-Incomplete"><a href="#Seek-and-Destroy-Incomplete" class="headerlink" title="Seek and Destroy Incomplete"></a>Seek and Destroy Incomplete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function destroyer() &#123;</span><br><span class="line">  var array = arguments[0];</span><br><span class="line">  var datas = [];</span><br><span class="line">for (var i=1; i&lt;arguments.length; i++)&#123;</span><br><span class="line">    datas.push(arguments[i]);</span><br><span class="line">&#125;</span><br><span class="line">  return array.filter(function(data)&#123;</span><br><span class="line">    for (i=0; i&lt;datas.length; i++)&#123;</span><br><span class="line">        console.log(&quot;argu:&quot; + datas[i]);</span><br><span class="line">         if (data === datas[i])&#123;</span><br><span class="line">           return false;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([1, 2, 3, 1, 2, 3], 2, 3);</span><br></pre></td></tr></table></figure><h3 id="Where-do-I-belong-Incomplete"><a href="#Where-do-I-belong-Incomplete" class="headerlink" title="Where do I belong Incomplete"></a>Where do I belong Incomplete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function where(arr, num) &#123;</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">  var array = Array.from(arr);</span><br><span class="line">  array.sort(function(a, b)&#123;</span><br><span class="line">    return a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  for (var i=0; i&lt;array.length; i++)&#123;</span><br><span class="line">    if (array[i]&gt;=num)&#123;</span><br><span class="line">       return i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">where([40, 60], 50);</span><br></pre></td></tr></table></figure><h3 id="Caesars-Cipher-Incomplete"><a href="#Caesars-Cipher-Incomplete" class="headerlink" title="Caesars Cipher Incomplete"></a>Caesars Cipher Incomplete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function rot13(str) &#123; // LBH QVQ VG!</span><br><span class="line">  // 请把你的代码写在这里</span><br><span class="line">    var array = Array.from(str);</span><br><span class="line">    array = array.map(function(letter)&#123;</span><br><span class="line">        if (&apos;A&apos;&lt;=letter &amp;&amp; &apos;Z&apos;&gt;=letter)&#123;</span><br><span class="line">            code = (letter.charCodeAt() - 13);</span><br><span class="line">            if (code &lt; &apos;A&apos;.charCodeAt())&#123;</span><br><span class="line">                code += 26; </span><br><span class="line">            &#125;</span><br><span class="line">            letter = String.fromCharCode(code);</span><br><span class="line">            console.log((letter));</span><br><span class="line">        &#125;</span><br><span class="line">        return letter;</span><br><span class="line">    &#125;);</span><br><span class="line">  return array.join(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rot13(&quot;SERR PBQR PNZC&quot;);  // 你可以修改这一行来测试你的代码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> freecodecamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap排版学习小结</title>
      <link href="2018-Web/bootstrap-11-24.html"/>
      <url>2018-Web/bootstrap-11-24.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bootstrap 包含了一个响应式的、移动设备优先的、不固定的网格系统</p></blockquote><h2 id="基本套路"><a href="#基本套路" class="headerlink" title="基本套路"></a>基本套路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;      </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot;&gt;...&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;....</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;    </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>下面一步步拆解。</p><h2 id="指定doctype"><a href="#指定doctype" class="headerlink" title="指定doctype"></a>指定doctype</h2><p>指定HTML 版本，<code>&lt;!DOCTYPE html&gt;</code> 代指HTML 5。</p><blockquote><p>如果在 Bootstrap 创建的网页开头不使用 HTML5 的文档类型（Doctype），您可能会面临一些浏览器显示不一致的问题，以致于您的代码不能通过 W3C 标准的验证。</p></blockquote><h2 id="添加meta标签"><a href="#添加meta标签" class="headerlink" title="添加meta标签"></a>添加meta标签</h2><p>为了照顾不同设备的效果，添加 viewport meta 标签：</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</code></p><p>这些都是可选项。</p><blockquote><p><code>width=device-width</code> 可以确保它能正确呈现在不同设备上。<br><code>initial-scale=1.0</code> 确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放。<br><code>maximum-scale=1.0</code> 与 <code>user-scalable=no</code> 一起使用。这样禁用缩放功能后，用户只能滚动屏幕，就能让您的网站看上去更像原生应用的感觉。</p></blockquote><p>详细参考：<a href="https://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="noopener">https://www.cnblogs.com/2050/p/3877280.html</a></p><h2 id="引入bootstrap-css"><a href="#引入bootstrap-css" class="headerlink" title="引入bootstrap.css"></a>引入bootstrap.css</h2><p>单纯引入bootstrap.css后，页面内容立即有了变化，左边缘的文字已显示不全。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTY0MDRlZmFmMTExOWQzYmUucG5n?x-oss-process=image/format,png" alt="引入bootstrap.css前"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWYyODFlZDU1ODI5YjdlMDAucG5n?x-oss-process=image/format,png" alt="引入bootstrap.css后"></p><p>查看样式，也没找到答案。求解。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTczOTJjMThlZjgyNTI0ZjIucG5n?x-oss-process=image/format,png" alt="没找到"></p><h2 id="添加Container"><a href="#添加Container" class="headerlink" title="添加Container"></a>添加Container</h2><p>用来框定bootstrap的有效范围。</p><p>把内容放入<code>&lt;div class=&quot;container&quot;&gt;</code>后，上一步遇到的页面显示不全问题就消失了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTQxZDNiMzllMjY4ODQ2NGIucG5n?x-oss-process=image/format,png" alt="image.png"></p><p>也可替换为<code>&lt;div class=&quot;container-fluid&quot;&gt;</code>，具体参考：<a href="https://blog.csdn.net/weixin_42097173/article/details/80381896" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42097173/article/details/80381896</a></p><h2 id="添加row、col"><a href="#添加row、col" class="headerlink" title="添加row、col"></a>添加row、col</h2><blockquote><ul><li>行必须放置在 .container class 内，以便获得适当的对齐（alignment）和内边距（padding）。</li><li>使用行来创建列的水平组。</li><li>内容应该放置在列内，且唯有列可以是行的直接子元素。</li></ul></blockquote><p>每一行自动分为12列，通过划分12个单位来排版。列数应 &lt;= 12。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTUyYmU0OWYyY2RkYjcyYmUucG5n?x-oss-process=image/format,png" alt="bootstrap栅格系统"></p><p>通过以下方式将元素嵌入网格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-*-*&quot;&gt;&lt;/div&gt;      </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>类名</th><th>效果</th></tr></thead><tbody><tr><td>.col-xs-</td><td>无论屏幕宽度如何，单元格都在一行，宽度按照百分比设置；试用于手机；</td></tr><tr><td>.col-sm-</td><td>屏幕大于768px时，单元格在一行显示；屏幕小于768px时，独占一行；试用于平板；</td></tr><tr><td>.col-md-</td><td>屏幕大于992px时，单元格在一行显示；屏幕小于992px时，独占一行；试用于桌面显示器；</td></tr><tr><td>.col-lg-</td><td>屏幕大于1200px时，单元格在一行显示；屏幕小于1200px时，独占一行；适用于大型桌面显示器；</td></tr></tbody></table><p>具体参考：<a href="https://www.cnblogs.com/JerryTao/p/5476027.html" target="_blank" rel="noopener">https://www.cnblogs.com/JerryTao/p/5476027.html</a></p><h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h2><p>bootstrap的弹出框等组件包含在js中，也应一并引入。</p><p>在<code>bootstrap.min.js</code>之前，一定要引入<code>jquery.min.js</code>。</p><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>文本居中：<code>.text-center</code><br>元素居中：<code>.center-block</code><br>列偏移居中：<code>col-xx-offset-x</code>（如下例中，内容宽6列，从左偏移3列后，布局变为3-6-3）</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;background center-block&quot;&gt;</span><br><span class="line">                &lt;img class=&quot;img-responsive center-block&quot; src=&quot;居中图片.jpg&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;text-center&quot;&gt;居中文本&lt;/p&gt;</span><br><span class="line">                &lt;div class=&quot;row&quot; &gt;</span><br><span class="line">                    &lt;div class=&quot;col-md-6 col-md-offset-3&quot;&gt;</span><br><span class="line">                         &lt;p&gt;偏移居中列&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C双向冒泡排序算法</title>
      <link href="2018-Algorithm/c-2-side-bubble-sort.html"/>
      <url>2018-Algorithm/c-2-side-bubble-sort.html</url>
      
        <content type="html"><![CDATA[<p>同事考研遇到的数据结构题：</p><blockquote><p>题目：冒泡排序算法是把大的元素向上移（气泡的上浮），也可以把小的元素向下移（气泡的下沉），请给出上浮和下沉过程交替的冒泡排序算法。</p></blockquote><p>为了减少重复代码，设置了变量step在1、-1间变化，来控制正向或反向冒泡。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.cpp</span><br><span class="line">//  双向冒泡算法</span><br><span class="line">//  Created by 家齐 on 2018/11/10.</span><br><span class="line">//</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void PrintArray(int *a, int n)&#123;</span><br><span class="line">    for (int i=0; i&lt;n; i++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BubbleSort(int *array, int n)&#123;</span><br><span class="line">    int i, j, k, temp, step;</span><br><span class="line">    i = 0;</span><br><span class="line">    step = 1;  //控制方向</span><br><span class="line">    for (k=n-1; k&gt;0; k--)&#123;</span><br><span class="line">        for (j=0; j&lt;k ; j++)&#123;</span><br><span class="line">            if (array[i+1]&lt;array[i])&#123;</span><br><span class="line">                temp = array[i];</span><br><span class="line">                array[i] = array[i+1];</span><br><span class="line">                array[i+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%d\n&quot;,i);</span><br><span class="line">            i += step;</span><br><span class="line">            PrintArray(array, n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">        //i回退两个位置</span><br><span class="line">        i -= step;</span><br><span class="line">        i -= step;</span><br><span class="line">        </span><br><span class="line">        step *= -1; //反向</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    int a[5] = &#123;5, 4, 3, 2, 1&#125;;</span><br><span class="line">    BubbleSort(a, 5);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">4 5 3 2 1 </span><br><span class="line">4 3 5 2 1 </span><br><span class="line">4 3 2 5 1 </span><br><span class="line">4 3 2 1 5 </span><br><span class="line"></span><br><span class="line">4 3 1 2 5 </span><br><span class="line">4 1 3 2 5 </span><br><span class="line">1 4 3 2 5 </span><br><span class="line"></span><br><span class="line">1 3 4 2 5 </span><br><span class="line">1 3 2 4 5 </span><br><span class="line"></span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bubble sort </tag>
            
            <tag> c </tag>
            
            <tag> both sides </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用vba做答题、抽点类ppt</title>
      <link href="2018-VBA/ppt-vab.html"/>
      <url>2018-VBA/ppt-vab.html</url>
      
        <content type="html"><![CDATA[<p>首先严重声明一下，我不是ppt高手，酷炫动画、美化之类一概不会，我只会写点代码，汇报ppt做得要多丑有多丑。</p><p>16年底，有幸拿到一份答题ppt模板，接手做了“XX知识问答竞赛”ppt，包含选题答题、倒计时、随机抽点等功能，初次接触到了VBA（Visual Basic for Applications）编程。</p><p>于是自那以后包办了单位各种答题类ppt……最近利用工作间隙又干了一票，感到是时候总结一下，把这项光荣而艰巨的任务传递下去了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWY2MzhmMzUxZDI2NGRlZDcuZ2lm" alt="随机抽点"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWNlNDc0OWMzZDA2NWExMmYuZ2lm" alt="选题答题，加减分"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWNlYmRkYTU4MzNiZDZiYWYuZ2lm" alt="倒计时，并播放提示音"></p><p>为了给ppt添加复杂功能，需要后台插入vba代码。下面整理一下为ppt插入、关联vba代码的基本流程，以及一些Bug的解决方法。</p><p>开发环境：Win10 x64，office 2016。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="显示“开发工具”"><a href="#显示“开发工具”" class="headerlink" title="显示“开发工具”"></a>显示“开发工具”</h3><p>在菜单栏显示“开发工具”，方便后续开发。<br>打开ppt，点 文件-&gt;选项-&gt;自定义功能区，勾选“开发工具”。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTIwMTM4NTliMzNiMTQxZTMucG5n?x-oss-process=image/format,png" alt></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQzZTA0MjFiNzI1OGIzNGMucG5n?x-oss-process=image/format,png" alt="出现“开发工具”菜单"></p><h3 id="选择引用库"><a href="#选择引用库" class="headerlink" title="选择引用库"></a>选择引用库</h3><p>当需要读写Excel时，需勾选引用库。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTk2MTFjNTJhYzk3ZjliYzAucG5n?x-oss-process=image/format,png" alt="点开发工具-&gt;工具-&gt;引用，勾选“Microsoft Excel 16.0 Object Library”"></p><p><strong>注意：随office版本不同，16.0可能会变成12.0等，更换版本时（比如拿office 2010做的拷到office 2016的电脑上用）需要正确勾选。</strong></p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="插入形状"><a href="#插入形状" class="headerlink" title="插入形状"></a>插入形状</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTY5NTU1NmJmMjY5Mzk5ZDAucG5n?x-oss-process=image/format,png" alt="新建一页ppt，插入一个形状"></p><h3 id="插入按钮"><a href="#插入按钮" class="headerlink" title="插入按钮"></a>插入按钮</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTMxMzRhY2U3ODU4YjYwOWIucG5n?x-oss-process=image/format,png" alt="点菜单栏-&gt;开发工具-&gt;“命令按钮”，在页面上拖动，插入按钮"></p><h3 id="打开选择窗格，为对象命名（很重要！）"><a href="#打开选择窗格，为对象命名（很重要！）" class="headerlink" title="打开选择窗格，为对象命名（很重要！）"></a>打开选择窗格，为对象命名（很重要！）</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTBmYWQzNjMwZTc4NmQzZmEucG5n?x-oss-process=image/format,png" alt="点菜单栏-&gt;开始-&gt;选择-&gt;选择窗格，打开对象选择窗口"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LThmMzRhN2VjZGRhZGJmODEucG5n?x-oss-process=image/format,png" alt="双击将矩形对象名，改名为shape_text，这就是VBA中关联的形状名"></p><h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTM1ZDIzOWNlODRlMWMzNDYucG5n?x-oss-process=image/format,png" alt="双击按钮，或点菜单栏-&gt;开发工具-&gt;查看代码，进入开发页面"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWIyMDY0MTlkNjIyM2QzYjkucG5n?x-oss-process=image/format,png" alt="写入如下代码，功能是在形状上显示一行文字"></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> CommandButton1_Click()</span><br><span class="line">Shapes(<span class="string">"shape_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = <span class="string">"你好，VBA！"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="关联代码"><a href="#关联代码" class="headerlink" title="关联代码"></a>关联代码</h3><p>也可以为任何形状关联一段代码。需把代码片段声明中的“Private”关键字去掉，比如：<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Show()</span><br><span class="line">Shapes(<span class="string">"shape_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = <span class="string">"你好，VBA！"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure></p><p>然后回到ppt页面，为形状关联代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWRjZWFkZGMzZTJkM2Q5ZDcucG5n?x-oss-process=image/format,png" alt="选中形状，点菜单栏-&gt;插入-&gt;动作-&gt;运行宏"></p><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>方式一，播放ppt运行代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWZiNWFhZmY3MmRjZDlmYmIucG5n?x-oss-process=image/format,png" alt="点击菜单栏最左侧按钮，返回ppt页面"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWFkYTlmMTEzNjc1OTg2YjQucG5n?x-oss-process=image/format,png" alt="播放ppt，点击按钮，出现文字"></p><p>方式二，在开发页面直接运行代码（常用于调试）：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQyNGUxNDMwM2RkOTM3MWYucG5n?x-oss-process=image/format,png" alt="将光标放到希望运行的函数内，点菜单栏运行按钮"></p><p>以上是ppt vba开发基本流程，下面附上部分代码。</p><h2 id="部分关键代码"><a href="#部分关键代码" class="headerlink" title="部分关键代码"></a>部分关键代码</h2><h3 id="随机抽点："><a href="#随机抽点：" class="headerlink" title="随机抽点："></a>随机抽点：</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Sub</span> Sleep <span class="keyword">Lib</span> <span class="string">"kernel32"</span> (<span class="keyword">ByVal</span> dwMilliseconds <span class="keyword">As</span> <span class="built_in">Long</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">'开始</span></span><br><span class="line"><span class="keyword">Sub</span> RandomStart()</span><br><span class="line">    F = <span class="number">0</span></span><br><span class="line">    <span class="keyword">Do</span> <span class="keyword">While</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">If</span> F = <span class="number">1</span> <span class="keyword">Then</span> <span class="keyword">Exit</span> <span class="keyword">Do</span></span><br><span class="line">        currentQuestionNum = Int(num3_5 * Rnd)</span><br><span class="line">        Shapes(<span class="string">"lable_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = question3_5(currentQuestionNum, <span class="number">0</span>)</span><br><span class="line">        Sleep <span class="number">20</span></span><br><span class="line">        DoEvents</span><br><span class="line">    <span class="keyword">Loop</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'结束</span></span><br><span class="line"><span class="keyword">Sub</span> RandomStop()</span><br><span class="line">F = <span class="number">1</span></span><br><span class="line">Shapes(<span class="string">"shape_answer"</span>).Visible = msoTrue</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="选题答题："><a href="#选题答题：" class="headerlink" title="选题答题："></a>选题答题：</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> chooseQuestion20(i <span class="keyword">As</span> <span class="built_in">Integer</span>)</span><br><span class="line">    <span class="comment">'题号消失</span></span><br><span class="line">    Shapes(questionShape20(i)).TextFrame2.TextRange.<span class="keyword">Text</span> = <span class="string">""</span> </span><br><span class="line">    <span class="comment">'出现"显示答案"按钮</span></span><br><span class="line">    Shapes(<span class="string">"shape_answer"</span>).Visible = msoTrue</span><br><span class="line">    <span class="comment">'显示题目</span></span><br><span class="line">    currentQuestionNum = i</span><br><span class="line">    Shapes(<span class="string">"lable_text"</span>).TextFrame2.TextRange.<span class="keyword">Text</span> = question3_1(currentQuestionNum, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="显示图片："><a href="#显示图片：" class="headerlink" title="显示图片："></a>显示图片：</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shapes(<span class="string">"pic1"</span>).Fill.UserPicture (ActivePresentation.Path &amp; <span class="string">"\照片库\1.jpg"</span>)</span><br></pre></td></tr></table></figure><h2 id="各种疑难杂症"><a href="#各种疑难杂症" class="headerlink" title="各种疑难杂症"></a>各种疑难杂症</h2><p>遇到过各种神奇的问题，网上对ppt vba方面问题解答较少，有些解决起来费了些功夫。</p><h3 id="无法正常读取Excel"><a href="#无法正常读取Excel" class="headerlink" title="无法正常读取Excel"></a>无法正常读取Excel</h3><p>参考上文 “准备工作” “选择引用库” 。</p><h3 id="出现“缺少Sub或Function”错误"><a href="#出现“缺少Sub或Function”错误" class="headerlink" title="出现“缺少Sub或Function”错误"></a>出现“缺少Sub或Function”错误</h3><p>这是在office2016上开发后，换到office2007电脑上运行报的错。</p><p>解决方法：尽量保持office版本一致，建议使用2010以上版本。</p><h3 id="64位系统下，出现“类型不匹配”错误"><a href="#64位系统下，出现“类型不匹配”错误" class="headerlink" title="64位系统下，出现“类型不匹配”错误"></a>64位系统下，出现“类型不匹配”错误</h3><p>从32位系统迁移到64位系统后，运行倒计时函数CreateTimer：<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> SetTimer <span class="keyword">Lib</span> <span class="string">"user32"</span> (<span class="keyword">ByVal</span> hWnd <span class="keyword">As</span> _</span><br><span class="line">        <span class="built_in">Long</span>, <span class="keyword">ByVal</span> nIDEvent <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> uElapse <span class="keyword">As</span> <span class="built_in">Long</span>, _</span><br><span class="line">        <span class="keyword">ByVal</span> lpTimerFunc <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Function</span> CreateTimer(<span class="keyword">ByVal</span> Interval <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    <span class="comment">' 建立一个时间间隔为Interval微秒的定时器</span></span><br><span class="line">    <span class="keyword">Dim</span> tID <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    tID = SetTimer(<span class="number">0</span>, <span class="number">0</span>, Interval, <span class="keyword">AddressOf</span> TimerProc) <span class="comment">'运行到此处出错</span></span><br><span class="line">    CreateTimer = tID</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> TimerProc(<span class="keyword">ByVal</span> hWnd <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> Msg <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> idEvent <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwTime <span class="keyword">As</span> <span class="built_in">Long</span>)</span><br><span class="line">    <span class="comment">' 此处放入要执行的代码</span></span><br><span class="line">    CounterNumber</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure></p><p>出现以下错误：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQ0MThiNDA3ZjcwOWQzMjMucG5n?x-oss-process=image/format,png" alt></p><p>解决方法：将SetTimer声明的最后一个参数类型改为LongPtr，即指针类型即可。<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> SetTimer <span class="keyword">Lib</span> <span class="string">"user32"</span> (<span class="keyword">ByVal</span> hWnd <span class="keyword">As</span> _</span><br><span class="line">        <span class="built_in">Long</span>, <span class="keyword">ByVal</span> nIDEvent <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> uElapse <span class="keyword">As</span> <span class="built_in">Long</span>, _</span><br><span class="line">        <span class="keyword">ByVal</span> lpTimerFunc <span class="keyword">As</span> LongPtr) <span class="keyword">As</span> <span class="built_in">Long</span></span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>没有系统学过VB，但由于是类C语言，在有源码的支撑下，比葫芦画瓢拿来用并不费力，当时从最初接触到完成开发只用了一周时间。</p><p>但至今仍有许多未解决的疑惑，例如：</p><ol><li>如何将被点击形状的名称作为参数，使其被VBA代码捕获。目前为每个形状关联不同的函数，50个形状就要写50个函数、改50个名称、关联50次……；</li><li>如何随页面载入自动运行某段函数。目前采用手动点击按钮的方式初始化。</li></ol><p>上述问题可能在ppt vba中无解，也可能有更好的解决方法，欢迎交流。</p>]]></content>
      
      
      <categories>
          
          <category> vba编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ppt </tag>
            
            <tag> excel </tag>
            
            <tag> vba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量化考评网站初版</title>
      <link href="2018-Web/standard-front-8-29.html"/>
      <url>2018-Web/standard-front-8-29.html</url>
      
        <content type="html"><![CDATA[<p>在李成海大神搭的架子下，完成了量化考评网站前端部分。用到angular.js、gulp、bower、jade等，感谢成海指导。</p><p>18年7月31日，初版于单位内网上线，功能如下。</p><h2 id="用户入口"><a href="#用户入口" class="headerlink" title="用户入口"></a>用户入口</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWIwYzJjZDA4NDljNjYyZDUuZ2lm" alt></p><h3 id="考评页面"><a href="#考评页面" class="headerlink" title="考评页面"></a>考评页面</h3><h4 id="选择部门、日期"><a href="#选择部门、日期" class="headerlink" title="选择部门、日期"></a>选择部门、日期</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWY3NTZiZDBmMjhlZDRlMzguZ2lm" alt></p><h4 id="填写一日工作"><a href="#填写一日工作" class="headerlink" title="填写一日工作"></a>填写一日工作</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWQwNDI3ZDE4YjRjZmUzNTcuZ2lm" alt></p><ul><li><p>类似<strong>购物车</strong>功能，增减或直接修改数目，可实时看到得分结果。</p></li><li><p>当数目输入不合法时（字母，负数等），自动替换为0。</p></li><li><p>加分数目和减分数目均为0时，得分将被清空，不做统计。</p></li></ul><h4 id="快速导航按类别定位"><a href="#快速导航按类别定位" class="headerlink" title="快速导航按类别定位"></a>快速导航按类别定位</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWJlYzM4MDQ3NDViY2I3YzguZ2lm" alt></p><p>自动按类别生成导航菜单。</p><h4 id="提交今日工作"><a href="#提交今日工作" class="headerlink" title="提交今日工作"></a>提交今日工作</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTg3ZTcwNzU3ZDI3YjM1M2QuZ2lm" alt></p><p>显示今日总得分，提交后显示明细。</p><h4 id="防止重复提交"><a href="#防止重复提交" class="headerlink" title="防止重复提交"></a>防止重复提交</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTBjOWQyNzVlYzA2MjYwYWQuZ2lm" alt><br>显示“今日已提交！”，提交按钮变灰。</p><p>工作记录限制每天提交一次，一经提交不可更改。</p><h3 id="绩效搜索页面"><a href="#绩效搜索页面" class="headerlink" title="绩效搜索页面"></a>绩效搜索页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWUyMGI4YmFhYmI4NWViMTMuZ2lm" alt></p><p>查看个人绩效，可按得分类型、评语类型、起止日期等筛选。</p><h3 id="成长曲线页面"><a href="#成长曲线页面" class="headerlink" title="成长曲线页面"></a>成长曲线页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTEzNjU3MjgzNWEzMGM0NjMuZ2lm" alt></p><p>查看个人成长曲线，由每日得分构成。可按部门、起止日期筛选。</p><h2 id="领导入口"><a href="#领导入口" class="headerlink" title="领导入口"></a>领导入口</h2><h3 id="登录页面-1"><a href="#登录页面-1" class="headerlink" title="登录页面"></a>登录页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWE2NTM3MTgyNzI5MWE5YzMuZ2lm" alt></p><h3 id="绩效搜索页面-1"><a href="#绩效搜索页面-1" class="headerlink" title="绩效搜索页面"></a>绩效搜索页面</h3><h4 id="检索人员绩效"><a href="#检索人员绩效" class="headerlink" title="检索人员绩效"></a>检索人员绩效</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWM1MDIzZDMzNDU2NTcyN2EuZ2lm" alt></p><p>检索所属人员绩效，可按部门、姓名、得分类型、评语类型、起止日期等筛选。</p><h4 id="填写评语"><a href="#填写评语" class="headerlink" title="填写评语"></a>填写评语</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTliYzAwYTE3OTM2MWI3YTQuZ2lm" alt></p><p>领导可对某条绩效添加评语。普通用户将能在绩效搜索页面看到评语。</p><h3 id="成长曲线页面-1"><a href="#成长曲线页面-1" class="headerlink" title="成长曲线页面"></a>成长曲线页面</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTM4NDQ3N2ZhZWRjMDNkNzcuZ2lm" alt></p><p>查看所属人员成长曲线，可按部门、姓名、起止日期等筛选。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>网站后端由成海开发，使用springboot脚手架，效率极高地提供了数据增删查改的接口，这是后面需要学习的东西。</p><p>借此体验了前后端分离的合作开发模式：在阿里云服务器上搭建测试网站和数据库服务，在GitHub上共同管理代码。</p><p>源码可在我的GitHub上找到：<a href="https://github.com/zhang35" target="_blank" rel="noopener">https://github.com/zhang35</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化考评 web 购物车 成长曲线 评语 angular.js gulp bower jade </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器Vim学习笔记（三）——插件</title>
      <link href="2018-Vim/vim-8-22.html"/>
      <url>2018-Vim/vim-8-22.html</url>
      
        <content type="html"><![CDATA[<p>Vim有很多强大的插件。一开始使用别人的.vimrc配置文件，添加了众多自己都不认识的插件，结果便是懵圈。</p><p>应该需要根据自己的需求安装插件，掌握它们的基本用法。</p><h2 id="手动安装插件"><a href="#手动安装插件" class="headerlink" title="手动安装插件"></a>手动安装插件</h2><blockquote><p>第1种解压为<em>.exe的插件如ctags插件。将ctags.exe拷贝到 vim74目录下;<br>第2种解压为</em>.vim的插件如taglist插件。将taglist.vim、taglist.txt分别拷贝到vimfile下plugin和doc文件夹下;<br>第3种解压为*.vmb的插件如mark插件。例如将supertab.vmb用gvim打开,并执行命令【:so %】进行安装。</p></blockquote><h2 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h2><p>手动安装插件比较繁琐，需要插件管理器。</p><p>使用过pathogen、vundle和vim-plug。</p><ul><li>pathogen，将插件整体放在~/.vim/bundle文件夹中，每个插件一个文件夹，省去分别放.vim和.doc文件的麻烦。离线状态下管理插件很方便。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTNkYmM5MGVlM2YxZjE4MWIucG5n?x-oss-process=image/format,png" alt="pathogen管理插件"></p><ul><li><p>vundle实现的是“一个.vimrc走天下”，把所需插件都列在配置文件里，在线安装、更新、删除等。</p></li><li><p>Vim-plug与Vundle类似，更新、安装都是并发，单文件，小巧快捷。</p></li></ul><p>最终选择了pathogen，因为国内上网环境访问github太慢，在线安装插件缓慢且容易报错。</p><p>使用pathogen只需同步.vimrc和.vim文件夹即可。</p><h2 id="pathogen使用"><a href="#pathogen使用" class="headerlink" title="pathogen使用"></a>pathogen使用</h2><p> 官方链接：<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">https://github.com/tpope/vim-pathogen</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载pathogen.vim到~/.vim/autoload文件夹。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;&amp; \</span><br><span class="line">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure></p><p>在~/.vimrc中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execute pathogen#infect()</span><br><span class="line">syntax on</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>此时只需将完整插件放进~/.vim/bundle文件夹下即可。</p><p>安装插件的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/bundle &amp;&amp; \</span><br><span class="line">git clone https://github.com/tpope/vim-sensible.git</span><br></pre></td></tr></table></figure></p><p>生成帮助文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call pathogen#helptags()</span><br></pre></td></tr></table></figure></p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="NerdTree"><a href="#NerdTree" class="headerlink" title="NerdTree"></a>NerdTree</h3><p>左侧树形文件浏览器。</p><p>开启：<br><code>:NERDTree</code><br>上/下一个父节点：<br><code>ctrl-k/j</code><br>用标签页打开：<br><code>t</code><br>跳到父/根节点：<br><code>p/P</code></p><h3 id="EasyMotion"><a href="#EasyMotion" class="headerlink" title="EasyMotion"></a>EasyMotion</h3><p>精准跳转插件。</p><p>用法：<br><code>&lt;leader&gt;&lt;leader&gt;+移动指令</code><br>（<leader>默认为’\’）</leader></p><h3 id="CtrlP"><a href="#CtrlP" class="headerlink" title="CtrlP"></a>CtrlP</h3><p>文件模糊搜索。</p><p>用法：<br><code>ctrl-p</code></p><h3 id="nerdcommenter"><a href="#nerdcommenter" class="headerlink" title="nerdcommenter"></a>nerdcommenter</h3><p>注释工具。</p><p>用法：<br> 注释当前行：<br><code>&lt;leader&gt;-cc</code><br> 反注释当前行：<br><code>&lt;leader&gt;-cu</code><br> 性感方式注释：<br><code>&lt;leader&gt;-cs</code></p><h3 id="delimitMate"><a href="#delimitMate" class="headerlink" title="delimitMate"></a>delimitMate</h3><p>自动成对填写括号。</p><h3 id="syntastic"><a href="#syntastic" class="headerlink" title="syntastic"></a>syntastic</h3><p>语法检查，主动模式下保存文件时触发。</p><p>推荐.vimrc配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set statusline+=%#warningmsg#</span><br><span class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line">set statusline+=%*</span><br><span class="line"></span><br><span class="line">let g:syntastic_always_populate_loc_list = 1</span><br><span class="line">let g:syntastic_auto_loc_list = 1</span><br><span class="line">let g:syntastic_check_on_open = 1</span><br><span class="line">let g:syntastic_check_on_wq = 0</span><br></pre></td></tr></table></figure></p><p>用法：<br>手动检查：<br><code>SyntasticCheck</code><br>切换自动/手动模式：<br><code>SyntasticToggleMode</code><br>清除错误消息：<br><code>SyntasticReset</code><br>查看当前使用的checkers：<br><code>SyntasticInfo</code></p><h3 id="tabularize"><a href="#tabularize" class="headerlink" title="tabularize"></a>tabularize</h3><p>对齐文本。</p><p>用法：<br><code>:Tabularize /正则表达式</code><br>如按逗号分隔符对齐：<br><code>:Tabularize /,</code></p><h3 id="supertab"><a href="#supertab" class="headerlink" title="supertab"></a>supertab</h3><p>允许使用tab切换补全选项。</p><h3 id="surround-vim"><a href="#surround-vim" class="headerlink" title="surround.vim"></a>surround.vim</h3><p>快捷增删改括号。</p>]]></content>
      
      
      <categories>
          
          <category> vim学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器Vim学习笔记（二）——移动、跳转</title>
      <link href="2018-Vim/vim-8-6.html"/>
      <url>2018-Vim/vim-8-6.html</url>
      
        <content type="html"><![CDATA[<p>为了摆脱鼠标，高效准确的移动光标是首要的。下面总结移动指令。</p><h2 id="上下左右"><a href="#上下左右" class="headerlink" title="上下左右"></a>上下左右</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>上</td><td>k</td><td></td></tr><tr><td>下</td><td>j</td><td></td></tr><tr><td>左</td><td>h</td><td></td></tr><tr><td>右</td><td>i</td></tr></tbody></table><p>可以前加数字，表示移动的倍数。例如，”10j”表示下移动10行。</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>首行</td><td>gg</td><td></td></tr><tr><td>末行</td><td>G</td><td></td></tr><tr><td>第{n}行</td><td>{n}G、{n}gg、:{n}</td><td>ctrl-g查看当前位置</td></tr><tr><td>文件{n}%处的行</td><td>{n}%</td><td></td></tr><tr><td>行首</td><td>0</td><td></td></tr><tr><td>行尾</td><td>$</td><td></td></tr><tr><td>行内第一个非空字符</td><td>-</td></tr></tbody></table><h2 id="屏幕滚动"><a href="#屏幕滚动" class="headerlink" title="屏幕滚动"></a>屏幕滚动</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>下一页</td><td>ctrl-f</td><td></td></tr><tr><td>上一页</td><td>ctrl-b</td><td></td></tr><tr><td>下半页</td><td>ctrl-d</td><td></td></tr><tr><td>上半页</td><td>ctrl-u</td><td></td></tr><tr><td>下一行</td><td>ctrl-e</td><td></td></tr><tr><td>上一行</td><td>ctrl-y</td><td></td></tr><tr><td>当前页顶部</td><td>H</td><td>Head</td></tr><tr><td>当前页中部</td><td>M</td><td>Medium</td></tr><tr><td>当前页底部</td><td>L</td><td>Last</td></tr><tr><td>当前行滚到屏幕顶部</td><td>zt</td><td></td></tr><tr><td>当前行滚到屏幕底部</td><td>zb</td><td></td></tr><tr><td>当前行滚到屏幕中部</td><td>zz</td></tr></tbody></table><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><table><thead><tr><th>位置</th><th>按键</th><th>备注</th></tr></thead><tbody><tr><td>下一词首</td><td>w</td><td></td></tr><tr><td>下一词首（含符号）</td><td>W</td><td></td></tr><tr><td>上一词首</td><td>b</td><td></td></tr><tr><td>上一词首（含符号）</td><td>B</td><td></td></tr><tr><td>下一词尾</td><td>e</td><td></td></tr><tr><td>下一词尾（含符号）</td><td>E</td><td></td></tr><tr><td>上一词尾</td><td>ge</td><td></td></tr><tr><td>下一词尾</td><td>gE</td></tr></tbody></table><h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><table><thead><tr><th>位置</th><th>按键</th></tr></thead><tbody><tr><td>上次位置</td><td>ctrl-o</td></tr><tr><td>下次位置</td><td>ctrl-i</td></tr></tbody></table><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>搜索是最快速的跳转。</p><table><thead><tr><th>位置</th><th>按键</th><th>备注</th><th>下一个</th><th>上一个</th></tr></thead><tbody><tr><td>下个{char}</td><td>f{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>上个{char}</td><td>F{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>下个{char}前</td><td>t{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>上个{char}前</td><td>T{char}</td><td></td><td>;</td><td>,</td></tr><tr><td>下个{string}</td><td>/{string}</td><td>正则表达式</td><td>n</td><td>N</td></tr><tr><td>上个{string}</td><td>?{string}</td><td>正则表达式</td><td>n</td><td>N</td></tr></tbody></table><h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>设置标签：m{mark}<br>查看标签：:marks<br>跳转到标签：`{mark}</p><p>Vim常用自动创建的位置标志有：<br>| 位置             | 标签名 | 备注 |<br>| —————- | —— | —- |<br>| 上次跳转位置     | `      |      |<br>| 上次修改位置     | .      |      |<br>| 上次修改位置开头 | [      |      |<br>| 上次修改位结尾   | ]      |      |</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><table><thead><tr><th>位置</th><th>按键</th><th>例子</th></tr></thead><tbody><tr><td>关键字定义处</td><td>ctrl+]</td><td></td></tr><tr><td>括号匹配处</td><td>%</td></tr></tbody></table><h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p>Vim有 6 种折叠模式：</p><ul><li>manual           手工定义折叠</li><li>indent             更多的缩进表示更高级别的折叠</li><li>expr                用表达式来定义折叠</li><li>syntax             用语法高亮来定义折叠</li><li>diff                  对没有更改的文本进行折叠</li><li>marker            对文中的标志折叠</li></ul><p>在.vimrc里增加set fdm=indent，即开启自动折叠。</p><p>常用操作为：</p><table><thead><tr><th>操作</th><th>按键</th><th>例子</th></tr></thead><tbody><tr><td>关闭所有折叠</td><td>zm</td><td></td></tr><tr><td>展开所有折叠</td><td>zr</td><td></td></tr><tr><td>创建折叠</td><td>zf</td><td>zf% 、zf56G</td></tr><tr><td>关闭折叠</td><td>zc</td><td></td></tr><tr><td>嵌套关闭折叠</td><td>zC</td><td></td></tr><tr><td>展开折叠</td><td>zo</td><td></td></tr><tr><td>嵌套展开折叠</td><td>zO</td><td></td></tr><tr><td>下一个折叠</td><td>zj</td><td></td></tr><tr><td>上一个折叠</td><td>zk</td></tr></tbody></table><h2 id="EasyMotion插件"><a href="#EasyMotion插件" class="headerlink" title="EasyMotion插件"></a>EasyMotion插件</h2><p>Vim官网上评级为life changing的插件，能实现跨越多行的精准跳转。</p><p>使用方法：在原有的跳转指令前加{leader}{leader}键，{leader}默认为反斜杠<code>\</code>。</p><p>例如，输入<code>\\w</code>,效果如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWMyNzFiNTQyZjJjMjYyODkucG5n?x-oss-process=image/format,png" alt="初始位置"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWUyZTg4YTk0MDU4OTJmYTIucG5n?x-oss-process=image/format,png" alt="指令效果"></p><p>输入位置对应的字母即可跳转过去。太帅了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结了Vim常用移动和跳转指令，及Easymotion插件。</p>]]></content>
      
      
      <categories>
          
          <category> vim学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本编辑器Vim学习笔记（一）——基础操作</title>
      <link href="2018-Vim/vim-8-1.html"/>
      <url>2018-Vim/vim-8-1.html</url>
      
        <content type="html"><![CDATA[<p>Vim是一个文本编辑器，遵循程序员的“极懒”原则：能用键盘就不用鼠标，能敲一次键盘解决就绝不敲第二次，手指能在近处就绝不挪远。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTJjM2QwZTZlMWRiNTBhYTgucG5n?x-oss-process=image/format,png" alt="Vim"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWNlMDM1ZDU5MTMxMTBjOGIucG5n?x-oss-process=image/format,png" alt="加过插件的Vim"></p><p>第一次见我哥用，我问他不用鼠标怎么移动光标呢？他给我演示了 行号+G 直接跳到某一行（想象一下不用腾出手挪鼠标，十指保持在键盘上飞舞的效率）。研三做项目时，国科毕业的博士师兄推荐用Vim，买了教材——《Vim 实用技巧》（Practice Vim），自此入坑，至今已三年。Vim虐我千百遍，我待Vim如初恋。</p><p>Vim极度高效优雅，比如想要删除一行文字，普通编辑器需要拿鼠标涂黑一整行再按退格，而Vim只需要按“dd”；再比如想要另起一行插入文字，普通编辑器需要拿鼠标找到当前行末尾按回车，而Vim只需要按“o”。</p><p>和学Ps一样，下决心学Vim已经不下5次了，这次目标是“从入门到精通”。（入门的话，强烈推荐上述教材，它不仅教了“术”，更是教了“道”）</p><h2 id="4个模式"><a href="#4个模式" class="headerlink" title="4个模式"></a>4个模式</h2><p>vim有4个模式：</p><ul><li>普通模式 (Normal-mode) ：键盘所有键都成了快捷键，平时最常保持的模式。如同画家作画，更多的是构思、寻找位置，动笔（插入模式）只是最后一个步骤。</li><li>插入模式 (Insert-mode)：和普通文本编辑器一样，输入什么就是什么。</li><li>命令模式 (Command-mode)：普通模式下输入“：”即进入，能执行命令行。</li><li>可视模式 (Visual-mode)：相当于普通文本编辑器下的“涂黑”，先选范围后编辑。</li></ul><p>Vim的操作清单如下（手动微笑）：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWFhMDAxYzI5NDVkMzMzMzYucG5n?x-oss-process=image/format,png" alt="vim_cheat_sheet_for_programmers"></p><p>这些快捷键通过一系列排列组合，能产生强大的效果。</p><h2 id="两种操作逻辑"><a href="#两种操作逻辑" class="headerlink" title="两种操作逻辑"></a>两种操作逻辑</h2><h3 id="动作-范围"><a href="#动作-范围" class="headerlink" title="动作+范围"></a>动作+范围</h3><p>普通模式下，先输入动作的快捷键，比如d（删除），c（删除并插入），y（复制），p（粘贴）等。</p><p>再输入范围，比如w（当前字符后面的单词），aw(当前字符所在的整个单词，包含空格)，iw（当前字符所在的整个单词，不空格），即可形成完整的指令。</p><p>组合命令如：</p><p><code>ciw</code> ：清除当前单词（不含后边空格），并进入插入模式。</p><p>c指change，i指inner，w指word。</p><h3 id="范围-动作"><a href="#范围-动作" class="headerlink" title="范围+动作"></a>范围+动作</h3><p>可视模式下选中的内容，相当于普通文本编辑器的“涂黑”。先选择范围后再按动作键，即可形成指令。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>网上找到的指令速记思维导图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWY2ZDkzODE5MTgzYzdkYjcucG5n?x-oss-process=image/format,png" alt="图片来自网络"></p><p>要熟练掌握这些指令，无它，唯有多记多用。</p>]]></content>
      
      
      <categories>
          
          <category> vim学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJS学习笔记</title>
      <link href="2018-Web/AngularJS-7-23.html"/>
      <url>2018-Web/AngularJS-7-23.html</url>
      
        <content type="html"><![CDATA[<p>做绩效考评网站前端，用到angular.js，很强大。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>AngularJS 是一个 JavaScript 框架。</p></blockquote><blockquote><p>AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。</p></blockquote><ul><li>AngularJS 把应用程序数据绑定到 HTML 元素。</li><li>AngularJS 可以克隆和重复 HTML 元素。</li><li>AngularJS 可以隐藏和显示 HTML 元素。</li><li>AngularJS 可以在 HTML 元素”背后”添加代码。</li><li>AngularJS 支持输入验证。</li></ul><h2 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</span><br><span class="line">    名字: &lt;input ng-model=&quot;name&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;myCtrl&apos;, function($scope) &#123;</span><br><span class="line">    $scope.name = &quot;John Doe&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>view和controller中的值绑定后，改变一方，另一方实时变化。</p><h2 id="ng-repeat循环元素"><a href="#ng-repeat循环元素" class="headerlink" title="ng-repeat循环元素"></a>ng-repeat循环元素</h2><p>基本用法：x in records:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr ng-repeat=&quot;x in records&quot;&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123;x.Name&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123;x.Country&#125;&#125;&lt;/td&gt; </span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p><p>同时输出key和value，(x, y) in myObj：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;table ng-controller=&quot;myCtrl&quot; border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr ng-repeat=&quot;(x, y) in myObj&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;x&#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123;y&#125;&#125;&lt;/td&gt; </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&quot;myApp&quot;, []);</span><br><span class="line">app.controller(&quot;myCtrl&quot;, function($scope) &#123;</span><br><span class="line">    $scope.myObj = &#123;</span><br><span class="line">        &quot;Name&quot; : &quot;Alfreds Futterkiste&quot;,</span><br><span class="line">        &quot;Country&quot; : &quot;Germany&quot;,</span><br><span class="line">        &quot;City&quot; : &quot;Berlin&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="ng-options下拉选项"><a href="#ng-options下拉选项" class="headerlink" title="ng-options下拉选项"></a>ng-options下拉选项</h2><p>参考：<a href="https://www.baidu.com/link?url=_XHaqFuLPeXar6Kxwte4sMXDIJtFXcnqdx6O71T8u8_Z57DGHDm-7NoVF2j1CeQ7bZb6Zqh5tCutIJ192EdwqK&amp;wd=&amp;eqid=9621fda7000156d4000000035b3ae580" target="_blank" rel="noopener">angular指令笔记<em>ng-options</em>的使用方法<em>AngularJS</em>脚本之家</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;select ng-options=&quot;c.id as c.city for c in obj1&quot; ng-model=&quot;selectedCity&quot; ng-change=&quot;SelecteCity()&quot;&gt;</span><br></pre></td></tr></table></figure><p>这里  c.id as c.city for c in obj  我们使用 obj 对象的 id作为select的value，使用obj 的city 作为 select 的label。</p><p>本文的jade代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select.form-control(ng-options=&apos;item.departmentId as item.departmentName for item in relations&apos;, ng-model=&apos;search.departmentId&apos;)</span><br></pre></td></tr></table></figure><p>relations.departmentName为显示的label，relations.departmentId为value，绑定的model是search.departmentId。</p><p>（relations是Controller中定义的对象）</p><h2 id="scope作用域问题："><a href="#scope作用域问题：" class="headerlink" title="$scope作用域问题："></a>$scope作用域问题：</h2><p>例如，前端指定ng-change=’loadData’：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select.form-control(ng-options=&apos;item.id as item.username for item in persons&apos;, ng-model=&apos;search.personId&apos;,ng-change=&apos;loadData&apos;)</span><br></pre></td></tr></table></figure><p>在js中定义loadData()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var loadData = function () &#123;</span><br><span class="line">    $http(buildParam())</span><br><span class="line">        .then(function (response) &#123;</span><br><span class="line">            if (response.data.status === 200) &#123;</span><br><span class="line">                $scope.items = response.data.data;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $.notify(response.data.message, &apos;danger&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        function (x) &#123;</span><br><span class="line">            $.notify(&apos;服务器出了点问题，我们正在处理&apos;, &apos;danger&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当选项变更时，是无法触发loadData的，因为前端能交互的作用域都在$scope里。需要添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scope.loadData = loadData();</span><br></pre></td></tr></table></figure><p>或者直接如下定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.loadData = function()&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AngularJS web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(三)分支管理</title>
      <link href="2018-Git/git-7-23.html"/>
      <url>2018-Git/git-7-23.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git分支原理"><a href="#Git分支原理" class="headerlink" title="Git分支原理"></a>Git分支原理</h2><p>新建dev分支：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTRhZWVlYjE3ZTlmNTE5YzMucG5n?x-oss-process=image/format,png" alt></p><p>在dev分支上提交：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTY2MTgyYjgwZTQzNzBkMTcucG5n?x-oss-process=image/format,png" alt></p><p>切回到master并合并dev：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWIxNWYyOWZlZWM1MmNiZWEucG5n?x-oss-process=image/format,png" alt></p><p>团队工作流程：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWMxZmE3NDhhMTkxM2I2MzYucG5n?x-oss-process=image/format,png" alt></p><p>（图片来自廖雪峰Git教程）</p><h2 id="新建分支："><a href="#新建分支：" class="headerlink" title="新建分支："></a>新建分支：</h2><p>查看当前分支：<br><code>$ git branch</code></p><p>新建、切换分支：<br><code>$ git branch dev</code><br><code>$ git checkout dev</code></p><p>或者简化命令，直接新建并切换分支：</p><p><code>$ git checkout -b dev</code></p><p>以后的提交就是在dev上的，master不受影响。</p><h2 id="合并分支："><a href="#合并分支：" class="headerlink" title="合并分支："></a>合并分支：</h2><p>切回master，此时代码恢复到master时状态：</p><p><code>$ git checkout master</code></p><p>将dev合并到当前分支master上：</p><p><code>$ git merge dev</code></p><h3 id="普通模式合并"><a href="#普通模式合并" class="headerlink" title="普通模式合并"></a>普通模式合并</h3><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并：</p><p><code>$ git merge --no-ff dev</code></p><p>在merge时会生成一个新的commit。而默认的fast forward合并就看不出来曾经做过合并。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>如果两个分支都提交了对同一文件的更改，合并二者将产生冲突：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Auto-merging newFile.txt</span><br><span class="line">CONFLICT (content): Merge conflict in newFile.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>git status查看状态如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   newFile.txt</span><br></pre></td></tr></table></figure></p><p>冲突文件已经记录了冲突，可直接编辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim newFile.txt </span><br><span class="line"></span><br><span class="line">  1 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD                                                                </span><br><span class="line">  2 master add</span><br><span class="line">  3 =======</span><br><span class="line">  4 dev add</span><br></pre></td></tr></table></figure></p><p>修改后，即可提交成功。</p><p>这说明<code>$ git merge</code>命令即使遇到冲突也会发生作用，继续合并且标记了冲突，产生了新的修改。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p><code>$ git branch -d dev</code></p><p>如dev含有未合并的更改，则可用-D强制删除：</p><p><code>git branch -D dev</code></p><h2 id="暂存现场"><a href="#暂存现场" class="headerlink" title="暂存现场"></a>暂存现场</h2><p>情景：为解决master分支的一个bug，需临时从dev分支切过去。</p><p>这时如果在dev上修改了文件，但未提交，切换分支时会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git co master</span><br><span class="line">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class="line">newFile.txt</span><br><span class="line">Please commit your changes or stash them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure></p><p>“要么提交，要么暂存，否则这些更改就会消失。”</p><p>如果还不想提交，那就先stash起来：</p><p><code>$ git stash</code></p><p>然后切换到其它分支改改改。</p><p>完事后再切回到dev，查看stash列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: 471716b dev`</span><br></pre></td></tr></table></figure></p><p>恢复现场：</p><p>一是用git stash apply恢复，但是恢复后，还需要用git stash drop来删除stash内容；</p><p>另一种方式是用git stash pop，恢复的同时把stash内容也删了：</p><p><code>$ git stash pop</code></p><p>这样dev上未提交的更改又出现了。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(二)版本管理</title>
      <link href="2018-Git/git-5-6.html"/>
      <url>2018-Git/git-5-6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git版本控制系统"><a href="#Git版本控制系统" class="headerlink" title="Git版本控制系统"></a>Git版本控制系统</h2><p>Git版本控制流程为：<br>工作区（Working Directory / Copy）-&gt;暂存区(stage / index)-&gt;分支。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTQyNDdkNjU3YTU3ODBmN2QucG5n?x-oss-process=image/format,png" alt="工作区、暂存区、分支（来自廖雪峰Git教程）"></p><p>工作区即当前目录，其中有一个隐藏目录.git，为版本库，记录了所有版本信息，包含暂存区和分支等；</p><p><code>$ git add</code>将文件从<strong>工作区</strong>添加到<strong>暂存区</strong>；</p><p><code>$ git commit</code>将<strong>暂存区</strong>的内容提交到<strong>分支</strong>；</p><p>下面的名词解释十分精彩，引自：<a href="https://www.cnblogs.com/kidsitcn/p/4513297.html" target="_blank" rel="noopener">https://www.cnblogs.com/kidsitcn/p/4513297.html</a></p><blockquote><p>首先我们来看几个术语</p><ul><li>HEAD<br>这是当前分支版本顶端的别名，也就是在当前分支你最近的一个提交</li><li>Index<br>index也被称为staging area，是指一整套即将被下一个提交的文件集合。他也是将成为HEAD的父亲的那个commit</li><li>Working Copy<br>working copy代表你正在工作的那个文件集</li></ul></blockquote><blockquote><p>当你第一次checkout一个分支，HEAD就指向当前分支的最近一个commit。在HEAD中的文件集（实际上他们从技术上不是文件，他们是blobs（一团），但是为了讨论的方便我们就简化认为他们就是一些文件）和在index中的文件集是相同的，在working copy的文件集和HEAD,INDEX中的文件集是完全相同的。所有三者(HEAD,INDEX(STAGING),WORKING COPY)都是相同的状态，GIT很happy。</p></blockquote><blockquote><p>当你对一个文件执行一次修改，Git感知到了这个修改，并且说：“嘿，文件已经变更了！你的working copy不再和index,head相同！”，随后GIT标记这个文件是修改过的。</p></blockquote><blockquote><p>然后，当你执行一个git add,它就stages the file in the index，并且GIT说：“嘿，OK，现在你的working copy和index区是相同的，但是他们和HEAD区是不同的！”</p></blockquote><blockquote><p>当你执行一个git commit,GIT就创建一个新的commit，随后HEAD就指向这个新的commit，而index,working copy的状态和HEAD就又完全匹配相同了，GIT又一次HAPPY了。</p></blockquote><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>HEAD是指向当前版本的指针。回退版本其实就是改变HEAD指向的位置：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTU4YzI1YWNmOThhNmRlN2MucG5n?x-oss-process=image/format,png" alt="当前版本（来自廖雪峰Git教程）"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTkzNzliMGM5ZDMxYTM2MjcucG5n?x-oss-process=image/format,png" alt="回退一个版本（来自廖雪峰Git教程）"></p><p>版本回退命令为：<br><code>git reset [--hard|soft|mixed|merge|keep] [&lt;commit&gt;或HEAD]</code></p><p>其中，常用的选项分别有如下功能：</p><ul><li>hard：回滚 HEAD + index + 工作区，彻底没了；</li><li>soft：回滚 HEAD，回到index，可以重新commit；</li><li>mixed（默认参数）：回滚 HEAD + index，回到工作区，可以重新add。</li></ul><h3 id="回退前N个版本"><a href="#回退前N个版本" class="headerlink" title="回退前N个版本"></a>回退前N个版本</h3><p>上一个版本为HEAD\^，上上一个版本为HEAD^^，上n个版本为HEAD~n。</p><p>如果执行<code>$ git reset --hard HEAD</code>，什么都不会发生，因为还在原地。</p><p>回退一个版本：<br><code>$ git reset --hard HEAD^</code></p><p>回退10个版本：<br><code>$ git reset --hard HEAD~10</code></p><h3 id="回退到指定版本"><a href="#回退到指定版本" class="headerlink" title="回退到指定版本"></a>回退到指定版本</h3><p>先<code>$ git log</code>查看版本库状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line"></span><br><span class="line">commit 7afc632b7bbd7867fb8f74d313c0a558021645a3 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: zhang35 &lt;zhangjqfriend@126.com&gt;</span><br><span class="line">Date:   Wed Jan 10 12:26:17 2018 +0800</span><br><span class="line"></span><br><span class="line">    Update File.txt</span><br><span class="line"></span><br><span class="line">commit 287ed58123b17ba814c2d94ad593c8cfc11af1a6</span><br><span class="line">Author: zhang-pc &lt;zhangjqfriend@126.com&gt;</span><br><span class="line">Date:   Wed Jan 10 12:25:52 2018 +0800</span><br><span class="line"></span><br><span class="line">    fun</span><br></pre></td></tr></table></figure></p><p>指定版本号前几位即可：</p><p> <code>$ git reset --hard 287ed</code></p><h3 id="撤销回退"><a href="#撤销回退" class="headerlink" title="撤销回退"></a>撤销回退</h3><p>如果回退到某版本后后悔了，想返回到原先的版本，可以<br><code>$ git reflog</code>查看命令记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line">287ed58 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 287ed</span><br><span class="line">7afc632 (origin/master, origin/HEAD) HEAD@&#123;1&#125;: clone: from git@github.com:zhang35/Hello-Git.git</span><br></pre></td></tr></table></figure><p>找到之前的版本id即可恢复回去：</p><p> <code>$ git reset --hard 7afc</code></p><h2 id="丢弃修改"><a href="#丢弃修改" class="headerlink" title="丢弃修改"></a>丢弃修改</h2><p>使用<code>$ git status</code>查看状态，可以看到如何撤销的提示。</p><h3 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h3><p>对于已经add到暂存区，但未commit的修改，<code>$ git status</code>提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">modified:   File.txt</span><br></pre></td></tr></table></figure></p><p>移出暂存区：<br><code>git reset HEAD File.txt</code></p><p>（HEAD即当前最新版本）</p><p>这样对File.txt的修改就回到了工作区。</p><h3 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h3><p>对于尚在工作区，还没add到暂存区的修改，<code>$ git status</code>提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   File.txt</span><br></pre></td></tr></table></figure></p><p>从工作区丢弃更改：<br><code>$ git checkout -- File.txt</code></p><p>(命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令)</p><p>这时<code>$ git status</code>提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><p>世界清净了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简介了Git版本管理系统，总结了版本回退、丢弃修改的基本方法。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> .gitignore </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(一)基础用法</title>
      <link href="2018-Git/git-5-5.html"/>
      <url>2018-Git/git-5-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git是当前最流行的分布式版本控制系统。Git是一个本地软件，需要下载安装。</p><h2 id="简化命令"><a href="#简化命令" class="headerlink" title="简化命令"></a>简化命令</h2><p>为了方便使用，首先自定义简化指令：</p><p><code>$ git config --global alias.st status</code></p><p>更简单的做法是，在用户主目录下的隐藏文件.gitconfig 中加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[alias]  </span><br><span class="line">    st = status  </span><br><span class="line">    ci = commit  </span><br><span class="line">    br = branch  </span><br><span class="line">    co = checkout  </span><br><span class="line">    df = diff  </span><br><span class="line">    unstage = reset HEAD --</span><br><span class="line">    last = log -1 HEAD</span><br></pre></td></tr></table></figure></p><p>这样，git status/commit/branch/checkout等反人类的长命令，可以敲俩字母代替了。</p><h2 id="新建版本库"><a href="#新建版本库" class="headerlink" title="新建版本库"></a>新建版本库</h2><p>在当前文件夹创建版本库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir leader-front</span><br><span class="line">$ cd leader-front</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><h2 id="添加文件："><a href="#添加文件：" class="headerlink" title="添加文件："></a>添加文件：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]</span><br><span class="line">      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]</span><br><span class="line">      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]</span><br><span class="line">      [--chmod=(+|-)x] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure><p>添加指定文件：<br><code>$ git add file1.txt</code><br><code>$ git add file2.txt file3.txt</code></p><p>添加多个文件：<br><code>$ git add document/*.txt</code></p><p>添加所有文件：<br><code>$ git add .</code></p><h3 id="gitignore忽略文件"><a href="#gitignore忽略文件" class="headerlink" title=".gitignore忽略文件"></a>.gitignore忽略文件</h3><p>对于不想添加到仓库的文件，如Desktop.ini，可以通过写.gitignore文件忽略之。</p><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a>提供了常用的配置文件。</p><p>.gitignore例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br></pre></td></tr></table></figure></p><p>把.gitignore文件单独提交到git后即生效。检验其是否生效方法是，<code>$ git status</code>命令是否显示<code>working directory clean</code>。</p><p>gitignore还可以指定要将哪些文件添加到版本管理中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!*.zip</span><br><span class="line">!/mtk/one.txt</span><br></pre></td></tr></table></figure></p><p>唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。</p><h2 id="提交修改："><a href="#提交修改：" class="headerlink" title="提交修改："></a>提交修改：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git commit [-a | --interactive | --patch] [-s] [-v] [-u&lt;mode&gt;] [--amend]</span><br><span class="line">       [--dry-run] [(-c | -C | --fixup | --squash) &lt;commit&gt;]</span><br><span class="line">       [-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]</span><br><span class="line">       [--allow-empty-message] [--no-verify] [-e] [--author=&lt;author&gt;]</span><br><span class="line">       [--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;] [--[no-]status]</span><br><span class="line">       [-i | -o] [-S[&lt;keyid&gt;]] [--] [&lt;file&gt;…​]</span><br></pre></td></tr></table></figure><p>提交暂存区的改动：<br><code>git commit -m &quot;info&quot;</code></p><p>必须得有改动说明。如果没用-m指定，会单独开一个窗口让你写。</p><h2 id="上传代码到远程仓库"><a href="#上传代码到远程仓库" class="headerlink" title="上传代码到远程仓库"></a>上传代码到远程仓库</h2><p>通常使用Github等远程仓库存储、共享代码。</p><p>Github是Git的一个网络实现，提供了免费的远程代码存储仓库。</p><p>由于Github服务器在国外，访问速度感人，可以选用国内类似的代码仓库，比如：码云，coding.net等。</p><p>下面以Git+Github管理前端项目leader-front为例，总结如何使用远程仓库存储代码。</p><h3 id="从本地上传代码到Github"><a href="#从本地上传代码到Github" class="headerlink" title="从本地上传代码到Github"></a>从本地上传代码到Github</h3><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>登录Github，创建仓库leader-front，全是鼠标操作。<br><em>(在自己的Github账户中，需要添加本机SSH公钥后，才能推送)</em></p><p>回到本地命令行，关联远程仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:zhang35/leader-front.git</span><br></pre></td></tr></table></figure></p><p>名为origin（origin是git远程仓库的默认名称），以后直接<code>$ git push</code>即可上传。</p><p>也可以起名为“github”，以后使用<code>$ git push github</code>上传。</p><h4 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h4><p>关联远程仓库后，直接输入<code>$ git push</code>后会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fatal: The current branch master has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin master</span><br></pre></td></tr></table></figure></p><p>因为此时只关联了仓库，还没关联分支。</p><p>不关联分支的情况下，执行：</p><p><code>$ git push origin master</code></p><p>即可将当前分支推送到远程origin下的master分支。</p><p>为了简化这一步骤，第一次推送前，根据提示添加默认关联分支：</p><p><code>$ git push --set-upstream origin master</code></p><p>或同时完成推送和关联：</p><p><code>$ git push -u origin master</code></p><p>加上-u参数，本地的master分支和远程的master分支就关联了起来。</p><p>如果出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: src refspec master does not match any.</span><br><span class="line">error: failed to push some refs to &apos;git@github.com:zhang35/leader-front.git&apos;</span><br></pre></td></tr></table></figure></p><p>则是因为此时本地仓库为空，需要添加、提交修改才能提交。</p><h3 id="从Github获取代码"><a href="#从Github获取代码" class="headerlink" title="从Github获取代码"></a>从Github获取代码</h3><p>上一小节的做法是先有本地仓库，再与远程仓库关联。</p><p>更方便的做法是，先有远程仓库，从远程仓库克隆到本地，自动完成关联：</p><p><code>$ git clone git@github.com:zhang35/leader-front.git</code></p><p>或</p><p><code>$ git clone https://github.com/zhang35/leader-front.git</code></p><h2 id="例子：将本地项目上传到Github管理的完整流程"><a href="#例子：将本地项目上传到Github管理的完整流程" class="headerlink" title="例子：将本地项目上传到Github管理的完整流程"></a>例子：将本地项目上传到Github管理的完整流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir leader-front</span><br><span class="line">$ cd leader-front</span><br><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git ci -m &apos;add all&apos;</span><br><span class="line">$ git remote add origin git@github.com:zhang35/leader-front.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结了Git的基本用法，以及使用远程仓库储存代码的基本方法。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> .gitignore </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高效能人士的七个习惯》——史蒂芬·柯维</title>
      <link href="2018-Book/7-habits-4-22.html"/>
      <url>2018-Book/7-habits-4-22.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提高认知水平的经典书籍。</p><p>作者总结了从个人修养到为人处世的七项原则，形成了一套完整的体系：</p><p><img src="https://lh3.googleusercontent.com/proxy/hawJy9aLQ-UtAUH2Gh_cTkroiYAFxVK1bCerzcPoyFJnJ1z2HXEBsed-waCR1HLXspnxdcPka7_11raykb-Zaugh7hKp0yrwFNG4" alt="成熟模式图"></p><blockquote><p>“成熟模式图”( Maturity Continuum)即人类成长的三个阶段，分别为依赖期、独立期、互赖期。<br>依赖期的人靠别人来实现愿望；独立期的人单枪匹马打天下；互赖期的人，群策群力实现最高成就。</p></blockquote><p>在这个体系下，有了自下而上的七个习惯。</p><p>前三个促使个人领域的成功，后三个促使公众领域的成功，最后一个是用来凑数的。</p><p>七个习惯可概括为：</p><ol><li>积极主动：控制情绪，不受环境制约；</li><li>以始为终：确定个人原则并一以贯之；</li><li>要事第一：多干“重要但不紧急”的事；</li><li>双赢思维：多干利人又利己的事；</li><li>知彼解己：换位思考，体会他人感受；</li><li>综合统效：兼容并包，团队协作；</li><li>不断更新：保持学习。</li></ol><p>据说坚持修炼此道，便可走向人生巅峰：</p><blockquote><p>本书包含人类效能的许多原则，是基本而首要的，可永葆成功与幸福，放之四海皆准…</p></blockquote><p>这么说不严谨。但了解这些原则还是很有价值的，其中“积极主动”、“要事第一”、“双赢思维”对我启发很大。下面整理读书笔记。</p><h2 id="七个习惯概论"><a href="#七个习惯概论" class="headerlink" title="七个习惯概论"></a>七个习惯概论</h2><h3 id="品德的意义"><a href="#品德的意义" class="headerlink" title="品德的意义"></a>品德的意义</h3><blockquote><p>因此，近50年来讨论成功术的著作都很肤浅，谈的都是如何树立社会形象的技巧和如何成功的捷径。但这种用“阿斯匹林”和“创可贴”来治疗心灵痛苦的方法，往往是头痛医头，脚痛医脚，治标而不治本。有时似乎取得了暂时的效果，但是深层次的问题没有解决，不时又会重新浮现。</p></blockquote><blockquote><p>但在长久的人际关系中，单凭这些次要优势是难有作为的。倘若没有根深蒂固的诚信和基本的品德力量，那么生活的挑战迟早会让你真正的动机暴露无遗，一时的成功就会被人际关系的破裂所替代。</p></blockquote><blockquote><p>只有品德才是交流中最伶俐的“口齿”，正如爱默生( Emerson)所说：“大声喧哗反而难以入耳。”</p></blockquote><blockquote><p>当然，也有品德有余却沟通技巧不足的人，但即便人际关系质量因此受到影响，也是瑕不掩瑜。</p></blockquote><blockquote><p>如果我们只想让生活发生相对较小的变化，那么专注于自己的态度和行为即可，但是实质性的生活变化还是要靠思维的转换。<br>梭罗( Thoreau)曾经说过：“一棵邪恶的大树，砍它枝叶千斧，不如砍它根基一斧。”行为和态度就是枝叶，思维定式就是根基，抓住根本才能让生活出现实质性的进展。</p></blockquote><h3 id="效能的定义"><a href="#效能的定义" class="headerlink" title="效能的定义"></a>效能的定义</h3><blockquote><p>真正的效能应该包含两个要素：一是“产出”，即金蛋；二是“产能”——生产的资产或能力，即下金蛋的鹅。<br>在生活中“重蛋轻鹅”的人，最终会连这个产金蛋的资产也保不住。反之，“重鹅轻蛋”的人，最后自己都可能会被活活饿死，更不用说鹅了。<br>所以，效能在于产出与产能的平衡。</p></blockquote><blockquote><p>日常生活中，你是否曾为了多收获几枚金蛋而废寝忘食地工作，结果弄得精疲力竭，无法继续工作？其实若能好好睡一觉，那么第二天就会精力充沛，完成更多的工作，更好地迎接这一天的挑战。<br>再比如，你强迫别人按你的意志行事，结果却发现你们的关系变得空洞无物；反过来，如果你能用时用心经营人际关系，就能赢得信任与合作，通过开诚布公的交流获得实质性的进展。</p></blockquote><p>磨刀不误砍柴工，分配能量，厚积薄发。这点我已经做到了。</p><h2 id="习惯1：积极主动——个人愿景的原则"><a href="#习惯1：积极主动——个人愿景的原则" class="headerlink" title="习惯1：积极主动——个人愿景的原则"></a>习惯1：积极主动——个人愿景的原则</h2><h3 id="弗兰克尔的例子"><a href="#弗兰克尔的例子" class="headerlink" title="弗兰克尔的例子"></a>弗兰克尔的例子</h3><blockquote><p>维克多·弗兰克尔（Victor Frankl，1905 -1997，出生于奥地利的美国神经与精神病学教授——译注）的感人事迹可以帮助我们回答上述疑问。<br>身为犹太人，弗兰克尔曾在“二战”期间被关进纳粹德国的死亡集中营，其父母、妻子与兄弟都死于纳粹魔掌，只剩下一个妹妹。他本人也饱受凌辱，历尽酷刑，过着朝不保夕的生活。<br>有一天，他赤身独处于狭小的囚室，忽然有一种全新的感受，后来他称之为“人类终极的自由”。虽然纳粹能控制他的生存环境，摧残他的肉体，但他的自我意识却是独立的，能够超脱肉体的束缚，以旁观者的身份审视自己的遭遇。他可以决定外界刺激对自己的影响程度，或者说，在遭遇（刺激）与对遭遇的回应之间，他有选择回应方式的自由或能力。<br>这期间他设想了各式各样的状况，比如想象他从死亡营获释后，站在讲台上给学生讲授自己从这段痛苦遭遇中学得的宝贵教训，告诉他们如何用心灵的眼睛看待自己的经历。<br>凭着想象与记忆，他不断修炼心灵、头脑和道德的自律能力，将内心的自由种子培育得日益成熟，直到超脱纳粹的禁锢。对于物质环境，纳粹享有决定权和一定的自由，但是弗兰克尔享有更伟大的自由——他强大的内心力量可以帮助他实践自己的选择，超越纳粹的禁锢。这种力量感化了其他的囚犯，甚至狱卒，帮助狱友们在苦难中找到生命的意义，寻回自尊。</p></blockquote><blockquote><p>在最恶劣的环境中，弗兰克尔运用人类独有的自我意识，发掘了人性最根本的原则，即在刺激与回应之间，人有选择的自由。</p></blockquote><blockquote><p>埃莉诺·罗斯福（Eleanor Roosevelt，美国小罗斯福总统的夫人——译注）曾说：“除非你愿意，否则没人能伤害你。”</p></blockquote><blockquote><p>圣雄甘地：“除非拱手相让，否则没人能剥夺我们的自尊。”可见最刻骨铭心的伤害并非悲惨遭遇本身，而是我们竟然会听任这些遭遇发生在自己身上。</p></blockquote><p>这个例子直击我的内心。同样是封闭的环境，但控制情绪，处变不惊，精神便能自由自在。</p><h3 id="对待恋爱关系"><a href="#对待恋爱关系" class="headerlink" title="对待恋爱关系"></a>对待恋爱关系</h3><blockquote><p>“可是没有爱，你让我怎么去爱呢？”<br>“老兄，爱是一个动词，爱的感觉是爱的行动所带来的成果，所以请你爱她，为她服务，为她牺牲，聆听她心里的话，设身处地为她着想，欣赏她，肯定她。你愿意吗？”<br>在所有进步的社会中，爱都是代表动作，但消极被动的人却把爱当做一种感觉。好莱坞式的电影就常灌输这种不必为爱负责的观念——因为爱只是感觉，没有感觉，便没有爱。事实上，任由感觉左右行为是不负责任的做法。</p></blockquote><p>维持婚姻关系需要极大投入，爱意慢慢消散，最后只剩下责任。</p><p>婚姻制度果真泯灭人性，唉。</p><h2 id="习惯2：以始为终"><a href="#习惯2：以始为终" class="headerlink" title="习惯2：以始为终"></a>习惯2：以始为终</h2><h3 id="制定原则的重要性"><a href="#制定原则的重要性" class="headerlink" title="制定原则的重要性"></a>制定原则的重要性</h3><blockquote><p>成功，甚至求生的关键并不在于你流了多少血汗，而在于你努力的方向是否正确，因此无论在哪个行业，领导都重于管理。</p></blockquote><blockquote><p>个人生活中的领导意识更为匮乏，很多人连自己的价值观都没有搞清楚，就忙于提高效率，制定目标或完成任务。</p></blockquote><h3 id="个人使命宣言"><a href="#个人使命宣言" class="headerlink" title="个人使命宣言"></a>个人使命宣言</h3><blockquote><p>以终为始最有效的方法，就是撰写一份个人使命宣言，即人生哲学或基本信念。宣言主要说明自己想成为怎样的人（品德），成就什么样的事业（贡献和成就）及为此奠基的价值观和原则。</p></blockquote><p>高晓松：”男人要有一以贯之的价值观“。</p><p>个人原则很重要，我现在就苦于琢磨这个事。</p><p>但列出个原则清单谈何容易，悟道必定需要长久积累。慢慢来，多读书，读国学经典。</p><h3 id="根据原则做决策的例子"><a href="#根据原则做决策的例子" class="headerlink" title="根据原则做决策的例子"></a>根据原则做决策的例子</h3><blockquote><p>现在假定你已经买好票，准备晚上与配偶一起去听音乐会，对方兴奋不已，满怀期待。<br>可是下午四点钟，老板突然来电话要你晚上加班，理由是第二天上午九点钟有一个重要会议。<br>◆对以家庭或配偶为中心的人而言，当然是优先考虑配偶的感觉，为了不让他（她）失望，你很可能会委婉地拒绝老板。即使为了保住工作而勉强留下来加班，心里也一定十分不情愿，担心着配偶的反应，想着用什么合适的理由来平息他（她）的失望与不满。<br>◆以金钱为中心的人则看重加班费或加班对于老板调薪决策的影响，于是理直气壮地告诉配偶自己要加班，并理所当然地认为对方应该谅解，毕竟经济利益高于一切。<br>◆以工作为中心的人会觉得正中下怀，因为加班既可以让自己增加经验，又是一个很好的表现机会，有利晋升，所以不论是否需要，都会自动延长加班时间，并想当然地以为配偶会以此为荣，不会为爽约一事小题大做。<br>◆以名利为中心的人，会算计～下加班费能买到什么，或者考虑一下加班对个人形象有何助益，比如赢得一个为工作而牺牲自己的美誉。<br>◆以享乐为中心的人，即使配偶并不介意，也还是会撇下工作赴约，因为实在需要犒劳自己一下。</p></blockquote><blockquote><p>以原则为中心的人会保持冷静和客观，不受情绪或其他因素的干扰，综观全局——工作需要、家庭需要、其他相关因素以及不同决定的可能后果，深思熟虑后才做出正确的选择。</p></blockquote><h3 id="通过心灵演练确定原则的例子"><a href="#通过心灵演练确定原则的例子" class="headerlink" title="通过心灵演练确定原则的例子"></a>通过心灵演练确定原则的例子</h3><blockquote><p>我曾在大学课堂上做过类似实验，我对学生说：“假设你只剩下一学期的生命了，那么该如何把握这最后的学习机会呢？请想象自己将怎样度过这个学期。”<br>突然换了一种思路后，学生们发现了很多新的价值观。<br>我要求他们以一周的时间，以这个思路来检讨自己，并每天记下心得。<br>结果，有人开始给父母写信，表达对父母的爱心和赞美；有人则与感情不和的手足或朋友重归于好，所有这一切都发人深省。<br>学生们行动的中心和主导的原则都是爱心。一旦想到自己的生命只有短暂的几个月，吵架、仇恨、羞辱和责骂就都变得微不足道了，而原则和价值观却变得无比清晰。</p></blockquote><h3 id="家庭原则、企业原则等"><a href="#家庭原则、企业原则等" class="headerlink" title="家庭原则、企业原则等"></a>家庭原则、企业原则等</h3><blockquote><p>其实，每个家庭都有共同的价值观及理念，作为生活的重心，撰写家庭使命宣言正可加以凸显这个生活重心。家庭使命宣言有如宪法，可当作衡量一切利弊得失的标准，以及重大决定的依据，并使全家人团结在共同的目标下。</p></blockquote><blockquote><p>IBM主管时时不忘向员工强调该公司的三大原则：个人尊严、卓越与服务。<br>它们代表了IBM的信仰，因此不论世事如何变化，IBM从上到下的每一个人都始终信守这三大原则，无一例外。</p></blockquote><h2 id="习惯3：要事第一"><a href="#习惯3：要事第一" class="headerlink" title="习惯3：要事第一"></a>习惯3：要事第一</h2><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><blockquote><p>◆在你目前的生活中，有哪些事情能够彻底改观你的个人生活，但是你一直没有去做？<br>◆在你目前的生活中，有哪些事情能够彻底改观你的工作局面，但是你一直没有去做？</p></blockquote><h3 id="时间管理法"><a href="#时间管理法" class="headerlink" title="时间管理法"></a>时间管理法</h3><p>第一类事务：重要紧急<br>第二类事务：重要不紧急<br>第三类事务：不重要紧急<br>第四类事务：不重要不紧急</p><blockquote><p>我多年的心得是：如何分辨轻重缓急与培养组织能力，是时间管理的精髓。</p></blockquote><blockquote><p>与以往截然不同之处在于，它根本否定“时间管理”这个名词，主张关键不在于时间管理，而在于个人管理。与其着重于时间与事务的安排，不如把重心放在维持产出与产能的平衡上。</p></blockquote><blockquote><p>高效能人士总是避免陷入第三和第四类事务，因为不论是否紧迫，这些事情都是不重要的，他们还通过花费更多时间在第二类事务来减少第一类事务的数量。<br>第二类事务包括建立人际关系、撰写使命宣言、规划长期目标、防患于未然等等。人人都知道这些事很重要，却因尚未迫在眉睫，反而避重就轻。</p></blockquote><h3 id="授权，把任务分出去"><a href="#授权，把任务分出去" class="headerlink" title="授权，把任务分出去"></a>授权，把任务分出去</h3><blockquote><p>授权是提高效能或效能的秘诀之一，可惜一般人多吝于授权，总觉得不如靠自己更省时省事。<br>其实把责任分配给其他成熟老练的员工，才有余力从事更高层次的活动。因此，授权代表成长，不但是个人，也是团体的成长。<br>已故名企业家潘尼( J.C.Penney)曾表示，他这一生中最明智的决定就是“放手”。在发现独立难撑大局之后，他毅然决然授权让别人去做，结果造就了无数商店、个人的成长与发展。</p></blockquote><blockquote><p>预期成果双方都要明确并且完全理解最终想要的结果。要以“结果”，而不是以“方法”为中心。要投入时间，有耐心，详细地描述最终的结果。具体的日程，明确截止期限。<br>事先告知对方可能出现的难题与障碍，避免无谓的摸索，但是不要告诉他们要做什么。要让他们自己为最后的结果负责，明确指导方针，然后放手让他们去做。</p></blockquote><h2 id="习惯4：双赢思维——人际领导的原则"><a href="#习惯4：双赢思维——人际领导的原则" class="headerlink" title="习惯4：双赢思维——人际领导的原则"></a>习惯4：双赢思维——人际领导的原则</h2><h3 id="要么双赢，要么不做"><a href="#要么双赢，要么不做" class="headerlink" title="要么双赢，要么不做"></a>要么双赢，要么不做</h3><blockquote><p>在相互依赖的环境里，任何非双赢的解决方案都不是最好的，因为它们终将对长远的关系产生这样那样的不利影响，你必须慎重对待这些影响的代价。如果你无法同对方达成双赢的协议，那么最好选择放弃。<br>在家里，“不能双赢就干脆放弃”这个原则也能让大家感到轻松自由。如果在看什么电影的问题上僵持不下，那么不如放弃看电影，做些别的事情，总比这个夜晚有人欢喜有人愁的要好。</p></blockquote><h3 id="富足的心态"><a href="#富足的心态" class="headerlink" title="富足的心态"></a>富足的心态</h3><blockquote><p>富足的心态( Abundance Mentality)源自厚实的个人价值观与安全感。由于相信世间有足够的资源，人人得以分享，所以不怕与人共名声、共财势，从而开启无限的可能性，充分发挥创造力，并提供宽广的选择空间。<br>公众领域的成功的意思不是压倒旁人，而是通过成功的有效交往让所有参与者获利，大家一起工作，一起探讨，一起实现单枪匹马无法完成的理想，这种成功要以知足心态为基础。</p></blockquote><p>马云创建淘宝平台，一心帮商家致富；马化腾以产品经理的心态，最重视用户体验；百度重广告竞价，便是反例。想成功，先利人，后利己。</p><h2 id="习惯5：知彼解己——移情沟通的原则"><a href="#习惯5：知彼解己——移情沟通的原则" class="headerlink" title="习惯5：知彼解己——移情沟通的原则"></a>习惯5：知彼解己——移情沟通的原则</h2><h3 id="四种自传式回应"><a href="#四种自传式回应" class="headerlink" title="四种自传式回应"></a>四种自传式回应</h3><blockquote><p>我们在听别人讲话时总是会联系我们自己的经历，因此自以为是的人往往会有四种“自传式回应”( Autobiographical Response)的倾向：<br>价值判断——对旁人的意见只有接受或不接受。<br>追根究底——依自己的价值观探查别人的隐私。<br>好为人师——以自己的经验提供忠告。<br>自以为是——根据自己的行为与动机衡量别人的行为与动机。</p></blockquote><h3 id="父子沟通障碍的例子"><a href="#父子沟通障碍的例子" class="headerlink" title="父子沟通障碍的例子"></a>父子沟通障碍的例子</h3><blockquote><p>请看以下一对父子的谈话，先从父亲的角度来看：<br>子：“上学真是无聊透了。”<br>父：“怎么回事？”←追根究底<br>子：“学的都是些不实用的东西。”<br>父：“我当年也有同样的想法，可是现在觉得那些知识还挺有用的，你就忍耐一下吧。”←好为人师子：“我已经耗了10年了，难道那些X+Y能让我学会修车吗？”<br>父：“修车？别开玩笑了。” ←价值判断子：“我不是开玩笑，我的同学乔伊辍学修车，现在月收入不少，这才有用啊。”<br>父：“现在或许如此，以后他后悔就来不及了。你不会喜欢修车的。好好念书，将来不怕找不到更好的工作。”←好为人师子：“我不知道，可是乔伊现在很成功。”<br>父：“你已尽了全力吗？这所高中是名校，应该差不到哪儿去。”←好为人师、价值判断<br>子：“可是同学们都有同感。”<br>父：“你知不知道，把你养到这么大，你妈和我牺牲了多少？已经读到高二了，不许你半途而废。”←价值判断子：“我知道你们牺牲很大，可是不值得。”<br>父：“你应该多读书，少看电视——” ←好为人师、价值判断<br>子：“爸，唉——算了，多说也没什么用。”</p></blockquote><h3 id="有效的沟通方式"><a href="#有效的沟通方式" class="headerlink" title="有效的沟通方式"></a>有效的沟通方式</h3><blockquote><p>这个例子充分显示有效的沟通多么不易，了解他人又是多么重要。正确的沟通方式也就是移情聆听，至少包括四个阶段。<br>第一阶段是复述语句，这至少能使人专心聆听。<br>子：“上学真是无聊透了！”<br>父：“你已受不了了，觉得上学太无聊。”<br>第二阶段加入解释，纯用自己的词句表达，但仍用左脑的逻辑思考去理解。<br>父：“你不想上学了。<br>第三阶段渗入个人的感觉，右脑发挥作用。此时听者所注意的已不止于言语，也开始体会对方的心情。<br>父：“你觉得很有挫折感。”<br>第四阶段是既加以解释，又带有感情，左右脑并用。<br>父：“你对上学有很深的挫折感。”<br>运用第四阶段的方式沟通，不仅能了解对方，更能帮助对方认清自己，勇于表白。</p></blockquote><p>沟通时，多说”你“，少说”我“！</p><h3 id="父子成功沟通的例子"><a href="#父子成功沟通的例子" class="headerlink" title="父子成功沟通的例子"></a>父子成功沟通的例子</h3><blockquote><p>子：“上学真是无聊透了！”←我想引起注意，与人谈谈心事。<br>父：“你对上学有很深的挫折感。”←对，这正是我的感觉。<br>子：“没错，学校的东西根本不实用。”<br>父：“你觉得读书对你没什么用。”←想想看，我是那么说的吗？<br>子：“对，学校的不一定对我有用。你看乔伊，他现在修车技术一流，这才实用。”<br>父：“你觉得他的选择正确。”←嗯…，子：“嗯，从某个角度看确实如此。现在他收入不错，可是几年后，或许会后悔。<br>父：“你认为将来他会觉得当年做错了决定。”<br>子：“一定会的，现在的社会里，教育程度不高会吃亏的。”<br>父：“教育很重要。”<br>子：“对，如果高中都没毕业，一定找不到工作，也上不了大学。有件事——我真的很担心，你不会告诉妈吧？”<br>父：“你不想让你妈知道？”<br>子：“不是啦！跟她说也无妨，反正她迟早会知道的。今天学校举行阅读能力测验，结果我只有小学程度，可是我已经高二了！”<br>儿子终于吐露真言，原来他担心阅读程度不如人。此时才是父亲发挥影响力，提供意见的时刻。不过在开导过程中，依然要注意孩子言谈间所传达的信息。若是合理的反应不妨顺其自然，但情绪性反应出现时，必须仔细聆听。<br>父：“我有个构想，也许你可以上补习班加强阅读能力。”<br>子：“我已经打听过了，可是每星期要耗掉好几个晚上！”<br>父亲意识到这是情绪性反应，又恢复移情聆听。<br>子：“补习的代价太高了。”<br>子：“而且我答应同学，晚上另有节目。”<br>父：“你不想食言。”<br>子：“不过补习如果真的有效，我可以想办法跟同学改时间。<br>父：“你其实很想多下点功夫，又担心补习没用。<br>子：“你觉得会有效吗？”<br>孩子又恢复了理性，父亲则再次扮演导师的角色。</p></blockquote><h3 id="品德第一，感情第二，理性第三"><a href="#品德第一，感情第二，理性第三" class="headerlink" title="品德第一，感情第二，理性第三"></a>品德第一，感情第二，理性第三</h3><blockquote><p>古希腊人有一种很经典的哲学观点，即品德第一，感情第二，理性第三。我认为这三个词集中体现了让他人理解自己以及有效表达自己的精髓。<br>品德指的是你个人的可信度，是人们对你的诚信和能力的认可，是人们对你的信任，是你的情感账户。感情指的是你的移情能力，是感性的，说明你能通过交流迅速理解他人的情感。理性是你的逻辑能力，即合理表达自己的能力。<br>请注意这个顺序：品德、感情、理性。首先是你本身的品德，然后是你同他人的关系，最后是你表达自己的能力，这是另外一种重要的模式转换。多数人习惯直接用左脑逻辑表达自己，意图说服别人，却从来没把品德第一，感情第二放在心上。</p></blockquote><h2 id="习惯6：综合统效"><a href="#习惯6：综合统效" class="headerlink" title="习惯6：综合统效"></a>习惯6：综合统效</h2><h3 id="取长补短"><a href="#取长补短" class="headerlink" title="取长补短"></a>取长补短</h3><blockquote><p>假如两人意见相同，其中一人必属多余。与所见略同的人沟通，毫无益处，要有分歧才有收获。</p></blockquote><blockquote><p>流传于远东地区的一句哲言：“我们不应单纯地模仿大师的言行，而应该追求大师所追求的。”同样，我们不应该单纯地模仿，而应该创造。</p></blockquote><blockquote><p>统合综效的精髓就是判断和尊重差异，取长补短。男女和夫妻间的生理差异显而易见，那么社会、智力和情感方面的差异呢？不是也可以创造出新的生活形态和环境吗？</p></blockquote><h3 id="尊重差异"><a href="#尊重差异" class="headerlink" title="尊重差异"></a>尊重差异</h3><blockquote><p>与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。</p></blockquote><blockquote><p>自以为是的人总以为自己最客观，别人都有所偏颇，其实这才是画地为牢。反之，虚怀若谷的人承认自己有不足之处，而乐于在与人交往之中汲取丰富的知识见解，重视不同的意见，因而增广见闻。此所谓“三人行，必有我师焉”。</p></blockquote><p>综艺节目《奇葩说》的核心价值观。</p><h2 id="习惯7：不断更新"><a href="#习惯7：不断更新" class="headerlink" title="习惯7：不断更新"></a>习惯7：不断更新</h2><h3 id="投资自己"><a href="#投资自己" class="headerlink" title="投资自己"></a>投资自己</h3><blockquote><p>人生最值得的投资就是锻炼自己，因为生活与服务人群都得靠自已，这是最珍贵的工具。<br>工作本身并不能带来经济上的安全感，具备良好的思考、学习、创造与适应能力，才能利于不败之地。拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠。<br>微不足道的小事也会引发惊人的结果，每念及此，我就认为世上无小事。</p></blockquote><h3 id="兼顾四个方面"><a href="#兼顾四个方面" class="headerlink" title="兼顾四个方面"></a>兼顾四个方面</h3><blockquote><p>它从四个层面更新你的天性，那就是：身体、精神、智力、社会／情感。</p></blockquote><p>身体：锻炼身体；<br>精神：调节心态，处变不惊；<br>智力：读书，学习；<br>社会／情感：管理人际关系。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>典型的西式成功学，分门别类，刨根问底，创造出了一套知识体系。<br>跟西药一样，成分复杂，见效直接。</p><p>这些道理，国学中自然都有包含。只是我们的传统是点到为止，多靠体悟。<br>跟中药一样，材料简单，重在熬制。</p><p>以后愿多从厚重的国学经典中寻求修身处世之道。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高效能 七个习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Gulp自动构建环境</title>
      <link href="2018-Web/gulp-4-14.html"/>
      <url>2018-Web/gulp-4-14.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>perl设计者在著作programming perl中提到:</p><p>优秀的程序员具有三大美德: 懒惰 急躁 和傲慢 ( laziness,Impatience.and Hubris)。</p><p>恩，第一就是懒，我十分认同。重复性工作全都应该交由机器去做。</p><p>于是在前端项目中，Gulp这种自动构建工具就应运而生了。</p><p>gulp通过定义任务，能完成前端项目的自动预处理、生成、部署等，甚至连刷新浏览器都省了，做到了“所见即所得”。</p><p>于是程序员能专注于coding，保存代码即可见到结果。</p><p>真是懒到极致了。</p><p>下面总结下Gulp项目的搭建流程。</p><h2 id="什么是Gulp"><a href="#什么是Gulp" class="headerlink" title="什么是Gulp"></a>什么是Gulp</h2><blockquote><p>Gulp是一个自动化工具，前端开发者可以使用它来处理常见任务：</p><ul><li>搭建web服务器</li><li>文件保存时自动重载浏览器</li><li>使用预处理器如Sass、LESS</li><li>优化资源，比如压缩CSS、JavaScript、压缩图片<br>当然Gulp能做的远不止这些。如果你够疯狂，你甚至可以使用它搭建一个静态页面生成器。Gulp真的足够强大，但你必须学会驾驭它。</li></ul></blockquote><a id="more"></a><h2 id="安装gulp模块"><a href="#安装gulp模块" class="headerlink" title="安装gulp模块"></a>安装gulp模块</h2><p>使用npm安装gulp，以便以后能在终端使用gulp命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cnpm install gulp -g</span><br></pre></td></tr></table></figure></p><p>tip：安装淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm，提高模块下载速度：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h2 id="创建gulp项目"><a href="#创建gulp项目" class="headerlink" title="创建gulp项目"></a>创建gulp项目</h2><h3 id="创建package-json文件："><a href="#创建package-json文件：" class="headerlink" title="创建package.json文件："></a>创建package.json文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>在 package.json 文件中指定项目依赖的包，以后可使用 npm install 命令一次性下载这些依赖包。<br>关于package.json详见：<a href="https://blog.csdn.net/u011240877/article/details/76582670" target="_blank" rel="noopener">https://blog.csdn.net/u011240877/article/details/76582670</a></p><h3 id="局部安装Gulp模块："><a href="#局部安装Gulp模块：" class="headerlink" title="局部安装Gulp模块："></a>局部安装Gulp模块：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>dependencies就是你程序运行需要的模块，没有这个模块你程序就会报错。<br>devDependencies是开发的时候需要的模块。<br>举个例子，你用angularjs框架开发一个程序，开发阶段需要用到gulp来构建你的开发和本地运行环境。所以angularjs一定要放到dependencies里，因为以后程序到生产环境也要用。gulp则是你用来压缩代码，打包等需要的工具，程序实际运行的时候并不需要，所以放到dev里就ok了。</p><h3 id="创建gulpfile-js"><a href="#创建gulpfile-js" class="headerlink" title="创建gulpfile.js"></a>创建gulpfile.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;); //使用本地gulp模块</span><br><span class="line"></span><br><span class="line">//任务模块</span><br><span class="line">gulp.task(&apos;hi&apos;, function() &#123;</span><br><span class="line">    console.log(&apos;hello&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>命令行执行：<code>$ gulp hello</code>，能看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[20:24:28] Starting &apos;hi&apos;...</span><br><span class="line">hello</span><br><span class="line">[20:24:28] Finished &apos;hi&apos; after 178 μ</span><br></pre></td></tr></table></figure></p><h3 id="写gulp任务"><a href="#写gulp任务" class="headerlink" title="写gulp任务"></a>写gulp任务</h3><p>一般任务长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;task-name&apos;, function () &#123;</span><br><span class="line">  return gulp.src(&apos;source-files&apos;) // Get source files with gulp.src</span><br><span class="line">    .pipe(aGulpPlugin()) // Sends it through a gulp plugin</span><br><span class="line">    .pipe(gulp.dest(&apos;destination&apos;)) // Outputs the file in the destination folder</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>src输入源文件，pipe到插件处理后，输出到dest。</p><p>自动处理jade的任务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var jade = require(&apos;gulp-jade&apos;);</span><br><span class="line"> </span><br><span class="line">gulp.task(&apos;templates&apos;, function() &#123;</span><br><span class="line"> </span><br><span class="line">  gulp.src(&apos;/src/*.jade&apos;)</span><br><span class="line">    .pipe(jade(&#123;</span><br><span class="line">      pretty: true</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;dist/&apos;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>pretty:true</code> 意思是对输出的html排版。不做设置的话，默认压缩html。</p><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>监视文件变动代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(&apos;files-to-watch&apos;, [&apos;tasks&apos;, &apos;to&apos;, &apos;run&apos;]);</span><br></pre></td></tr></table></figure></p><p>或者使用通配符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// **/*表示任意文件夹下的任意文件</span><br><span class="line">gulp.watch(&apos;app/scss/**/*.scss&apos;, [&apos;sass&apos;]);</span><br></pre></td></tr></table></figure></p><p>或者使用任务同时监听多组文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;watch&apos;, function()&#123;</span><br><span class="line">  gulp.watch(&apos;app/scss/**/*.scss&apos;, [&apos;sass&apos;]);</span><br><span class="line">  // Other watchers</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用livereload插件自动刷新浏览器"><a href="#使用livereload插件自动刷新浏览器" class="headerlink" title="使用livereload插件自动刷新浏览器"></a>使用livereload插件自动刷新浏览器</h3><p>以监视html文件为例，一旦有变动，自动生成并刷新浏览器。</p><h4 id="本地安装gulp-livereload"><a href="#本地安装gulp-livereload" class="headerlink" title="本地安装gulp-livereload"></a>本地安装gulp-livereload</h4><p><code>cnpm install gulp-livereload --save-dev</code></p><h4 id="添加gulp任务"><a href="#添加gulp任务" class="headerlink" title="添加gulp任务"></a>添加gulp任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;),</span><br><span class="line">    livereload = require(&apos;gulp-livereload&apos;);</span><br><span class="line"> </span><br><span class="line">gulp.task(&apos;watch&apos;, function() &#123;</span><br><span class="line">    livereload.listen();</span><br><span class="line"></span><br><span class="line">    //监视src文件夹下所有文件</span><br><span class="line">    gulp.watch(&apos;src/*.*&apos;, function(event) &#123;  </span><br><span class="line">        livereload.changed(event.path);  </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="安装浏览器插件"><a href="#安装浏览器插件" class="headerlink" title="安装浏览器插件"></a>安装浏览器插件</h4><p>安装chrome的livereload插件，可下载crx文件直接拖入浏览器安装。</p><h4 id="以服务器方式打开页面"><a href="#以服务器方式打开页面" class="headerlink" title="以服务器方式打开页面"></a>以服务器方式打开页面</h4><p>加载本地html文件无法触发livereload，必须以服务器方式加载。</p><p>这里使用node的超轻量级web服务器http-server。</p><p>安装http-server：<code>cnpm install http-server -g</code></p><p>在html所在文件夹执行：<code>$ http-server</code>。</p><p>此时便能在<a href="http://localhost:8080/访问到页面。" target="_blank" rel="noopener">http://localhost:8080/访问到页面。</a></p><h4 id="运行livereload"><a href="#运行livereload" class="headerlink" title="运行livereload"></a>运行livereload</h4><p>1、执行gulp任务：<code>$ gulp watch</code></p><p>2、点击Chrome地址栏右边livereload按钮变成实心圈，即为启用。</p><p>此时修改文件，浏览器即可自动刷新。</p><h3 id="gulp-jade-livereload完整例子"><a href="#gulp-jade-livereload完整例子" class="headerlink" title="gulp + jade + livereload完整例子"></a>gulp + jade + livereload完整例子</h3><p>gulpfile.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;),</span><br><span class="line">  livereload = require(&apos;gulp-livereload&apos;),</span><br><span class="line">  jade = require(&apos;gulp-jade&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;watch&apos;, function() &#123;</span><br><span class="line">  livereload.listen();</span><br><span class="line">  gulp.watch(&apos;src/*.*&apos;, function(event) &#123;  </span><br><span class="line">    livereload.changed(event.path);  </span><br><span class="line">  &#125;);  </span><br><span class="line"></span><br><span class="line">  //监视jade文件修改，执行jade任务</span><br><span class="line">  gulp.watch(&apos;src/*.jade&apos;, [&apos;jade&apos;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;jade&apos;, function() &#123;</span><br><span class="line">  gulp.src(&apos;src/*.jade&apos;)</span><br><span class="line">  .pipe(jade(</span><br><span class="line">    &#123;pretty: true&#125;</span><br><span class="line">    ))</span><br><span class="line">  .pipe(gulp.dest(&apos;dist/&apos;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;watch&apos;]);</span><br></pre></td></tr></table></figure></p><p>输入不带参数的命令：<code>$ gulp</code>，自动执行default任务。</p><p>实现自动处理jade，并自动刷新浏览器。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/Tom-yi/p/8036730.html" target="_blank" rel="noopener">https://www.cnblogs.com/Tom-yi/p/8036730.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客</title>
      <link href="2018-Hexo/hexo-4-14.html"/>
      <url>2018-Hexo/hexo-4-14.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在简书写过学习笔记。但技术博客嘛，还是自己搭一个比较有逼格。</p><p>博客是一些静态网页，所以GitHub提供免费的git pages就能胜任。</p><p>但从头搭建一个功能丰富的博客很是麻烦。比如实现常用侧边栏的分类、标签功能等就够喝一壶了。</p><p>于是需要自动构建博客框架的工具，就能从配置、生成等杂活中解放出来，把重点放在写上。</p><p>常见的工具有hexo、jekyll等。本文使用hexo+next主题。</p><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>安装Hexo：<code>$ npm install -g hexo-cli</code></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>在_config.yml中配置网站。本文将主题配置为Next（需要下载）。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><h4 id="新建文章："><a href="#新建文章：" class="headerlink" title="新建文章："></a>新建文章：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;  //layout默认为 post</span><br></pre></td></tr></table></figure><h4 id="新建草稿："><a href="#新建草稿：" class="headerlink" title="新建草稿："></a>新建草稿：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;  //创建草稿</span><br><span class="line">$ hexo publish [layout] &lt;title&gt; //发布草稿</span><br></pre></td></tr></table></figure><h4 id="设置分类和标签："><a href="#设置分类和标签：" class="headerlink" title="设置分类和标签："></a>设置分类和标签：</h4><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。<br>分类和标签可以在 Front-matter 中设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure></p><h4 id="设置文章摘要“查看更多”（Next主题适用）："><a href="#设置文章摘要“查看更多”（Next主题适用）：" class="headerlink" title="设置文章摘要“查看更多”（Next主题适用）："></a>设置文章摘要“查看更多”（Next主题适用）：</h4><p>在文中使用&lt;– more –&gt;分隔，或者在front-matter中配置description。</p><h4 id="生成、发布："><a href="#生成、发布：" class="headerlink" title="生成、发布："></a>生成、发布：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo g // 生成网页</span><br><span class="line">hexo d // 部署网站，在_config.yml中配置过后可以自动部署到git上</span><br><span class="line"></span><br><span class="line">// 上面两个命令可以简写为:</span><br><span class="line">$ hexo g -d</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><h4 id="本地测试："><a href="#本地测试：" class="headerlink" title="本地测试："></a>本地测试：</h4><p>可本地启动服务器，测试网站：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>启动服务器后，会监视文件变动并自动更新，刷新浏览器即可看到变化。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a><br>hexo常用命令笔记：<a href="https://blog.csdn.net/qq_26975307/article/details/62447489" target="_blank" rel="noopener">https://blog.csdn.net/qq_26975307/article/details/62447489</a><br>next官方文档：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
            <tag> gitpage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好哇，博客</title>
      <link href="2018-Notes/first.html"/>
      <url>2018-Notes/first.html</url>
      
        <content type="html"><![CDATA[<h2 id="Jinsane的个人主页"><a href="#Jinsane的个人主页" class="headerlink" title="Jinsane的个人主页"></a>Jinsane的个人主页</h2><p>终于差不多啦!用Hexo自动生成的网页，next主题。</p><p>在这里写学习笔记。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java投票网站初版</title>
      <link href="2018-Web/java-web-3-18.html"/>
      <url>2018-Web/java-web-3-18.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>搭好<a href="https://www.jianshu.com/p/c68fd9fe4ead" target="_blank" rel="noopener">Spring+SpringMVC+Hibernate实现投票/调查问卷网站</a>的架子后，本想去尝试下其它东西，好在家腾君表示要把它完善下，能真正投入使用。<br>这才发现，还有太多东西要做，还有太多坑没踩。年后至今，三周过去了，终于合作完成了能凑合用的版本。家腾君表示：“吹了一年的牛B，终于能交差了。”</p></blockquote><p>完善后的投票网站，目前效果如下：</p><h3 id="1-前端（用户界面）"><a href="#1-前端（用户界面）" class="headerlink" title="1. 前端（用户界面）"></a>1. 前端（用户界面）</h3><p>1.1 打开首页，点击进入投票页面。加了些jQuery美化插件：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWVkN2QzM2FlODc1YjRjZGQuZ2lm" alt="ios视觉差效果（飞机在飞有木有）"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTI3MjkwOWQwYmU3YjdhNTguZ2lm" alt="粒子效果"></p><p>1.2 侧边导航：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWJlOWQwNWZlYzM2MDBmMGQuZ2lm" alt="导航栏"></p><p>1.3 辅助填表，一键全优：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWJhMzVlMzZmM2U1YjllNDMuZ2lm" alt="一键全优"></p><p>1.4 表单验证。用户点击提交按钮后，检查答题情况，提示用户：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWRhODJmYzA5ZmI5ZTZiMzMucG5n?x-oss-process=image/format,png" alt="提示未完成题目"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWE1YTEzMTJiNTQyNGEyNjQucG5n?x-oss-process=image/format,png" alt="提示用户投票是否有效"></p><p>1.5 防止重复投票（可由后台管理员开放）。完成一次投票后：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTUzZDQ5ZTNiOTUyYzQ5YWYucG5n?x-oss-process=image/format,png" alt="投票成功"><br>再次投票会提示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTQ5NmM4NjMyZDM2ODBhZjIucG5n?x-oss-process=image/format,png" alt="投票失败"></p><h3 id="2-后端（管理员界面）"><a href="#2-后端（管理员界面）" class="headerlink" title="2. 后端（管理员界面）"></a>2. 后端（管理员界面）</h3><p>2.1 输入密码，登录后台：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWE5M2M3MzY0NjQyZmJkNjIucG5n?x-oss-process=image/format,png" alt="登录界面"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWI1NzVkYTM4MGMwY2E0YTIucG5n?x-oss-process=image/format,png" alt="管理员界面"></p><p>2.2 功能区如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTFmYmU0ZTEyNDZjNTUwNDkucG5n?x-oss-process=image/format,png" alt="功能区"></p><ul><li>每2s实时更新投票情况。</li><li>“开放投票”按钮会刷新本轮投票情况，去除“无法重复投票”状态；</li><li>“无限投票”开关打开时，永不限制重复投票；</li><li>“下载文件”按钮会将结果导出为word文档，压缩为zip文件，提供下载；</li><li>“过滤废票”开关打开后，会按规则去除无效票，改变统计结果。</li></ul><p>2.3 点击人名，查看结果。如果打开“过滤废票”开关，会显示去除废票后的结果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWI1ZGFlY2M5MjAyZGMwMDMucG5n?x-oss-process=image/format,png" alt="查看详细结果"></p><p>2.4 下载结果。如果打开“过滤废票”开关，会得到去除废票后的结果：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LWZmYTFmOTg5YzViYzBlYmYucG5n?x-oss-process=image/format,png" alt="下载得到“测评结果.zip”文件"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTVjYzQ3ZjNiMjMxNzljOTkucG5n?x-oss-process=image/format,png" alt="解压得到按部门分类目录结构"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82MjQwNjY0LTAxYTljMzg4NDY4ZDM5Y2IucG5n?x-oss-process=image/format,png" alt="得到自动生成的word文件xxx.doc"></p><p>以上。</p><p>几乎全是“面向搜索引擎”的编程。后面会继续完善，慢慢总结所用知识。<br>项目源码：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fzhang35%2FQuizWeb.git" target="_blank" rel="noopener">https://github.com/zhang35/QuizWeb.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring+SpringMVC+Hibernate实现投票/调查问卷网站</title>
      <link href="2018-Web/java-web-2-11.html"/>
      <url>2018-Web/java-web-2-11.html</url>
      
        <content type="html"><![CDATA[<p>使用SSH架构（Spring+SpringMVC+Hibernate）实现了简单的调查问卷网站。最终效果如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyNDA2NjQtMjQ2OTViZDhlZDFkMGZmMy5wbmc?x-oss-process=image/format,png" alt="投票页面"><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyNDA2NjQtZDA2ZjIyMjEzNTAwOGEwZS5wbmc?x-oss-process=image/format,png" alt="查看结果页面"></p><p>下面整理实现流程。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="1-SSH架构"><a href="#1-SSH架构" class="headerlink" title="1.SSH架构"></a>1.SSH架构</h4><p>SSH是<a href="https://baike.baidu.com/item/MVC" target="_blank" rel="noopener">MVC</a>架构的一种实现。</p><p>Spring、SpringMVC、Hibernate各自用处分别是：</p><ul><li>Hibernate方便了对数据库的操作。一个对象映射一个表，省去了写SQL语句的繁琐，完成<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96" target="_blank" rel="noopener">数据持久化</a>的任务。</li><li>Spring方便了对象的创建和相互关联。比如网站启动时想要初始化的一些对象，可交给Spring管理。</li><li>SpringMVC实现了MVC架构，使得结构清晰、分工明确。</li></ul><p>（Spring和SpringMVC区别：Spring是IOC和AOP的容器框架，参考：<a href="http://blog.csdn.net/eson_15/article/details/51090040" target="_blank" rel="noopener">谈谈Spring中的IOC和AOP概念</a>）；SpringMVC是基于Spring实现的MVC Web框架）。</p><h4 id="2-Maven"><a href="#2-Maven" class="headerlink" title="2.Maven"></a>2.Maven</h4><p>Maven是一个项目管理工具，有一套标准的工程结构。其核心配置文件是pom.xml，描述了项目信息，依赖关系等。</p><p>由于Java项目中需要引入各种jar包，还存在版本差异，把这些依赖关系在pom.xml里面描述，maven就会自动从本地或远程仓库寻找依赖，不用再去一个个下载、拷贝jar包了。</p><p>例如，想引入springmvc框架，就在pom.xml中加入如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure></p><h4 id="3-代码结构"><a href="#3-代码结构" class="headerlink" title="3.代码结构"></a>3.代码结构</h4><p>Java源码包含Model、DAO、Service、Controller四个包，其中：</p><ul><li>Model：存放数据模型</li><li>DAO：实现直接操作Model的接口及方法，比如实现getPerson()</li><li>Service：使用DAO提供的接口，实现项目需要用到的功能，比如实现getAllPersons()</li><li>Controller：使用Service提供的功能，实现数据分发及页面展示。</li></ul><p>工程结构如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyNDA2NjQtMmJkNGEzNTExMmM2N2RiNC5wbmc?x-oss-process=image/format,png" alt="工程结构"><br>项目源码：<a href="https://github.com/zhang35/QuizWeb.git" target="_blank" rel="noopener">https://github.com/zhang35/QuizWeb.git</a></p><hr><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>集成开发环境（IDE）：IntelliJ IDEA 2017.3.2<br>本地服务器：Tomcat 9.0.2<br>数据库： MySQL 5.7<br>项目管理：Maven<br>操作系统：MacOS</p><hr><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ul><li><p>如何使用IDEA创建web工程，参考：<br><a href="http://www.cnblogs.com/carsonzhu/p/5468223.html" target="_blank" rel="noopener">使用IntelliJ IDEA开发java web</a></p></li><li><p>如何使用IDEA配置maven仓库，加快加载依赖包的速度，参考：<br><a href="http://www.cnblogs.com/sword-successful/p/6408281.html" target="_blank" rel="noopener">IDEA配置maven(配置阿里云中央仓库)</a></p></li></ul><h3 id="2-搭建SSH项目"><a href="#2-搭建SSH项目" class="headerlink" title="2. 搭建SSH项目"></a>2. 搭建SSH项目</h3><ul><li>如何在IntelliJ与Maven的环境下搭建Spring+SpringMVC+Hibernate项目，参考：<br><a href="http://blog.csdn.net/haluoluo211/article/details/52225074" target="_blank" rel="noopener">Spring-SpringMVC-Hibernate在IntelliJ与Maven的环境下搭建</a></li></ul><h3 id="3-实现投票功能"><a href="#3-实现投票功能" class="headerlink" title="3. 实现投票功能"></a>3. 实现投票功能</h3><p>从操作流程出发，实现思路是：</p><h4 id="3-1-输入网址进入投票界面。（SpringMVC控制网址-gt-页面的映射）"><a href="#3-1-输入网址进入投票界面。（SpringMVC控制网址-gt-页面的映射）" class="headerlink" title="3.1 输入网址进入投票界面。（SpringMVC控制网址-&gt;页面的映射）"></a>3.1 输入网址进入投票界面。（SpringMVC控制网址-&gt;页面的映射）</h4><p>3.1.1 在web.xml中配置SpringMVC使之生效，web.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">     &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">     &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line">     &lt;servlet-name&gt;spring-dispatcher&lt;/servlet-name&gt;</span><br><span class="line">     &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>3.1.2 在SpringMVC的配置文件servletname-servlet.xml中配置地址过滤规则，spring-dispatcher-servlet.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;web.quiz.controller&quot; /&gt;&lt;!-- 要扫描的包--&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 解析网址，加前缀后缀，比如输入index时定位到/WEB-INF/jsp/index.jsp--&gt;</span><br><span class="line">&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 不拦截静态资源，保证对js、css、jpg等的正常访问 --&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler /&gt;</span><br></pre></td></tr></table></figure></p><p>3.1.3 最后，在Controller中控制页面分发，QuizController.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;vote&quot;, method = RequestMethod.GET)</span><br><span class="line">public String index() &#123;</span><br><span class="line">    return &quot;vote&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>####3.2 获取问卷内容。（Hibernate+Spring从数据库中读取问卷信息，发送到前端页面）<br>3.2.1 首先使用Hibernate关联对象与数据库。Hibernate有配置xml和注解两种实现方式，本文使用注解。Person.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//@javax.persistence.Entity注解一个实体Bean。数据表中的行对应实例，列对应实例的属性</span><br><span class="line">    @Entity</span><br><span class="line">    public class Person &#123;</span><br><span class="line">    @Id   //必须使用 @javax.persistence.Id 注解一个主键；</span><br><span class="line">    private String id;             //编号</span><br><span class="line">    private String name;            //姓名</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.2.2 然后实现相应的DAO接口。PersonDAO.java、PersonDAOImpl.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  public interface PersonDAO &#123;</span><br><span class="line">      public List&lt;Person&gt; getAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Repository //@Repository用于标注数据访问组件，即DAO组件；</span><br><span class="line">  public class PersonDAOImpl implements PersonDAO&#123;</span><br><span class="line">  @Autowired //@Autowired可以对成员变量、方法和构造函数进行标注，来完成自动装配。默认按照类型进行装配。</span><br><span class="line">  private SessionFactory sessionFactory;</span><br><span class="line">    public List&lt;Person&gt; getAll() &#123;</span><br><span class="line">        Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Person.class);</span><br><span class="line">        return criteria.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2.3 PersonDAOImpl中要用的sessionFactory怎么来？什么是SessionFactory：</p><blockquote><p>SessionFactory接口负责初始化Hibernate。SessionFactory并不是轻量级的，因为一般情况下，一个项目通常只需要一个SessionFactory就够。</p></blockquote><p>所以把SessionFactory放在Web初始化时候生成，使用Spring实现其自动装配。</p><p>首先在web.xml中配置Spring：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Spring--&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:/META-INF/applicationContext.xml,</span><br><span class="line">        classpath:/META-INF/spring-jdbc.xml</span><br><span class="line">    &lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></p><p>然后在Spring配置文件中配置Hibernate，spring-jdbc.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--自定义的hibernate.properties文件,下面$&#123;XXX&#125;的内容来源--&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:/META-INF/properties/hibernate.properties&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用C3P0数据源，MySQL数据库 --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span><br><span class="line">      destroy-method=&quot;close&quot;&gt;</span><br><span class="line">       &lt;!-- MySQL5 --&gt;</span><br><span class="line">       &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;driverClassName&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;user&quot; value=&quot;$&#123;username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean</span><br><span class="line">&lt;!-- session工厂 --&gt;</span><br><span class="line">&lt;bean id=&quot;sessionFactory&quot;</span><br><span class="line">      class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">       &lt;property name=&quot;packagesToScan&quot; value=&quot;web.quiz.model&quot; /&gt;</span><br><span class="line">       &lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class="line">              &lt;props&gt;</span><br><span class="line">                     &lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;$&#123;hibernate.hbm2ddl.auto&#125;&lt;/prop&gt;</span><br><span class="line">                     &lt;prop key=&quot;hibernate.dialect&quot;&gt;$&#123;hibernate.dialect&#125;&lt;/prop&gt;</span><br><span class="line">                     &lt;prop key=&quot;hibernate.show_sql&quot;&gt;$&#123;hibernate.show_sql&#125;&lt;/prop&gt;</span><br><span class="line">                     &lt;prop key=&quot;hibernate.format_sql&quot;&gt;$&#123;hibernate.format_sql&#125;&lt;/prop&gt;</span><br><span class="line">              &lt;/props&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;!--hibernate的事务管理器--&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">      class=&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>在Spring的默认配置文件applicationContext.xml中配置扫描的包。这些包中有Spring注解为@Component的类，在使用注解配置的情况下，系统启动时会被自动扫描，并添加到bean工厂中去（省去了配置文件中写bean定义了）。applicationContext.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   &lt;context:component-scan base-package=&quot;web.quiz.service&quot;/&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;web.quiz.DAO&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>至此，PersonDAOImpl中有了可用的sessionFactory，它的功能也能尽数实现了，如3.2.2中所示。</p><p>3.2.4 此时有了PersonDAO的实现，进一步封装成可直接用的服务。DBService.java 、DBServiceImpl.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface DBService&#123;</span><br><span class="line">    public List&lt;Person&gt; loadPersons();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Service  //@Service用于标注业务层组件</span><br><span class="line">@Transactional //@Transactional 可以作用于接口、接口方法、类以及类方法上。赋予其事务属性</span><br><span class="line">public class DBServiceImpl implements DBService&#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private PersonDAO personDAO;</span><br><span class="line">    public List&lt;Person&gt; loadPersons()&#123;</span><br><span class="line">        return personDAO.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，读写数据的功能有了。可以在Controller中调用服务读数据，QuizController.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class QuizController &#123;</span><br><span class="line">    @Resource  //与@Autowired等效，是JDK支持的注解，默认按照名称进行装配</span><br><span class="line">    private DBService dbService;</span><br><span class="line">    @PostConstruct  //使用@PostConstruct注释初始化方法。在Controller中，用@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器调用一次。</span><br><span class="line">    private void initQuiz()&#123;</span><br><span class="line">        this.persons = dbService.loadPersons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.2.5 把读取的内容发给前端JSP页面。本文使用了两种方法，一是传json回去，二是直接传对象回去。</p><p><strong>方法一</strong>：传json到前端，用拼接字符串的方式生成页面。这种方法很笨，当时知识面太窄。不过用json传数据在做数据可视化时比较方便，所以也保留了这些代码。QuizController.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/loadPaper&quot;, method = RequestMethod.GET)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public byte[] loadPaper() throws IOException &#123;</span><br><span class="line">       ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">       String jsonString = objectMapper.writeValueAsString(this.quiz);</span><br><span class="line">       byte[] b = jsonString.getBytes(&quot;UTF-8&quot;);        //解决传到前端后中文乱码问题</span><br><span class="line">       return b;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>在前端用js解析json，生成页面。问卷页面vote.jsp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function loadPage()&#123;</span><br><span class="line">            $.getJSON(&quot;loadPaper&quot;,function(data)&#123;  //获取问卷数据quiz,放入data中</span><br><span class="line">                var names = data.names;</span><br><span class="line">                 for (var i=0; i&lt; names.length; i++)&#123;</span><br><span class="line">                      var testDiv = &apos;&lt;div class=&quot;test&quot;&gt;&apos; + &apos;&lt;p class=&quot;name&quot;&gt;&apos; + (i+1) + &quot;.&amp;nbsp&quot; + names[i] + &apos;：&lt;/p&gt;&apos;;</span><br><span class="line">                      ...</span><br><span class="line">                      $(&quot;form&quot;).append(testDiv);</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure></p><p><strong>方法二</strong>：借助ModelAndView对象，直接传对象到前端。配合JSP的特点，比较优雅高效。QuizController.java中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在方法的参数列表中添加形参 ModelMap map, spring 会自动创建ModelMap对象。</span><br><span class="line">//然后调用map的put(key,value)或者addAttribute(key,value)将数据放入map中，spring会自动将数据存入request。</span><br><span class="line">public ModelAndView check(HttpServletRequest request, HttpServletResponse response, ModelMap model)&#123;</span><br><span class="line">  model.addAttribute(&quot;persons&quot;, persons);  //添加名为persons的对象</span><br><span class="line">            return new ModelAndView(&quot;result&quot;);   //返回页面result.jsp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在前端使用JSTL &lt;c:forEach&gt;和EL表达式循环生成表格。显示成绩页面result.jsp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      &lt;c:forEach items=&quot;$&#123;persons&#125;&quot; var=&quot;person&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;person.id&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;$&#123;person.id&#125;/detail&quot;&gt;$&#123;person.name&#125;&lt;/a&gt;&lt;/td&gt; &lt;!--REST风格--&gt;</span><br><span class="line">&lt;td&gt;$&#123;person.department&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></p><p>（注意：使用EL表达式时，需加入&lt;%@page isELIgnored=”false” %&gt;）</p><p>这里把每个人名作为一个超链接，点进去显示其测评结果。${person.id}/detail会变成如1/detail这样的地址。该地址在QuizController.java中这么解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/&#123;id&#125;/detail&quot;, method = RequestMethod.GET)</span><br><span class="line">    public ModelAndView detail(HttpServletRequest request, ModelMap model, @PathVariable String id) &#123;</span><br><span class="line">        Result result = dbService.getResultByID(id);</span><br><span class="line">        String name = result.getName();</span><br><span class="line">        model.addAttribute(&quot;name&quot;, name);</span><br><span class="line">        return new ModelAndView(&quot;detail&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>3.2.6 扩展知识<br>上述传参方式叫REST( Representational State Transfer)风格。<br>关于SpringMVC应用REST风格，参考：<a href="https://www.baidu.com/link?url=d-Rg_gxkKlAH95hnCYk2_m7EqFvgBpt9a3ZiWCFLgiN0fTCCqs4KH0dAW0MI8b0_MdvigqzLJSI0ysAufrE0uK&amp;wd=&amp;eqid=b83da03c00046a25000000025a67d318" target="_blank" rel="noopener">Spring MVC 实现增删改查 - CSDN博客</a><br>关于其它URL传参方式，参考： <a href="http://www.cnblogs.com/wangchuanfu/p/5913310.html" target="_blank" rel="noopener">SpringMVC之@RequestParam @PathVariable对比</a><br>关于SpringMVC中各种常用传值方法，参考：<a href="http://blog.csdn.net/sunshine__me/article/details/49494545" target="_blank" rel="noopener">springMVC 将controller中数据传递到jsp页面</a></p><h4 id="3-3-填写问卷，点提交。-Controller接收前端表单，结果写入数据库"><a href="#3-3-填写问卷，点提交。-Controller接收前端表单，结果写入数据库" class="headerlink" title="3.3 填写问卷，点提交。(Controller接收前端表单，结果写入数据库)"></a>3.3 填写问卷，点提交。(Controller接收前端表单，结果写入数据库)</h4><p>主要是前端传值到后端的问题。<br>在vote.jsp中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;POST&quot; action=&quot;submit&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>在QuizController.java中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/submit&quot;, method = RequestMethod.POST)</span><br><span class="line">   public String submit(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">       Enumeration&lt;String&gt; enu = request.getParameterNames();        //获得表单中所有值</span><br><span class="line">       while (enu.hasMoreElements()) &#123;</span><br><span class="line">           String paraName = (String) enu.nextElement();</span><br><span class="line">           String value = request.getParameter(paraName);   //按照表单中的顺序，一个个接收值</span><br><span class="line">           ...</span><br><span class="line">           dbService.saveOrUpdateResult(result); //将成绩写入数据库中</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-4-管理员登录，查看结果。-身份验证后，JSP展示结果"><a href="#3-4-管理员登录，查看结果。-身份验证后，JSP展示结果" class="headerlink" title="3.4 管理员登录，查看结果。(身份验证后，JSP展示结果)"></a>3.4 管理员登录，查看结果。(身份验证后，JSP展示结果)</h4><p>提供管理员登录页面login.jsp，登录后进入参评人列表页面result.jsp；点击参评人超链接，进入详细成绩页面detail.jsp，统计分析个人得票结果。</p><p>到这里已经没有什么难度，不再写了。</p><hr><h2 id="一点心得"><a href="#一点心得" class="headerlink" title="一点心得"></a>一点心得</h2><h3 id="1-hibernate如何将数组成员对应到数据库"><a href="#1-hibernate如何将数组成员对应到数据库" class="headerlink" title="1. hibernate如何将数组成员对应到数据库"></a>1. hibernate如何将数组成员对应到数据库</h3><p>对于Question对象，成员id、title都能自动对应数据库中表的一列，而options作为一个List就带来很多麻烦。</p><p><strong>解决方法：把List<string>拼接成一个String保存</string></strong>，当使用时，按照约定规则拆分即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] options = questions[i].options.split(&quot;#&quot;); //自行约定，这里用#分隔字符</span><br></pre></td></tr></table></figure></p><p>成员变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private String options;</span><br></pre></td></tr></table></figure></p><p>完美！</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>终于搭好Java SSH这个架子，实现了基本功能，但不想再继续写了。Web技术迭代太快，后面去尝试下其它技术。</p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
